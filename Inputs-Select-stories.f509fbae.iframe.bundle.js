"use strict";(self.webpackChunk_lyyti_design_system=self.webpackChunk_lyyti_design_system||[]).push([[9],{"./stories/Inputs/Select.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{ChildrenOptions:()=>ChildrenOptions,Default:()=>Default,Disabled:()=>Disabled,Error:()=>Error,HelperText:()=>HelperText,Large:()=>Large,MultipleSelect:()=>MultipleSelect,MultipleSelectCheckbox:()=>MultipleSelectCheckbox,MultipleSelectLargeWhite:()=>MultipleSelectLargeWhite,MultipleSelectOptionDescription:()=>MultipleSelectOptionDescription,MultipleSelectOptionDivider:()=>MultipleSelectOptionDivider,OptionDescription:()=>OptionDescription,OptionDivider:()=>OptionDivider,StartAdornment:()=>StartAdornment,White:()=>White,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var _Default_parameters,_Default_parameters_docs,_Default_parameters1,_Large_parameters,_Large_parameters_docs,_Large_parameters1,_HelperText_parameters,_HelperText_parameters_docs,_HelperText_parameters1,_Error_parameters,_Error_parameters_docs,_Error_parameters1,_StartAdornment_parameters,_StartAdornment_parameters_docs,_StartAdornment_parameters1,_OptionDivider_parameters,_OptionDivider_parameters_docs,_OptionDivider_parameters1,_OptionDescription_parameters,_OptionDescription_parameters_docs,_OptionDescription_parameters1,_Disabled_parameters,_Disabled_parameters_docs,_Disabled_parameters1,_White_parameters,_White_parameters_docs,_White_parameters1,_ChildrenOptions_parameters,_ChildrenOptions_parameters_docs,_ChildrenOptions_parameters1,_MultipleSelect_parameters,_MultipleSelect_parameters_docs,_MultipleSelect_parameters1,_MultipleSelectCheckbox_parameters,_MultipleSelectCheckbox_parameters_docs,_MultipleSelectCheckbox_parameters1,_MultipleSelectOptionDivider_parameters,_MultipleSelectOptionDivider_parameters_docs,_MultipleSelectOptionDivider_parameters1,_MultipleSelectOptionDescription_parameters,_MultipleSelectOptionDescription_parameters_docs,_MultipleSelectOptionDescription_parameters1,_MultipleSelectLargeWhite_parameters,_MultipleSelectLargeWhite_parameters_docs,_MultipleSelectLargeWhite_parameters1,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/next/dist/compiled/react/jsx-runtime.js"),_src_components_Select__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/components/Select.tsx"),react__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/next/dist/compiled/react/index.js"),_storybook_excludedParams__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./.storybook/excludedParams.ts"),_src__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./src/index.ts"),_src_icons__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./src/icons/index.ts");const __WEBPACK_DEFAULT_EXPORT__={title:"Components/Inputs/Select",component:_src_components_Select__WEBPACK_IMPORTED_MODULE_1__.A,parameters:{docs:{description:{component:"Select components are used for collecting user provided information from a list of options."}},backgrounds:{default:"light",values:[{name:"light",value:"#ffffff"},{name:"dark",value:"#045b56"}]},controls:{exclude:(0,_storybook_excludedParams__WEBPACK_IMPORTED_MODULE_5__.l)(["color"])}},args:{label:"Label",multiple:!1}},SelectTemplate=args=>{var _args_SelectProps;const isMultiple=Boolean("SelectProps"in args&&(null===(_args_SelectProps=args.SelectProps)||void 0===_args_SelectProps?void 0:_args_SelectProps.multiple)),[selectValue,setSelectValue]=(0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(isMultiple?[0]:0);return args.value=selectValue,args.onChange=e=>setSelectValue(e.target.value),args.options||(args.options=[{id:0,value:"Select..."},{id:1,value:"Option 1"},{id:2,value:"Option 2"},{id:3,value:"Option 3"},{id:4,value:"Option 4"}]),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_src_components_Select__WEBPACK_IMPORTED_MODULE_1__.A,{...args})},MultiSelectTemplate=args=>(args.options||(args.options=[{id:0,value:"Select..."},{id:1,value:"Option 1"},{id:2,value:"Option 2"},{id:3,value:"Option 3"},{id:4,value:"Option 4"}]),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_src_components_Select__WEBPACK_IMPORTED_MODULE_1__.A,{...args})),Default=SelectTemplate.bind({});Default.args={};const Large=SelectTemplate.bind({});Large.args={margin:"normal"};const HelperText=SelectTemplate.bind({});HelperText.args={helperText:"Helper text"};const Error=SelectTemplate.bind({});Error.args={helperText:"Helper text",error:!0};const StartAdornment=SelectTemplate.bind({});StartAdornment.args={helperText:"Helper text",adornment:"Kg"};const OptionDivider=SelectTemplate.bind({});OptionDivider.args={helperText:"Helper text",optionDivider:!0};const OptionDescription=SelectTemplate.bind({});OptionDescription.args={helperText:"Helper text",options:[{id:0,value:"Select..."},{id:1,value:"Option 1",description:"lorem ipsum dolor"},{id:2,value:"Option 2",description:"lorem ipsum dolor"},{id:3,value:"Option 3",description:"lorem ipsum dolor"},{id:4,value:"Option 4",description:"lorem ipsum dolor"}]};const Disabled=SelectTemplate.bind({});Disabled.args={helperText:"Helper text",disabled:!0};const White=SelectTemplate.bind({});White.args={color:"white"},White.parameters={backgrounds:{default:"dark"}};const ChildrenOptions=SelectTemplate.bind({});ChildrenOptions.args={children:[{id:0,value:"Select..."},{id:1,value:"Option 1"},{id:2,value:"Option 2"},{id:3,value:"Option 3"},{id:4,value:"Option 4"}].map((param=>{let{id,value}=param;return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(_src__WEBPACK_IMPORTED_MODULE_3__.Dr,{value:id,sx:{display:"flex",alignItems:"center",columnGap:1},children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_src_icons__WEBPACK_IMPORTED_MODULE_4__.R2D,{}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_src__WEBPACK_IMPORTED_MODULE_3__.o5,{sx:{color:"text.secondary"},children:value})]},id)}))};const MultipleSelect=MultiSelectTemplate.bind({});MultipleSelect.args={multiple:!0,placeholder:"Select",fullWidth:!0};const MultipleSelectCheckbox=SelectTemplate.bind({});MultipleSelectCheckbox.args={placeholder:"Select",fullWidth:!0,SelectProps:{multiple:!0},checkbox:!0};const MultipleSelectOptionDivider=MultiSelectTemplate.bind({});MultipleSelectOptionDivider.args={multiple:!0,placeholder:"Select",fullWidth:!0,optionDivider:!0};const MultipleSelectOptionDescription=MultiSelectTemplate.bind({});MultipleSelectOptionDescription.args={multiple:!0,placeholder:"Select",fullWidth:!0,options:[{id:0,value:"Select..."},{id:1,value:"Option 1",description:"lorem ipsum dolor"},{id:2,value:"Option 2",description:"lorem ipsum dolor"},{id:3,value:"Option 3",description:"lorem ipsum dolor"},{id:4,value:"Option 4",description:"lorem ipsum dolor"}]};const MultipleSelectLargeWhite=MultiSelectTemplate.bind({});MultipleSelectLargeWhite.args={multiple:!0,placeholder:"Select",fullWidth:!0,size:"medium",color:"white"},MultipleSelectLargeWhite.parameters={backgrounds:{default:"dark"}},Default.parameters={...Default.parameters,docs:{...null===(_Default_parameters=Default.parameters)||void 0===_Default_parameters?void 0:_Default_parameters.docs,source:{originalSource:"(args: SelectProps) => {\n  const isMultiple = Boolean('SelectProps' in args && args.SelectProps?.multiple);\n  const [selectValue, setSelectValue] = useState<Array<string | number> | string | number>(isMultiple ? [0] : 0);\n  args.value = selectValue;\n  args.onChange = (e: ChangeEvent<HTMLInputElement>) => setSelectValue(e.target.value);\n  if (!args.options) {\n    args.options = [{\n      id: 0,\n      value: 'Select...'\n    }, {\n      id: 1,\n      value: 'Option 1'\n    }, {\n      id: 2,\n      value: 'Option 2'\n    }, {\n      id: 3,\n      value: 'Option 3'\n    }, {\n      id: 4,\n      value: 'Option 4'\n    }];\n  }\n  return <Select {...args} />;\n}",...null===(_Default_parameters1=Default.parameters)||void 0===_Default_parameters1||null===(_Default_parameters_docs=_Default_parameters1.docs)||void 0===_Default_parameters_docs?void 0:_Default_parameters_docs.source}}},Large.parameters={...Large.parameters,docs:{...null===(_Large_parameters=Large.parameters)||void 0===_Large_parameters?void 0:_Large_parameters.docs,source:{originalSource:"(args: SelectProps) => {\n  const isMultiple = Boolean('SelectProps' in args && args.SelectProps?.multiple);\n  const [selectValue, setSelectValue] = useState<Array<string | number> | string | number>(isMultiple ? [0] : 0);\n  args.value = selectValue;\n  args.onChange = (e: ChangeEvent<HTMLInputElement>) => setSelectValue(e.target.value);\n  if (!args.options) {\n    args.options = [{\n      id: 0,\n      value: 'Select...'\n    }, {\n      id: 1,\n      value: 'Option 1'\n    }, {\n      id: 2,\n      value: 'Option 2'\n    }, {\n      id: 3,\n      value: 'Option 3'\n    }, {\n      id: 4,\n      value: 'Option 4'\n    }];\n  }\n  return <Select {...args} />;\n}",...null===(_Large_parameters1=Large.parameters)||void 0===_Large_parameters1||null===(_Large_parameters_docs=_Large_parameters1.docs)||void 0===_Large_parameters_docs?void 0:_Large_parameters_docs.source}}},HelperText.parameters={...HelperText.parameters,docs:{...null===(_HelperText_parameters=HelperText.parameters)||void 0===_HelperText_parameters?void 0:_HelperText_parameters.docs,source:{originalSource:"(args: SelectProps) => {\n  const isMultiple = Boolean('SelectProps' in args && args.SelectProps?.multiple);\n  const [selectValue, setSelectValue] = useState<Array<string | number> | string | number>(isMultiple ? [0] : 0);\n  args.value = selectValue;\n  args.onChange = (e: ChangeEvent<HTMLInputElement>) => setSelectValue(e.target.value);\n  if (!args.options) {\n    args.options = [{\n      id: 0,\n      value: 'Select...'\n    }, {\n      id: 1,\n      value: 'Option 1'\n    }, {\n      id: 2,\n      value: 'Option 2'\n    }, {\n      id: 3,\n      value: 'Option 3'\n    }, {\n      id: 4,\n      value: 'Option 4'\n    }];\n  }\n  return <Select {...args} />;\n}",...null===(_HelperText_parameters1=HelperText.parameters)||void 0===_HelperText_parameters1||null===(_HelperText_parameters_docs=_HelperText_parameters1.docs)||void 0===_HelperText_parameters_docs?void 0:_HelperText_parameters_docs.source}}},Error.parameters={...Error.parameters,docs:{...null===(_Error_parameters=Error.parameters)||void 0===_Error_parameters?void 0:_Error_parameters.docs,source:{originalSource:"(args: SelectProps) => {\n  const isMultiple = Boolean('SelectProps' in args && args.SelectProps?.multiple);\n  const [selectValue, setSelectValue] = useState<Array<string | number> | string | number>(isMultiple ? [0] : 0);\n  args.value = selectValue;\n  args.onChange = (e: ChangeEvent<HTMLInputElement>) => setSelectValue(e.target.value);\n  if (!args.options) {\n    args.options = [{\n      id: 0,\n      value: 'Select...'\n    }, {\n      id: 1,\n      value: 'Option 1'\n    }, {\n      id: 2,\n      value: 'Option 2'\n    }, {\n      id: 3,\n      value: 'Option 3'\n    }, {\n      id: 4,\n      value: 'Option 4'\n    }];\n  }\n  return <Select {...args} />;\n}",...null===(_Error_parameters1=Error.parameters)||void 0===_Error_parameters1||null===(_Error_parameters_docs=_Error_parameters1.docs)||void 0===_Error_parameters_docs?void 0:_Error_parameters_docs.source}}},StartAdornment.parameters={...StartAdornment.parameters,docs:{...null===(_StartAdornment_parameters=StartAdornment.parameters)||void 0===_StartAdornment_parameters?void 0:_StartAdornment_parameters.docs,source:{originalSource:"(args: SelectProps) => {\n  const isMultiple = Boolean('SelectProps' in args && args.SelectProps?.multiple);\n  const [selectValue, setSelectValue] = useState<Array<string | number> | string | number>(isMultiple ? [0] : 0);\n  args.value = selectValue;\n  args.onChange = (e: ChangeEvent<HTMLInputElement>) => setSelectValue(e.target.value);\n  if (!args.options) {\n    args.options = [{\n      id: 0,\n      value: 'Select...'\n    }, {\n      id: 1,\n      value: 'Option 1'\n    }, {\n      id: 2,\n      value: 'Option 2'\n    }, {\n      id: 3,\n      value: 'Option 3'\n    }, {\n      id: 4,\n      value: 'Option 4'\n    }];\n  }\n  return <Select {...args} />;\n}",...null===(_StartAdornment_parameters1=StartAdornment.parameters)||void 0===_StartAdornment_parameters1||null===(_StartAdornment_parameters_docs=_StartAdornment_parameters1.docs)||void 0===_StartAdornment_parameters_docs?void 0:_StartAdornment_parameters_docs.source}}},OptionDivider.parameters={...OptionDivider.parameters,docs:{...null===(_OptionDivider_parameters=OptionDivider.parameters)||void 0===_OptionDivider_parameters?void 0:_OptionDivider_parameters.docs,source:{originalSource:"(args: SelectProps) => {\n  const isMultiple = Boolean('SelectProps' in args && args.SelectProps?.multiple);\n  const [selectValue, setSelectValue] = useState<Array<string | number> | string | number>(isMultiple ? [0] : 0);\n  args.value = selectValue;\n  args.onChange = (e: ChangeEvent<HTMLInputElement>) => setSelectValue(e.target.value);\n  if (!args.options) {\n    args.options = [{\n      id: 0,\n      value: 'Select...'\n    }, {\n      id: 1,\n      value: 'Option 1'\n    }, {\n      id: 2,\n      value: 'Option 2'\n    }, {\n      id: 3,\n      value: 'Option 3'\n    }, {\n      id: 4,\n      value: 'Option 4'\n    }];\n  }\n  return <Select {...args} />;\n}",...null===(_OptionDivider_parameters1=OptionDivider.parameters)||void 0===_OptionDivider_parameters1||null===(_OptionDivider_parameters_docs=_OptionDivider_parameters1.docs)||void 0===_OptionDivider_parameters_docs?void 0:_OptionDivider_parameters_docs.source}}},OptionDescription.parameters={...OptionDescription.parameters,docs:{...null===(_OptionDescription_parameters=OptionDescription.parameters)||void 0===_OptionDescription_parameters?void 0:_OptionDescription_parameters.docs,source:{originalSource:"(args: SelectProps) => {\n  const isMultiple = Boolean('SelectProps' in args && args.SelectProps?.multiple);\n  const [selectValue, setSelectValue] = useState<Array<string | number> | string | number>(isMultiple ? [0] : 0);\n  args.value = selectValue;\n  args.onChange = (e: ChangeEvent<HTMLInputElement>) => setSelectValue(e.target.value);\n  if (!args.options) {\n    args.options = [{\n      id: 0,\n      value: 'Select...'\n    }, {\n      id: 1,\n      value: 'Option 1'\n    }, {\n      id: 2,\n      value: 'Option 2'\n    }, {\n      id: 3,\n      value: 'Option 3'\n    }, {\n      id: 4,\n      value: 'Option 4'\n    }];\n  }\n  return <Select {...args} />;\n}",...null===(_OptionDescription_parameters1=OptionDescription.parameters)||void 0===_OptionDescription_parameters1||null===(_OptionDescription_parameters_docs=_OptionDescription_parameters1.docs)||void 0===_OptionDescription_parameters_docs?void 0:_OptionDescription_parameters_docs.source}}},Disabled.parameters={...Disabled.parameters,docs:{...null===(_Disabled_parameters=Disabled.parameters)||void 0===_Disabled_parameters?void 0:_Disabled_parameters.docs,source:{originalSource:"(args: SelectProps) => {\n  const isMultiple = Boolean('SelectProps' in args && args.SelectProps?.multiple);\n  const [selectValue, setSelectValue] = useState<Array<string | number> | string | number>(isMultiple ? [0] : 0);\n  args.value = selectValue;\n  args.onChange = (e: ChangeEvent<HTMLInputElement>) => setSelectValue(e.target.value);\n  if (!args.options) {\n    args.options = [{\n      id: 0,\n      value: 'Select...'\n    }, {\n      id: 1,\n      value: 'Option 1'\n    }, {\n      id: 2,\n      value: 'Option 2'\n    }, {\n      id: 3,\n      value: 'Option 3'\n    }, {\n      id: 4,\n      value: 'Option 4'\n    }];\n  }\n  return <Select {...args} />;\n}",...null===(_Disabled_parameters1=Disabled.parameters)||void 0===_Disabled_parameters1||null===(_Disabled_parameters_docs=_Disabled_parameters1.docs)||void 0===_Disabled_parameters_docs?void 0:_Disabled_parameters_docs.source}}},White.parameters={...White.parameters,docs:{...null===(_White_parameters=White.parameters)||void 0===_White_parameters?void 0:_White_parameters.docs,source:{originalSource:"(args: SelectProps) => {\n  const isMultiple = Boolean('SelectProps' in args && args.SelectProps?.multiple);\n  const [selectValue, setSelectValue] = useState<Array<string | number> | string | number>(isMultiple ? [0] : 0);\n  args.value = selectValue;\n  args.onChange = (e: ChangeEvent<HTMLInputElement>) => setSelectValue(e.target.value);\n  if (!args.options) {\n    args.options = [{\n      id: 0,\n      value: 'Select...'\n    }, {\n      id: 1,\n      value: 'Option 1'\n    }, {\n      id: 2,\n      value: 'Option 2'\n    }, {\n      id: 3,\n      value: 'Option 3'\n    }, {\n      id: 4,\n      value: 'Option 4'\n    }];\n  }\n  return <Select {...args} />;\n}",...null===(_White_parameters1=White.parameters)||void 0===_White_parameters1||null===(_White_parameters_docs=_White_parameters1.docs)||void 0===_White_parameters_docs?void 0:_White_parameters_docs.source}}},ChildrenOptions.parameters={...ChildrenOptions.parameters,docs:{...null===(_ChildrenOptions_parameters=ChildrenOptions.parameters)||void 0===_ChildrenOptions_parameters?void 0:_ChildrenOptions_parameters.docs,source:{originalSource:"(args: SelectProps) => {\n  const isMultiple = Boolean('SelectProps' in args && args.SelectProps?.multiple);\n  const [selectValue, setSelectValue] = useState<Array<string | number> | string | number>(isMultiple ? [0] : 0);\n  args.value = selectValue;\n  args.onChange = (e: ChangeEvent<HTMLInputElement>) => setSelectValue(e.target.value);\n  if (!args.options) {\n    args.options = [{\n      id: 0,\n      value: 'Select...'\n    }, {\n      id: 1,\n      value: 'Option 1'\n    }, {\n      id: 2,\n      value: 'Option 2'\n    }, {\n      id: 3,\n      value: 'Option 3'\n    }, {\n      id: 4,\n      value: 'Option 4'\n    }];\n  }\n  return <Select {...args} />;\n}",...null===(_ChildrenOptions_parameters1=ChildrenOptions.parameters)||void 0===_ChildrenOptions_parameters1||null===(_ChildrenOptions_parameters_docs=_ChildrenOptions_parameters1.docs)||void 0===_ChildrenOptions_parameters_docs?void 0:_ChildrenOptions_parameters_docs.source}}},MultipleSelect.parameters={...MultipleSelect.parameters,docs:{...null===(_MultipleSelect_parameters=MultipleSelect.parameters)||void 0===_MultipleSelect_parameters?void 0:_MultipleSelect_parameters.docs,source:{originalSource:"args => {\n  if (!args.options) {\n    args.options = [{\n      id: 0,\n      value: 'Select...'\n    }, {\n      id: 1,\n      value: 'Option 1'\n    }, {\n      id: 2,\n      value: 'Option 2'\n    }, {\n      id: 3,\n      value: 'Option 3'\n    }, {\n      id: 4,\n      value: 'Option 4'\n    }];\n  }\n  return <Select {...args} />;\n}",...null===(_MultipleSelect_parameters1=MultipleSelect.parameters)||void 0===_MultipleSelect_parameters1||null===(_MultipleSelect_parameters_docs=_MultipleSelect_parameters1.docs)||void 0===_MultipleSelect_parameters_docs?void 0:_MultipleSelect_parameters_docs.source}}},MultipleSelectCheckbox.parameters={...MultipleSelectCheckbox.parameters,docs:{...null===(_MultipleSelectCheckbox_parameters=MultipleSelectCheckbox.parameters)||void 0===_MultipleSelectCheckbox_parameters?void 0:_MultipleSelectCheckbox_parameters.docs,source:{originalSource:"(args: SelectProps) => {\n  const isMultiple = Boolean('SelectProps' in args && args.SelectProps?.multiple);\n  const [selectValue, setSelectValue] = useState<Array<string | number> | string | number>(isMultiple ? [0] : 0);\n  args.value = selectValue;\n  args.onChange = (e: ChangeEvent<HTMLInputElement>) => setSelectValue(e.target.value);\n  if (!args.options) {\n    args.options = [{\n      id: 0,\n      value: 'Select...'\n    }, {\n      id: 1,\n      value: 'Option 1'\n    }, {\n      id: 2,\n      value: 'Option 2'\n    }, {\n      id: 3,\n      value: 'Option 3'\n    }, {\n      id: 4,\n      value: 'Option 4'\n    }];\n  }\n  return <Select {...args} />;\n}",...null===(_MultipleSelectCheckbox_parameters1=MultipleSelectCheckbox.parameters)||void 0===_MultipleSelectCheckbox_parameters1||null===(_MultipleSelectCheckbox_parameters_docs=_MultipleSelectCheckbox_parameters1.docs)||void 0===_MultipleSelectCheckbox_parameters_docs?void 0:_MultipleSelectCheckbox_parameters_docs.source}}},MultipleSelectOptionDivider.parameters={...MultipleSelectOptionDivider.parameters,docs:{...null===(_MultipleSelectOptionDivider_parameters=MultipleSelectOptionDivider.parameters)||void 0===_MultipleSelectOptionDivider_parameters?void 0:_MultipleSelectOptionDivider_parameters.docs,source:{originalSource:"args => {\n  if (!args.options) {\n    args.options = [{\n      id: 0,\n      value: 'Select...'\n    }, {\n      id: 1,\n      value: 'Option 1'\n    }, {\n      id: 2,\n      value: 'Option 2'\n    }, {\n      id: 3,\n      value: 'Option 3'\n    }, {\n      id: 4,\n      value: 'Option 4'\n    }];\n  }\n  return <Select {...args} />;\n}",...null===(_MultipleSelectOptionDivider_parameters1=MultipleSelectOptionDivider.parameters)||void 0===_MultipleSelectOptionDivider_parameters1||null===(_MultipleSelectOptionDivider_parameters_docs=_MultipleSelectOptionDivider_parameters1.docs)||void 0===_MultipleSelectOptionDivider_parameters_docs?void 0:_MultipleSelectOptionDivider_parameters_docs.source}}},MultipleSelectOptionDescription.parameters={...MultipleSelectOptionDescription.parameters,docs:{...null===(_MultipleSelectOptionDescription_parameters=MultipleSelectOptionDescription.parameters)||void 0===_MultipleSelectOptionDescription_parameters?void 0:_MultipleSelectOptionDescription_parameters.docs,source:{originalSource:"args => {\n  if (!args.options) {\n    args.options = [{\n      id: 0,\n      value: 'Select...'\n    }, {\n      id: 1,\n      value: 'Option 1'\n    }, {\n      id: 2,\n      value: 'Option 2'\n    }, {\n      id: 3,\n      value: 'Option 3'\n    }, {\n      id: 4,\n      value: 'Option 4'\n    }];\n  }\n  return <Select {...args} />;\n}",...null===(_MultipleSelectOptionDescription_parameters1=MultipleSelectOptionDescription.parameters)||void 0===_MultipleSelectOptionDescription_parameters1||null===(_MultipleSelectOptionDescription_parameters_docs=_MultipleSelectOptionDescription_parameters1.docs)||void 0===_MultipleSelectOptionDescription_parameters_docs?void 0:_MultipleSelectOptionDescription_parameters_docs.source}}},MultipleSelectLargeWhite.parameters={...MultipleSelectLargeWhite.parameters,docs:{...null===(_MultipleSelectLargeWhite_parameters=MultipleSelectLargeWhite.parameters)||void 0===_MultipleSelectLargeWhite_parameters?void 0:_MultipleSelectLargeWhite_parameters.docs,source:{originalSource:"args => {\n  if (!args.options) {\n    args.options = [{\n      id: 0,\n      value: 'Select...'\n    }, {\n      id: 1,\n      value: 'Option 1'\n    }, {\n      id: 2,\n      value: 'Option 2'\n    }, {\n      id: 3,\n      value: 'Option 3'\n    }, {\n      id: 4,\n      value: 'Option 4'\n    }];\n  }\n  return <Select {...args} />;\n}",...null===(_MultipleSelectLargeWhite_parameters1=MultipleSelectLargeWhite.parameters)||void 0===_MultipleSelectLargeWhite_parameters1||null===(_MultipleSelectLargeWhite_parameters_docs=_MultipleSelectLargeWhite_parameters1.docs)||void 0===_MultipleSelectLargeWhite_parameters_docs?void 0:_MultipleSelectLargeWhite_parameters_docs.source}}};const __namedExportsOrder=["Default","Large","HelperText","Error","StartAdornment","OptionDivider","OptionDescription","Disabled","White","ChildrenOptions","MultipleSelect","MultipleSelectCheckbox","MultipleSelectOptionDivider","MultipleSelectOptionDescription","MultipleSelectLargeWhite"]}}]);
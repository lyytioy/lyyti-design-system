"use strict";(self.webpackChunk_lyyti_design_system=self.webpackChunk_lyyti_design_system||[]).push([[7752],{"./node_modules/@mui/material/Box/Box.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Z:()=>Box_Box});var esm_extends=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/extends.js"),objectWithoutPropertiesLoose=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js"),react=__webpack_require__("./node_modules/react/index.js"),clsx=__webpack_require__("./node_modules/@mui/system/node_modules/clsx/dist/clsx.mjs"),styled_engine=__webpack_require__("./node_modules/@mui/styled-engine/index.js"),styleFunctionSx=__webpack_require__("./node_modules/@mui/system/esm/styleFunctionSx/styleFunctionSx.js"),extendSxProp=__webpack_require__("./node_modules/@mui/system/esm/styleFunctionSx/extendSxProp.js"),useTheme=__webpack_require__("./node_modules/@mui/system/esm/useTheme.js"),jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js");const _excluded=["className","component"];var ClassNameGenerator=__webpack_require__("./node_modules/@mui/utils/esm/ClassNameGenerator/ClassNameGenerator.js"),createTheme=__webpack_require__("./node_modules/@mui/material/styles/createTheme.js"),identifier=__webpack_require__("./node_modules/@mui/material/styles/identifier.js");const defaultTheme=(0,createTheme.Z)(),Box=function createBox(options={}){const{themeId,defaultTheme,defaultClassName="MuiBox-root",generateClassName}=options,BoxRoot=(0,styled_engine.ZP)("div",{shouldForwardProp:prop=>"theme"!==prop&&"sx"!==prop&&"as"!==prop})(styleFunctionSx.Z);return react.forwardRef((function Box(inProps,ref){const theme=(0,useTheme.Z)(defaultTheme),_extendSxProp=(0,extendSxProp.Z)(inProps),{className,component="div"}=_extendSxProp,other=(0,objectWithoutPropertiesLoose.Z)(_extendSxProp,_excluded);return(0,jsx_runtime.jsx)(BoxRoot,(0,esm_extends.Z)({as:component,ref,className:(0,clsx.Z)(className,generateClassName?generateClassName(defaultClassName):defaultClassName),theme:themeId&&theme[themeId]||theme},other))}))}({themeId:identifier.Z,defaultTheme,defaultClassName:"MuiBox-root",generateClassName:ClassNameGenerator.Z.generate}),Box_Box=Box},"./node_modules/@mui/x-data-grid-pro/DataGridPro/DataGridPro.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{s:()=>DataGridPro});var esm_extends=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/extends.js"),react=__webpack_require__("./node_modules/react/index.js"),prop_types=__webpack_require__("./node_modules/prop-types/index.js"),prop_types_default=__webpack_require__.n(prop_types);const _keyStr="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";const base64Decode=input=>{let chr1,chr2,chr3,enc1,enc2,enc3,enc4,output="",i=0;for(input=input.replace(/[^A-Za-z0-9\+\/\=]/g,"");i<input.length;)enc1=_keyStr.indexOf(input.charAt(i++)),enc2=_keyStr.indexOf(input.charAt(i++)),enc3=_keyStr.indexOf(input.charAt(i++)),enc4=_keyStr.indexOf(input.charAt(i++)),chr1=enc1<<2|enc2>>4,chr2=(15&enc2)<<4|enc3>>2,chr3=(3&enc3)<<6|enc4,output+=String.fromCharCode(chr1),64!=enc3&&(output+=String.fromCharCode(chr2)),64!=enc4&&(output+=String.fromCharCode(chr3));return output},k=[];let i=0;for(;i<64;)k[i]=0|4294967296*Math.sin(++i%Math.PI);var LicenseStatus=function(LicenseStatus){return LicenseStatus.NotFound="NotFound",LicenseStatus.Invalid="Invalid",LicenseStatus.Expired="Expired",LicenseStatus.ExpiredVersion="ExpiredVersion",LicenseStatus.Valid="Valid",LicenseStatus.OutOfScope="OutOfScope",LicenseStatus}(LicenseStatus||{});const LICENSE_SCOPES=["pro","premium"],LICENSING_MODELS=["perpetual","subscription"];var console=__webpack_require__("./node_modules/console-browserify/index.js");const expiryReg=/^.*EXPIRY=([0-9]+),.*$/,decodeLicense=encodedLicense=>{const license=base64Decode(encodedLicense);return license.includes("KEYVERSION=1")?(license=>{let expiryTimestamp;try{expiryTimestamp=parseInt(license.match(expiryReg)[1],10),expiryTimestamp&&!Number.isNaN(expiryTimestamp)||(expiryTimestamp=null)}catch(err){expiryTimestamp=null}return{scope:"pro",licensingModel:"perpetual",expiryTimestamp}})(license):license.includes("KV=2")?(license=>{const licenseInfo={scope:null,licensingModel:null,expiryTimestamp:null};return license.split(",").map((token=>token.split("="))).filter((el=>2===el.length)).forEach((([key,value])=>{if("S"===key&&(licenseInfo.scope=value),"LM"===key&&(licenseInfo.licensingModel=value),"E"===key){const expiryTimestamp=parseInt(value,10);expiryTimestamp&&!Number.isNaN(expiryTimestamp)&&(licenseInfo.expiryTimestamp=expiryTimestamp)}})),licenseInfo})(license):null};function verifyLicense({releaseInfo,licenseKey,acceptedScopes,isProduction}){if(!releaseInfo)throw new Error("MUI: The release information is missing. Not able to validate license.");if(!licenseKey)return LicenseStatus.NotFound;const hash=licenseKey.substr(0,32),encoded=licenseKey.substr(32);if(hash!==function md5(s){const words=[];let b,c,d,j=unescape(encodeURI(s))+"Â€",a=j.length;const h=[b=1732584193,c=4023233417,~b,~c];for(s=--a/4+2|15,words[--s]=8*a;~a;)words[a>>2]|=j.charCodeAt(a)<<8*a--;for(i=j=0;i<s;i+=16){for(a=h;j<64;a=[d=a[3],b+((d=a[0]+[b&c|~b&d,d&b|~d&c,b^c^d,c^(b|~d)][a=j>>4]+k[j]+~~words[i|15&[j,5*j+1,3*j+5,7*j][a]])<<(a=[7,12,17,22,5,9,14,20,4,11,16,23,6,10,15,21][4*a+j++%4])|d>>>-a),b,c])b=0|a[1],c=a[2];for(j=4;j;)h[--j]+=a[j]}for(s="";j<32;)s+=(h[j>>3]>>4*(1^j++)&15).toString(16);return s}(encoded))return LicenseStatus.Invalid;const license=decodeLicense(encoded);if(null==license)return console.error("Error checking license. Key version not found!"),LicenseStatus.Invalid;if(null==license.licensingModel||!LICENSING_MODELS.includes(license.licensingModel))return console.error("Error checking license. Sales model not found or invalid!"),LicenseStatus.Invalid;if(null==license.expiryTimestamp)return console.error("Error checking license. Expiry timestamp not found or invalid!"),LicenseStatus.Invalid;if("perpetual"===license.licensingModel||isProduction){const pkgTimestamp=parseInt(base64Decode(releaseInfo),10);if(Number.isNaN(pkgTimestamp))throw new Error("MUI: The release information is invalid. Not able to validate license.");if(license.expiryTimestamp<pkgTimestamp)return LicenseStatus.ExpiredVersion}else if("subscription"===license.licensingModel&&license.expiryTimestamp<(new Date).getTime())return LicenseStatus.Expired;return null!=license.scope&&LICENSE_SCOPES.includes(license.scope)?acceptedScopes.includes(license.scope)?LicenseStatus.Valid:LicenseStatus.OutOfScope:(console.error("Error checking license. scope not found or invalid!"),LicenseStatus.Invalid)}const ponyfillGlobal="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();ponyfillGlobal.__MUI_LICENSE_INFO__=ponyfillGlobal.__MUI_LICENSE_INFO__||{key:void 0};class LicenseInfo{static getLicenseInfo(){return ponyfillGlobal.__MUI_LICENSE_INFO__}static getLicenseKey(){return LicenseInfo.getLicenseInfo().key}static setLicenseKey(key){LicenseInfo.getLicenseInfo().key=key}}var licenseErrorMessageUtils_console=__webpack_require__("./node_modules/console-browserify/index.js");function showError(message){licenseErrorMessageUtils_console.error(["*************************************************************","",...message,"","*************************************************************"].join("\n"))}const sharedLicenseStatuses={};function useLicenseVerifier(packageName,releaseInfo){return react.useMemo((()=>{const licenseKey=LicenseInfo.getLicenseKey();if(sharedLicenseStatuses[packageName]&&sharedLicenseStatuses[packageName].key===licenseKey)return sharedLicenseStatuses[packageName].status;const acceptedScopes=packageName.includes("premium")?["premium"]:["pro","premium"],plan=packageName.includes("premium")?"Premium":"Pro",licenseStatus=verifyLicense({releaseInfo,licenseKey,acceptedScopes,isProduction:!0});sharedLicenseStatuses[packageName]={key:licenseKey,status:licenseStatus};const fullPackageName=`@mui/${packageName}`;return licenseStatus===LicenseStatus.Invalid?function showInvalidLicenseKeyError(){showError(["MUI: Invalid license key.","","Your MUI X license key format isn't valid. It could be because the license key is missing a character or has a typo.","","To solve the issue, you need to double check that `setLicenseKey()` is called with the right argument","Please check the license key installation https://mui.com/r/x-license-key-installation."])}():licenseStatus===LicenseStatus.OutOfScope?function showLicenseKeyPlanMismatchError(){showError(["MUI: License key plan mismatch.","","Your use of MUI X is not compatible with the plan of your license key. The feature you are trying to use is not included in the plan of your license key. This happens if you try to use `DataGridPremium` with a license key for the Pro plan.","","To solve the issue, you can upgrade your plan from Pro to Premium at https://mui.com/r/x-get-license?scope=premium.","Of if you didn't intend to use Premium features, you can replace the import of `@mui/x-data-grid-premium` with `@mui/x-data-grid-pro`."])}():licenseStatus===LicenseStatus.NotFound?function showMissingLicenseKeyError({plan,packageName}){showError(["MUI: Missing license key.","",`The license key is missing. You might not be allowed to use \`${packageName}\` which is part of MUI X ${plan}.`,"","To solve the issue, you can check the free trial conditions: https://mui.com/r/x-license-trial.","If you are eligible no actions are required. If you are not eligible to the free trial, you need to purchase a license https://mui.com/r/x-get-license or stop using the software immediately."])}({plan,packageName:fullPackageName}):licenseStatus===LicenseStatus.Expired?function showExpiredLicenseKeyError(){showError(["MUI: Expired license key.","","The subscription license key works forever in production with any version released before your license term ends. However, when the term ends, you are not allowed to use the current or older versions in development.","","To solve the issue, you can renew your license https://mui.com/r/x-get-license or stop making changes to code depending on MUI X's APIs."])}():licenseStatus===LicenseStatus.ExpiredVersion&&function showExpiredPackageVersionError({packageName}){showError(["MUI: Expired package version.","",`You have installed a version of \`${packageName}\` that is outside of the maintenance plan of your license key. By default, commercial licenses provide access to new versions released during the first year after the purchase.`,"","To solve the issue, you can renew your license https://mui.com/r/x-get-license or install an older version of the npm package that is compatible with your license key."])}({packageName:fullPackageName}),licenseStatus}),[packageName,releaseInfo])}var jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js");function getLicenseErrorMessage(licenseStatus){switch(licenseStatus){case LicenseStatus.Expired:return"MUI X Expired license key";case LicenseStatus.ExpiredVersion:return"MUI X Expired package version";case LicenseStatus.Invalid:return"MUI X Invalid license key";case LicenseStatus.OutOfScope:return"MUI X License key plan mismatch";case LicenseStatus.NotFound:return"MUI X Missing license key";default:throw new Error("MUI: Unhandled MUI X license status.")}}function Watermark(props){const{packageName,releaseInfo}=props,licenseStatus=useLicenseVerifier(packageName,releaseInfo);return licenseStatus===LicenseStatus.Valid?null:(0,jsx_runtime.jsx)("div",{style:{position:"absolute",pointerEvents:"none",color:"#8282829e",zIndex:1e5,width:"100%",textAlign:"center",bottom:"50%",right:0,letterSpacing:5,fontSize:24},children:getLicenseErrorMessage(licenseStatus)})}var chainPropTypes=__webpack_require__("./node_modules/@mui/utils/esm/chainPropTypes/chainPropTypes.js"),warning_console=__webpack_require__("./node_modules/console-browserify/index.js");const buildWarning=(message,gravity="warning")=>{let alreadyWarned=!1;const cleanMessage=Array.isArray(message)?message.join("\n"):message;return()=>{alreadyWarned||(alreadyWarned=!0,"error"===gravity?warning_console.error(cleanMessage):warning_console.warn(cleanMessage))}};buildWarning(["MUI: `useGridSelector` has been called before the initialization of the state.","This hook can only be used inside the context of the grid."]);const useGridSelector=(apiRef,selector)=>function isOutputSelector(selector){return selector.acceptsApiRef}(selector)?selector(apiRef):selector(apiRef.current.state),GridApiContext=react.createContext(void 0);const GridPrivateApiContext=react.createContext(void 0);function useGridPrivateApiContext(){const privateApiRef=react.useContext(GridPrivateApiContext);if(void 0===privateApiRef)throw new Error(["MUI: Could not find the data grid private context.","It looks like you rendered your component outside of a DataGrid, DataGridPro or DataGridPremium parent component.","This can also happen if you are bundling multiple versions of the data grid."].join("\n"));return privateApiRef}const GridRootPropsContext=react.createContext(void 0);function GridContextProvider({privateApiRef,props,children}){const apiRef=react.useRef(privateApiRef.current.getPublicApi());return(0,jsx_runtime.jsx)(GridRootPropsContext.Provider,{value:props,children:(0,jsx_runtime.jsx)(GridPrivateApiContext.Provider,{value:privateApiRef,children:(0,jsx_runtime.jsx)(GridApiContext.Provider,{value:apiRef,children})})})}var objectWithoutPropertiesLoose=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js"),clsx_m=__webpack_require__("./node_modules/clsx/dist/clsx.m.js"),capitalize=__webpack_require__("./node_modules/@mui/utils/esm/capitalize/capitalize.js"),composeClasses=__webpack_require__("./node_modules/@mui/utils/esm/composeClasses/composeClasses.js"),useForkRef=__webpack_require__("./node_modules/@mui/utils/esm/useForkRef/useForkRef.js"),useEnhancedEffect=__webpack_require__("./node_modules/@mui/utils/esm/useEnhancedEffect/useEnhancedEffect.js"),colorManipulator=__webpack_require__("./node_modules/@mui/system/esm/colorManipulator.js"),styled=__webpack_require__("./node_modules/@mui/material/styles/styled.js"),generateUtilityClass=__webpack_require__("./node_modules/@mui/utils/esm/generateUtilityClass/generateUtilityClass.js"),generateUtilityClasses=__webpack_require__("./node_modules/@mui/utils/esm/generateUtilityClasses/generateUtilityClasses.js");function getDataGridUtilityClass(slot){return(0,generateUtilityClass.Z)("MuiDataGrid",slot)}const gridClasses_gridClasses=(0,generateUtilityClasses.Z)("MuiDataGrid",["actionsCell","aggregationColumnHeader","aggregationColumnHeader--alignLeft","aggregationColumnHeader--alignCenter","aggregationColumnHeader--alignRight","aggregationColumnHeaderLabel","autoHeight","booleanCell","cell--editable","cell--editing","cell--textCenter","cell--textLeft","cell--textRight","cell--withRenderer","cell--rangeTop","cell--rangeBottom","cell--rangeLeft","cell--rangeRight","cell","cellContent","cellCheckbox","cellSkeleton","checkboxInput","columnHeader--alignCenter","columnHeader--alignLeft","columnHeader--alignRight","columnHeader--dragging","columnHeader--moving","columnHeader--numeric","columnHeader--sortable","columnHeader--sorted","columnHeader--filtered","columnHeader","columnHeaderCheckbox","columnHeaderDraggableContainer","columnHeaderDropZone","columnHeaderTitle","columnHeaderTitleContainer","columnHeaderTitleContainerContent","columnGroupHeader","columnHeader--filledGroup","columnHeader--emptyGroup","columnHeader--showColumnBorder","columnHeaders","columnHeadersInner","columnHeadersInner--scrollable","columnSeparator--resizable","columnSeparator--resizing","columnSeparator--sideLeft","columnSeparator--sideRight","columnSeparator","columnsPanel","columnsPanelRow","detailPanel","detailPanels","detailPanelToggleCell","detailPanelToggleCell--expanded","footerCell","panel","panelHeader","panelWrapper","panelContent","panelFooter","paper","editBooleanCell","editInputCell","filterForm","filterFormDeleteIcon","filterFormLogicOperatorInput","filterFormColumnInput","filterFormOperatorInput","filterFormValueInput","filterIcon","footerContainer","headerFilterRow","iconButtonContainer","iconSeparator","main","menu","menuIcon","menuIconButton","menuOpen","menuList","overlay","overlayWrapper","overlayWrapperInner","root","root--densityStandard","root--densityComfortable","root--densityCompact","root--disableUserSelection","row","row--editable","row--editing","row--lastVisible","row--dragging","row--dynamicHeight","row--detailPanelExpanded","rowReorderCellPlaceholder","rowCount","rowReorderCellContainer","rowReorderCell","rowReorderCell--draggable","scrollArea--left","scrollArea--right","scrollArea","selectedRowCount","sortIcon","toolbarContainer","toolbarFilterList","virtualScroller","virtualScrollerContent","virtualScrollerContent--overflowed","virtualScrollerRenderZone","pinnedColumns","pinnedColumns--left","pinnedColumns--right","pinnedColumnHeaders","pinnedColumnHeaders--left","pinnedColumnHeaders--right","withBorderColor","cell--withRightBorder","columnHeader--withRightBorder","treeDataGroupingCell","treeDataGroupingCellToggle","groupingCriteriaCell","groupingCriteriaCellToggle","pinnedRows","pinnedRows--top","pinnedRows--bottom","pinnedRowsRenderZone"]);const GridRootStyles=(0,styled.ZP)("div",{name:"MuiDataGrid",slot:"Root",overridesResolver:(props,styles)=>[{[`&.${gridClasses_gridClasses.autoHeight}`]:styles.autoHeight},{[`&.${gridClasses_gridClasses.aggregationColumnHeader}`]:styles.aggregationColumnHeader},{[`&.${gridClasses_gridClasses["aggregationColumnHeader--alignLeft"]}`]:styles["aggregationColumnHeader--alignLeft"]},{[`&.${gridClasses_gridClasses["aggregationColumnHeader--alignCenter"]}`]:styles["aggregationColumnHeader--alignCenter"]},{[`&.${gridClasses_gridClasses["aggregationColumnHeader--alignRight"]}`]:styles["aggregationColumnHeader--alignRight"]},{[`&.${gridClasses_gridClasses.aggregationColumnHeaderLabel}`]:styles.aggregationColumnHeaderLabel},{[`&.${gridClasses_gridClasses["root--disableUserSelection"]} .${gridClasses_gridClasses.cell}`]:styles["root--disableUserSelection"]},{[`& .${gridClasses_gridClasses.editBooleanCell}`]:styles.editBooleanCell},{[`& .${gridClasses_gridClasses["cell--editing"]}`]:styles["cell--editing"]},{[`& .${gridClasses_gridClasses["cell--textCenter"]}`]:styles["cell--textCenter"]},{[`& .${gridClasses_gridClasses["cell--textLeft"]}`]:styles["cell--textLeft"]},{[`& .${gridClasses_gridClasses["cell--textRight"]}`]:styles["cell--textRight"]},{[`& .${gridClasses_gridClasses["cell--withRenderer"]}`]:styles["cell--withRenderer"]},{[`& .${gridClasses_gridClasses.cell}`]:styles.cell},{[`& .${gridClasses_gridClasses["cell--rangeTop"]}`]:styles["cell--rangeTop"]},{[`& .${gridClasses_gridClasses["cell--rangeBottom"]}`]:styles["cell--rangeBottom"]},{[`& .${gridClasses_gridClasses["cell--rangeLeft"]}`]:styles["cell--rangeLeft"]},{[`& .${gridClasses_gridClasses["cell--rangeRight"]}`]:styles["cell--rangeRight"]},{[`& .${gridClasses_gridClasses.cellContent}`]:styles.cellContent},{[`& .${gridClasses_gridClasses.cellCheckbox}`]:styles.cellCheckbox},{[`& .${gridClasses_gridClasses.cellSkeleton}`]:styles.cellSkeleton},{[`& .${gridClasses_gridClasses.checkboxInput}`]:styles.checkboxInput},{[`& .${gridClasses_gridClasses["columnHeader--alignCenter"]}`]:styles["columnHeader--alignCenter"]},{[`& .${gridClasses_gridClasses["columnHeader--alignLeft"]}`]:styles["columnHeader--alignLeft"]},{[`& .${gridClasses_gridClasses["columnHeader--alignRight"]}`]:styles["columnHeader--alignRight"]},{[`& .${gridClasses_gridClasses["columnHeader--dragging"]}`]:styles["columnHeader--dragging"]},{[`& .${gridClasses_gridClasses["columnHeader--moving"]}`]:styles["columnHeader--moving"]},{[`& .${gridClasses_gridClasses["columnHeader--numeric"]}`]:styles["columnHeader--numeric"]},{[`& .${gridClasses_gridClasses["columnHeader--sortable"]}`]:styles["columnHeader--sortable"]},{[`& .${gridClasses_gridClasses["columnHeader--sorted"]}`]:styles["columnHeader--sorted"]},{[`& .${gridClasses_gridClasses.columnHeader}`]:styles.columnHeader},{[`& .${gridClasses_gridClasses.headerFilterRow}`]:styles.headerFilterRow},{[`& .${gridClasses_gridClasses.columnHeaderCheckbox}`]:styles.columnHeaderCheckbox},{[`& .${gridClasses_gridClasses.columnHeaderDraggableContainer}`]:styles.columnHeaderDraggableContainer},{[`& .${gridClasses_gridClasses.columnHeaderTitleContainer}`]:styles.columnHeaderTitleContainer},{[`& .${gridClasses_gridClasses["columnSeparator--resizable"]}`]:styles["columnSeparator--resizable"]},{[`& .${gridClasses_gridClasses["columnSeparator--resizing"]}`]:styles["columnSeparator--resizing"]},{[`& .${gridClasses_gridClasses.columnSeparator}`]:styles.columnSeparator},{[`& .${gridClasses_gridClasses.filterIcon}`]:styles.filterIcon},{[`& .${gridClasses_gridClasses.iconSeparator}`]:styles.iconSeparator},{[`& .${gridClasses_gridClasses.menuIcon}`]:styles.menuIcon},{[`& .${gridClasses_gridClasses.menuIconButton}`]:styles.menuIconButton},{[`& .${gridClasses_gridClasses.menuOpen}`]:styles.menuOpen},{[`& .${gridClasses_gridClasses.menuList}`]:styles.menuList},{[`& .${gridClasses_gridClasses["row--editable"]}`]:styles["row--editable"]},{[`& .${gridClasses_gridClasses["row--editing"]}`]:styles["row--editing"]},{[`& .${gridClasses_gridClasses["row--dragging"]}`]:styles["row--dragging"]},{[`& .${gridClasses_gridClasses.row}`]:styles.row},{[`& .${gridClasses_gridClasses.rowReorderCellPlaceholder}`]:styles.rowReorderCellPlaceholder},{[`& .${gridClasses_gridClasses.rowReorderCell}`]:styles.rowReorderCell},{[`& .${gridClasses_gridClasses["rowReorderCell--draggable"]}`]:styles["rowReorderCell--draggable"]},{[`& .${gridClasses_gridClasses.sortIcon}`]:styles.sortIcon},{[`& .${gridClasses_gridClasses.withBorderColor}`]:styles.withBorderColor},{[`& .${gridClasses_gridClasses.treeDataGroupingCell}`]:styles.treeDataGroupingCell},{[`& .${gridClasses_gridClasses.treeDataGroupingCellToggle}`]:styles.treeDataGroupingCellToggle},{[`& .${gridClasses_gridClasses.detailPanelToggleCell}`]:styles.detailPanelToggleCell},{[`& .${gridClasses_gridClasses["detailPanelToggleCell--expanded"]}`]:styles["detailPanelToggleCell--expanded"]},styles.root]})((({theme})=>{const borderColor=function getBorderColor(theme){return theme.vars?theme.vars.palette.TableCell.border:"light"===theme.palette.mode?(0,colorManipulator.$n)((0,colorManipulator.Fq)(theme.palette.divider,1),.88):(0,colorManipulator._j)((0,colorManipulator.Fq)(theme.palette.divider,1),.68)}(theme),radius=theme.shape.borderRadius;return(0,esm_extends.Z)({"--unstable_DataGrid-radius":"number"==typeof radius?`${radius}px`:radius,"--unstable_DataGrid-headWeight":theme.typography.fontWeightMedium,"--unstable_DataGrid-overlayBackground":theme.vars?`rgba(${theme.vars.palette.background.defaultChannel} / ${theme.vars.palette.action.disabledOpacity})`:(0,colorManipulator.Fq)(theme.palette.background.default,theme.palette.action.disabledOpacity),flex:1,boxSizing:"border-box",position:"relative",borderWidth:"1px",borderStyle:"solid",borderColor,borderRadius:"var(--unstable_DataGrid-radius)",color:(theme.vars||theme).palette.text.primary},theme.typography.body2,{outline:"none",height:"100%",display:"flex",minWidth:0,minHeight:0,flexDirection:"column",overflowAnchor:"none",[`&.${gridClasses_gridClasses.autoHeight}`]:{height:"auto",[`& .${gridClasses_gridClasses["row--lastVisible"]} .${gridClasses_gridClasses.cell}`]:{borderBottomColor:"transparent"}},[`& .${gridClasses_gridClasses["virtualScrollerContent--overflowed"]} .${gridClasses_gridClasses["row--lastVisible"]} .${gridClasses_gridClasses.cell}`]:{borderBottomColor:"transparent"},[`& .${gridClasses_gridClasses.columnHeader}, & .${gridClasses_gridClasses.cell}`]:{WebkitTapHighlightColor:"transparent",lineHeight:null,padding:"0 10px",boxSizing:"border-box"},[`& .${gridClasses_gridClasses.columnHeader}:focus-within, & .${gridClasses_gridClasses.cell}:focus-within`]:{outline:`solid ${theme.vars?`rgba(${theme.vars.palette.primary.mainChannel} / 0.5)`:(0,colorManipulator.Fq)(theme.palette.primary.main,.5)} 1px`,outlineWidth:1,outlineOffset:-1},[`& .${gridClasses_gridClasses.columnHeader}:focus, & .${gridClasses_gridClasses.cell}:focus`]:{outline:`solid ${theme.palette.primary.main} 1px`},[`& .${gridClasses_gridClasses.columnHeaderCheckbox}, & .${gridClasses_gridClasses.cellCheckbox}`]:{padding:0,justifyContent:"center",alignItems:"center"},[`& .${gridClasses_gridClasses.columnHeader}`]:{position:"relative",display:"flex",alignItems:"center"},[`& .${gridClasses_gridClasses["columnHeader--sorted"]} .${gridClasses_gridClasses.iconButtonContainer}, & .${gridClasses_gridClasses["columnHeader--filtered"]} .${gridClasses_gridClasses.iconButtonContainer}`]:{visibility:"visible",width:"auto"},[`& .${gridClasses_gridClasses.columnHeader}:not(.${gridClasses_gridClasses["columnHeader--sorted"]}) .${gridClasses_gridClasses.sortIcon}`]:{opacity:0,transition:theme.transitions.create(["opacity"],{duration:theme.transitions.duration.shorter})},[`& .${gridClasses_gridClasses.columnHeader}:not(.${gridClasses_gridClasses["columnHeader--sorted"]}):hover .${gridClasses_gridClasses.sortIcon}`]:{opacity:.5},[`& .${gridClasses_gridClasses.columnHeaderTitleContainer}`]:{display:"flex",alignItems:"center",minWidth:0,flex:1,whiteSpace:"nowrap",overflow:"hidden",position:"relative"},[`& .${gridClasses_gridClasses.columnHeaderTitleContainerContent}`]:{overflow:"hidden",display:"flex",alignItems:"center"},[`& .${gridClasses_gridClasses["columnHeader--filledGroup"]} .${gridClasses_gridClasses.columnHeaderTitleContainer}`]:{borderBottomWidth:"1px",borderBottomStyle:"solid",boxSizing:"border-box"},[`& .${gridClasses_gridClasses["columnHeader--filledGroup"]}.${gridClasses_gridClasses["columnHeader--showColumnBorder"]} .${gridClasses_gridClasses.columnHeaderTitleContainer}`]:{borderBottom:"none"},[`& .${gridClasses_gridClasses["columnHeader--filledGroup"]}.${gridClasses_gridClasses["columnHeader--showColumnBorder"]}`]:{borderBottomWidth:"1px",borderBottomStyle:"solid",boxSizing:"border-box"},[`& .${gridClasses_gridClasses.headerFilterRow}`]:{borderTop:`1px solid ${borderColor}`},[`& .${gridClasses_gridClasses.sortIcon}, & .${gridClasses_gridClasses.filterIcon}`]:{fontSize:"inherit"},[`& .${gridClasses_gridClasses["columnHeader--sortable"]}`]:{cursor:"pointer"},[`& .${gridClasses_gridClasses["columnHeader--alignCenter"]} .${gridClasses_gridClasses.columnHeaderTitleContainer}`]:{justifyContent:"center"},[`& .${gridClasses_gridClasses["columnHeader--alignRight"]} .${gridClasses_gridClasses.columnHeaderDraggableContainer}, & .${gridClasses_gridClasses["columnHeader--alignRight"]} .${gridClasses_gridClasses.columnHeaderTitleContainer}`]:{flexDirection:"row-reverse"},[`& .${gridClasses_gridClasses["columnHeader--alignCenter"]} .${gridClasses_gridClasses.menuIcon}, & .${gridClasses_gridClasses["columnHeader--alignRight"]} .${gridClasses_gridClasses.menuIcon}`]:{marginRight:"auto",marginLeft:-6},[`& .${gridClasses_gridClasses["columnHeader--alignRight"]} .${gridClasses_gridClasses.menuIcon}, & .${gridClasses_gridClasses["columnHeader--alignRight"]} .${gridClasses_gridClasses.menuIcon}`]:{marginRight:"auto",marginLeft:-10},[`& .${gridClasses_gridClasses["columnHeader--moving"]}`]:{backgroundColor:(theme.vars||theme).palette.action.hover},[`& .${gridClasses_gridClasses.columnSeparator}`]:{visibility:"hidden",position:"absolute",zIndex:100,display:"flex",flexDirection:"column",justifyContent:"center",color:borderColor},[`& .${gridClasses_gridClasses.columnHeaders}:hover .${gridClasses_gridClasses.columnSeparator}, .${gridClasses_gridClasses["columnSeparator--resizing"]}`]:{visibility:"visible",width:"auto"},[`& .${gridClasses_gridClasses["columnSeparator--sideLeft"]}`]:{left:-12},[`& .${gridClasses_gridClasses["columnSeparator--sideRight"]}`]:{right:-12},[`& .${gridClasses_gridClasses["columnSeparator--resizable"]}`]:{cursor:"col-resize",touchAction:"none","&:hover":{color:(theme.vars||theme).palette.text.primary,"@media (hover: none)":{color:borderColor}},[`&.${gridClasses_gridClasses["columnSeparator--resizing"]}`]:{color:(theme.vars||theme).palette.text.primary},"& svg":{pointerEvents:"none"}},[`& .${gridClasses_gridClasses.iconSeparator}`]:{color:"inherit"},[`& .${gridClasses_gridClasses.menuIcon}`]:{width:0,visibility:"hidden",fontSize:20,marginRight:-10,display:"flex",alignItems:"center"},[`& .${gridClasses_gridClasses.columnHeader}:hover`]:{[`& .${gridClasses_gridClasses.iconButtonContainer}`]:{visibility:"visible",width:"auto"},[`& .${gridClasses_gridClasses.menuIcon}`]:{width:"auto",visibility:"visible"}},[`.${gridClasses_gridClasses.menuOpen}`]:{visibility:"visible",width:"auto"},[`& .${gridClasses_gridClasses.row}`]:{display:"flex",width:"fit-content",breakInside:"avoid","&:hover, &.Mui-hovered":{backgroundColor:(theme.vars||theme).palette.action.hover,"@media (hover: none)":{backgroundColor:"transparent"}},"&.Mui-selected":{backgroundColor:theme.vars?`rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})`:(0,colorManipulator.Fq)(theme.palette.primary.main,theme.palette.action.selectedOpacity),"&:hover, &.Mui-hovered":{backgroundColor:theme.vars?`rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity+theme.palette.action.hoverOpacity})`:(0,colorManipulator.Fq)(theme.palette.primary.main,theme.palette.action.selectedOpacity+theme.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:theme.vars?`rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})`:(0,colorManipulator.Fq)(theme.palette.primary.main,theme.palette.action.selectedOpacity)}}}},[`& .${gridClasses_gridClasses.cell}`]:{display:"flex",alignItems:"center",borderBottom:"1px solid","&.Mui-selected":{backgroundColor:theme.vars?`rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})`:(0,colorManipulator.Fq)(theme.palette.primary.main,theme.palette.action.selectedOpacity),"&:hover, &.Mui-hovered":{backgroundColor:theme.vars?`rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity+theme.palette.action.hoverOpacity})`:(0,colorManipulator.Fq)(theme.palette.primary.main,theme.palette.action.selectedOpacity+theme.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:theme.vars?`rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})`:(0,colorManipulator.Fq)(theme.palette.primary.main,theme.palette.action.selectedOpacity)}}}},[`&.${gridClasses_gridClasses["root--disableUserSelection"]} .${gridClasses_gridClasses.cell}`]:{userSelect:"none"},[`& .${gridClasses_gridClasses.row}:not(.${gridClasses_gridClasses["row--dynamicHeight"]}) > .${gridClasses_gridClasses.cell}`]:{overflow:"hidden",whiteSpace:"nowrap"},[`& .${gridClasses_gridClasses.cellContent}`]:{overflow:"hidden",textOverflow:"ellipsis"},[`& .${gridClasses_gridClasses.cell}.${gridClasses_gridClasses["cell--editing"]}`]:{padding:1,display:"flex",boxShadow:theme.shadows[2],backgroundColor:(theme.vars||theme).palette.background.paper,"&:focus-within":{outline:`solid ${(theme.vars||theme).palette.primary.main} 1px`,outlineOffset:"-1px"}},[`& .${gridClasses_gridClasses["row--editing"]}`]:{boxShadow:theme.shadows[2]},[`& .${gridClasses_gridClasses["row--editing"]} .${gridClasses_gridClasses.cell}`]:{boxShadow:theme.shadows[0],backgroundColor:(theme.vars||theme).palette.background.paper},[`& .${gridClasses_gridClasses.editBooleanCell}`]:{display:"flex",height:"100%",width:"100%",alignItems:"center",justifyContent:"center"},[`& .${gridClasses_gridClasses.booleanCell}[data-value="true"]`]:{color:(theme.vars||theme).palette.text.secondary},[`& .${gridClasses_gridClasses.booleanCell}[data-value="false"]`]:{color:(theme.vars||theme).palette.text.disabled},[`& .${gridClasses_gridClasses.actionsCell}`]:{display:"inline-flex",alignItems:"center",gridGap:theme.spacing(1)},[`& .${gridClasses_gridClasses.rowReorderCell}`]:{display:"inline-flex",flex:1,alignItems:"center",justifyContent:"center",opacity:(theme.vars||theme).palette.action.disabledOpacity},[`& .${gridClasses_gridClasses["rowReorderCell--draggable"]}`]:{cursor:"move",opacity:1},[`& .${gridClasses_gridClasses.rowReorderCellContainer}`]:{padding:0,alignItems:"stretch"},[`.${gridClasses_gridClasses.withBorderColor}`]:{borderColor},[`& .${gridClasses_gridClasses["cell--withRightBorder"]}`]:{borderRightWidth:"1px",borderRightStyle:"solid"},[`& .${gridClasses_gridClasses["columnHeader--withRightBorder"]}`]:{borderRightWidth:"1px",borderRightStyle:"solid"},[`& .${gridClasses_gridClasses["cell--textLeft"]}`]:{justifyContent:"flex-start"},[`& .${gridClasses_gridClasses["cell--textRight"]}`]:{justifyContent:"flex-end"},[`& .${gridClasses_gridClasses["cell--textCenter"]}`]:{justifyContent:"center"},[`& .${gridClasses_gridClasses.columnHeaderDraggableContainer}`]:{display:"flex",width:"100%",height:"100%"},[`& .${gridClasses_gridClasses.rowReorderCellPlaceholder}`]:{display:"none"},[`& .${gridClasses_gridClasses["columnHeader--dragging"]}, & .${gridClasses_gridClasses["row--dragging"]}`]:{background:(theme.vars||theme).palette.background.paper,padding:"0 12px",borderRadius:"var(--unstable_DataGrid-radius)",opacity:(theme.vars||theme).palette.action.disabledOpacity},[`& .${gridClasses_gridClasses["row--dragging"]}`]:{background:(theme.vars||theme).palette.background.paper,padding:"0 12px",borderRadius:"var(--unstable_DataGrid-radius)",opacity:(theme.vars||theme).palette.action.disabledOpacity,[`& .${gridClasses_gridClasses.rowReorderCellPlaceholder}`]:{display:"flex"}},[`& .${gridClasses_gridClasses.treeDataGroupingCell}`]:{display:"flex",alignItems:"center",width:"100%"},[`& .${gridClasses_gridClasses.treeDataGroupingCellToggle}`]:{flex:"0 0 28px",alignSelf:"stretch",marginRight:theme.spacing(2)},[`& .${gridClasses_gridClasses.groupingCriteriaCell}`]:{display:"flex",alignItems:"center",width:"100%"},[`& .${gridClasses_gridClasses.groupingCriteriaCellToggle}`]:{flex:"0 0 28px",alignSelf:"stretch",marginRight:theme.spacing(2)}})}));var es=__webpack_require__("./node_modules/reselect/es/index.js");const cacheContainer={cache:new WeakMap},createSelector=(buildWarning(["MUI: A selector was called without passing the instance ID, which may impact the performance of the grid.","To fix, call it with `apiRef`, e.g. `mySelector(apiRef)`, or pass the instance ID explicitly, e.g `mySelector(state, apiRef.current.instanceId)`."]),(...args)=>{const selector=(...selectorArgs)=>{var _cache$get,_cache$get3;const[stateOrApiRef,instanceId]=selectorArgs,isApiRef=!!stateOrApiRef.current,cacheKey=isApiRef?stateOrApiRef.current.instanceId:null!=instanceId?instanceId:{id:"default"},state=isApiRef?stateOrApiRef.current.state:stateOrApiRef;const{cache}=cacheContainer;var _cache$get2;if(cache.get(cacheKey)&&null!=(_cache$get=cache.get(cacheKey))&&_cache$get.get(args))return null==(_cache$get2=cache.get(cacheKey))?void 0:_cache$get2.get(args)(state,cacheKey);const newSelector=(0,es.P1)(...args);return cache.get(cacheKey)||cache.set(cacheKey,new Map),null==(_cache$get3=cache.get(cacheKey))||_cache$get3.set(args,newSelector),newSelector(state,cacheKey)};return selector.acceptsApiRef=!0,selector}),gridColumnsStateSelector=state=>state.columns,gridColumnFieldsSelector=createSelector(gridColumnsStateSelector,(columnsState=>columnsState.orderedFields)),gridColumnLookupSelector=createSelector(gridColumnsStateSelector,(columnsState=>columnsState.lookup)),gridColumnDefinitionsSelector=createSelector(gridColumnFieldsSelector,gridColumnLookupSelector,((allFields,lookup)=>allFields.map((field=>lookup[field])))),gridColumnVisibilityModelSelector=createSelector(gridColumnsStateSelector,(columnsState=>columnsState.columnVisibilityModel)),gridVisibleColumnDefinitionsSelector=createSelector(gridColumnDefinitionsSelector,gridColumnVisibilityModelSelector,((columns,columnVisibilityModel)=>columns.filter((column=>!1!==columnVisibilityModel[column.field])))),gridVisibleColumnFieldsSelector=createSelector(gridVisibleColumnDefinitionsSelector,(visibleColumns=>visibleColumns.map((column=>column.field)))),gridColumnPositionsSelector=createSelector(gridVisibleColumnDefinitionsSelector,(visibleColumns=>{const positions=[];let currentPosition=0;for(let i=0;i<visibleColumns.length;i+=1)positions.push(currentPosition),currentPosition+=visibleColumns[i].computedWidth;return positions})),gridColumnsTotalWidthSelector=createSelector(gridVisibleColumnDefinitionsSelector,gridColumnPositionsSelector,((visibleColumns,positions)=>{const colCount=visibleColumns.length;return 0===colCount?0:positions[colCount-1]+visibleColumns[colCount-1].computedWidth})),gridFilterableColumnDefinitionsSelector=createSelector(gridColumnDefinitionsSelector,(columns=>columns.filter((col=>col.filterable)))),gridFilterableColumnLookupSelector=createSelector(gridColumnDefinitionsSelector,(columns=>columns.reduce(((acc,col)=>(col.filterable&&(acc[col.field]=col),acc)),{}))),useGridRootProps=()=>{const contextValue=react.useContext(GridRootPropsContext);if(!contextValue)throw new Error("MUI: useGridRootProps should only be used inside the DataGrid, DataGridPro or DataGridPremium component.");return contextValue},gridDensitySelector=state=>state.density,gridDensityValueSelector=createSelector(gridDensitySelector,(density=>density.value)),gridDensityFactorSelector=createSelector(gridDensitySelector,(density=>density.factor)),gridColumnGroupingSelector=state=>state.columnGrouping,gridColumnGroupsUnwrappedModelSelector=createSelector(gridColumnGroupingSelector,(columnGrouping=>{var _columnGrouping$unwra;return null!=(_columnGrouping$unwra=null==columnGrouping?void 0:columnGrouping.unwrappedGroupingModel)?_columnGrouping$unwra:{}})),gridColumnGroupsLookupSelector=createSelector(gridColumnGroupingSelector,(columnGrouping=>{var _columnGrouping$looku;return null!=(_columnGrouping$looku=null==columnGrouping?void 0:columnGrouping.lookup)?_columnGrouping$looku:{}})),gridColumnGroupsHeaderStructureSelector=createSelector(gridColumnGroupingSelector,(columnGrouping=>{var _columnGrouping$heade;return null!=(_columnGrouping$heade=null==columnGrouping?void 0:columnGrouping.headerStructure)?_columnGrouping$heade:[]})),gridColumnGroupsHeaderMaxDepthSelector=createSelector(gridColumnGroupingSelector,(columnGrouping=>{var _columnGrouping$maxDe;return null!=(_columnGrouping$maxDe=null==columnGrouping?void 0:columnGrouping.maxDepth)?_columnGrouping$maxDe:0})),gridRowsStateSelector=state=>state.rows,gridRowCountSelector=createSelector(gridRowsStateSelector,(rows=>rows.totalRowCount)),gridRowsLoadingSelector=createSelector(gridRowsStateSelector,(rows=>rows.loading)),gridTopLevelRowCountSelector=createSelector(gridRowsStateSelector,(rows=>rows.totalTopLevelRowCount)),gridRowsLookupSelector=createSelector(gridRowsStateSelector,(rows=>rows.dataRowIdToModelLookup)),gridRowsDataRowIdToIdLookupSelector=createSelector(gridRowsStateSelector,(rows=>rows.dataRowIdToIdLookup)),gridRowTreeSelector=createSelector(gridRowsStateSelector,(rows=>rows.tree)),gridRowGroupingNameSelector=createSelector(gridRowsStateSelector,(rows=>rows.groupingName)),gridRowTreeDepthsSelector=createSelector(gridRowsStateSelector,(rows=>rows.treeDepths)),gridRowMaximumTreeDepthSelector=createSelector(gridRowsStateSelector,(rows=>{const entries=Object.entries(rows.treeDepths);return 0===entries.length?1:entries.filter((([,nodeCount])=>nodeCount>0)).map((([depth])=>Number(depth))).sort(((a,b)=>b-a))[0]+1})),gridDataRowIdsSelector=createSelector(gridRowsStateSelector,(rows=>rows.dataRowIds)),gridAdditionalRowGroupsSelector=createSelector(gridRowsStateSelector,(rows=>null==rows?void 0:rows.additionalRowGroups)),gridPinnedRowsSelector=createSelector(gridAdditionalRowGroupsSelector,(additionalRowGroups=>{var _rawPinnedRows$bottom,_rawPinnedRows$top;const rawPinnedRows=null==additionalRowGroups?void 0:additionalRowGroups.pinnedRows;return{bottom:null==rawPinnedRows||null==(_rawPinnedRows$bottom=rawPinnedRows.bottom)?void 0:_rawPinnedRows$bottom.map((rowEntry=>{var _rowEntry$model;return{id:rowEntry.id,model:null!=(_rowEntry$model=rowEntry.model)?_rowEntry$model:{}}})),top:null==rawPinnedRows||null==(_rawPinnedRows$top=rawPinnedRows.top)?void 0:_rawPinnedRows$top.map((rowEntry=>{var _rowEntry$model2;return{id:rowEntry.id,model:null!=(_rowEntry$model2=rowEntry.model)?_rowEntry$model2:{}}}))}})),gridPinnedRowsCountSelector=createSelector(gridPinnedRowsSelector,(pinnedRows=>{var _pinnedRows$top,_pinnedRows$bottom;return((null==pinnedRows||null==(_pinnedRows$top=pinnedRows.top)?void 0:_pinnedRows$top.length)||0)+((null==pinnedRows||null==(_pinnedRows$bottom=pinnedRows.bottom)?void 0:_pinnedRows$bottom.length)||0)})),_excluded=["children","className"],GridRoot=react.forwardRef((function GridRoot(props,ref){const rootProps=useGridRootProps(),{children,className}=props,other=(0,objectWithoutPropertiesLoose.Z)(props,_excluded),apiRef=useGridPrivateApiContext(),visibleColumns=useGridSelector(apiRef,gridVisibleColumnDefinitionsSelector),totalRowCount=useGridSelector(apiRef,gridRowCountSelector),densityValue=useGridSelector(apiRef,gridDensityValueSelector),headerGroupingMaxDepth=useGridSelector(apiRef,gridColumnGroupsHeaderMaxDepthSelector),rootContainerRef=react.useRef(null),handleRef=(0,useForkRef.Z)(rootContainerRef,ref),pinnedRowsCount=useGridSelector(apiRef,gridPinnedRowsCountSelector),ownerState=(0,esm_extends.Z)({},rootProps,{density:densityValue}),classes=(ownerState=>{const{autoHeight,density,classes}=ownerState,slots={root:["root",autoHeight&&"autoHeight",`root--density${(0,capitalize.Z)(density)}`,"withBorderColor"]};return(0,composeClasses.Z)(slots,getDataGridUtilityClass,classes)})(ownerState);apiRef.current.register("public",{rootElementRef:rootContainerRef});const[mountedState,setMountedState]=react.useState(!1);return(0,useEnhancedEffect.Z)((()=>{setMountedState(!0)}),[]),mountedState?(0,jsx_runtime.jsx)(GridRootStyles,(0,esm_extends.Z)({ref:handleRef,className:(0,clsx_m.Z)(className,classes.root),ownerState,role:"grid","aria-colcount":visibleColumns.length,"aria-rowcount":headerGroupingMaxDepth+1+pinnedRowsCount+totalRowCount,"aria-multiselectable":!rootProps.disableMultipleRowSelection},other,{children})):null}));function GridHeader(){var _rootProps$slotProps,_rootProps$slotProps2;const rootProps=useGridRootProps();return(0,jsx_runtime.jsxs)(react.Fragment,{children:[(0,jsx_runtime.jsx)(rootProps.slots.preferencesPanel,(0,esm_extends.Z)({},null==(_rootProps$slotProps=rootProps.slotProps)?void 0:_rootProps$slotProps.preferencesPanel)),rootProps.slots.toolbar&&(0,jsx_runtime.jsx)(rootProps.slots.toolbar,(0,esm_extends.Z)({},null==(_rootProps$slotProps2=rootProps.slotProps)?void 0:_rootProps$slotProps2.toolbar))]})}var esm_styled=__webpack_require__("./node_modules/@mui/system/esm/styled.js");const GridMainContainerRoot=(0,esm_styled.Z)("div",{name:"MuiDataGrid",slot:"Main",overridesResolver:(props,styles)=>styles.main})((()=>({position:"relative",flexGrow:1,display:"flex",flexDirection:"column",overflow:"hidden"}))),GridMainContainer=react.forwardRef(((props,ref)=>{const rootProps=useGridRootProps(),classes=(ownerState=>{const{classes}=ownerState;return(0,composeClasses.Z)({root:["main"]},getDataGridUtilityClass,classes)})(rootProps);return(0,jsx_runtime.jsx)(GridMainContainerRoot,{ref,className:classes.root,ownerState:rootProps,children:props.children})})),gridSortingStateSelector=state=>state.sorting,gridSortedRowIdsSelector=createSelector(gridSortingStateSelector,(sortingState=>sortingState.sortedRows)),gridSortedRowEntriesSelector=createSelector(gridSortedRowIdsSelector,gridRowsLookupSelector,((sortedIds,idRowsLookup)=>sortedIds.map((id=>{var _idRowsLookup$id;return{id,model:null!=(_idRowsLookup$id=idRowsLookup[id])?_idRowsLookup$id:{}}})))),gridSortModelSelector=createSelector(gridSortingStateSelector,(sorting=>sorting.sortModel)),gridSortColumnLookupSelector=createSelector(gridSortModelSelector,(sortModel=>sortModel.reduce(((res,sortItem,index)=>(res[sortItem.field]={sortDirection:sortItem.sort,sortIndex:sortModel.length>1?index+1:void 0},res)),{}))),gridFilterStateSelector=state=>state.filter,gridFilterModelSelector=createSelector(gridFilterStateSelector,(filterState=>filterState.filterModel)),gridFilteredRowsLookupSelector=(createSelector(gridFilterModelSelector,(filterModel=>filterModel.quickFilterValues)),createSelector(gridFilterStateSelector,(filterState=>filterState.filteredRowsLookup))),gridFilteredDescendantCountLookupSelector=createSelector(gridFilterStateSelector,(filterState=>filterState.filteredDescendantCountLookup)),gridExpandedSortedRowEntriesSelector=createSelector((state=>state.visibleRowsLookup),gridSortedRowEntriesSelector,((visibleRowsLookup,sortedRows)=>sortedRows.filter((row=>!1!==visibleRowsLookup[row.id])))),gridExpandedSortedRowIdsSelector=createSelector(gridExpandedSortedRowEntriesSelector,(visibleSortedRowEntries=>visibleSortedRowEntries.map((row=>row.id)))),gridFilteredSortedRowEntriesSelector=createSelector(gridFilteredRowsLookupSelector,gridSortedRowEntriesSelector,((filteredRowsLookup,sortedRows)=>sortedRows.filter((row=>!1!==filteredRowsLookup[row.id])))),gridFilteredSortedRowIdsSelector=createSelector(gridFilteredSortedRowEntriesSelector,(filteredSortedRowEntries=>filteredSortedRowEntries.map((row=>row.id)))),gridFilteredSortedTopLevelRowEntriesSelector=createSelector(gridExpandedSortedRowEntriesSelector,gridRowTreeSelector,gridRowMaximumTreeDepthSelector,((visibleSortedRows,rowTree,rowTreeDepth)=>rowTreeDepth<2?visibleSortedRows:visibleSortedRows.filter((row=>{var _rowTree$row$id;return 0===(null==(_rowTree$row$id=rowTree[row.id])?void 0:_rowTree$row$id.depth)})))),gridExpandedRowCountSelector=createSelector(gridExpandedSortedRowEntriesSelector,(visibleSortedRows=>visibleSortedRows.length)),gridFilteredTopLevelRowCountSelector=createSelector(gridFilteredSortedTopLevelRowEntriesSelector,(visibleSortedTopLevelRows=>visibleSortedTopLevelRows.length)),gridFilterActiveItemsSelector=createSelector(gridFilterModelSelector,gridColumnLookupSelector,((filterModel,columnLookup)=>{var _filterModel$items;return null==(_filterModel$items=filterModel.items)?void 0:_filterModel$items.filter((item=>{var _column$filterOperato,_item$value;if(!item.field)return!1;const column=columnLookup[item.field];if(null==column||!column.filterOperators||0===(null==column||null==(_column$filterOperato=column.filterOperators)?void 0:_column$filterOperato.length))return!1;const filterOperator=column.filterOperators.find((operator=>operator.value===item.operator));return!!filterOperator&&(!filterOperator.InputComponent||null!=item.value&&""!==(null==(_item$value=item.value)?void 0:_item$value.toString()))}))})),gridFilterActiveItemsLookupSelector=createSelector(gridFilterActiveItemsSelector,(activeFilters=>activeFilters.reduce(((res,filterItem)=>(res[filterItem.field]?res[filterItem.field].push(filterItem):res[filterItem.field]=[filterItem],res)),{}))),gridFocusStateSelector=state=>state.focus,gridFocusCellSelector=createSelector(gridFocusStateSelector,(focusState=>focusState.cell)),gridFocusColumnHeaderSelector=createSelector(gridFocusStateSelector,(focusState=>focusState.columnHeader)),unstable_gridFocusColumnHeaderFilterSelector=createSelector(gridFocusStateSelector,(focusState=>focusState.columnHeaderFilter)),unstable_gridFocusColumnGroupHeaderSelector=createSelector(gridFocusStateSelector,(focusState=>focusState.columnGroupHeader)),gridTabIndexStateSelector=state=>state.tabIndex,gridTabIndexCellSelector=createSelector(gridTabIndexStateSelector,(state=>state.cell)),gridTabIndexColumnHeaderSelector=createSelector(gridTabIndexStateSelector,(state=>state.columnHeader)),unstable_gridTabIndexColumnHeaderFilterSelector=createSelector(gridTabIndexStateSelector,(state=>state.columnHeaderFilter)),unstable_gridTabIndexColumnGroupHeaderSelector=createSelector(gridTabIndexStateSelector,(state=>state.columnGroupHeader)),gridColumnMenuSelector=state=>state.columnMenu;function GridBody(props){const{VirtualScrollerComponent,ColumnHeadersProps,children}=props,apiRef=useGridPrivateApiContext(),rootProps=useGridRootProps(),rootRef=react.useRef(null),visibleColumns=useGridSelector(apiRef,gridVisibleColumnDefinitionsSelector),filterColumnLookup=useGridSelector(apiRef,gridFilterActiveItemsLookupSelector),sortColumnLookup=useGridSelector(apiRef,gridSortColumnLookupSelector),columnPositions=useGridSelector(apiRef,gridColumnPositionsSelector),columnHeaderTabIndexState=useGridSelector(apiRef,gridTabIndexColumnHeaderSelector),cellTabIndexState=useGridSelector(apiRef,gridTabIndexCellSelector),columnGroupHeaderTabIndexState=useGridSelector(apiRef,unstable_gridTabIndexColumnGroupHeaderSelector),columnHeaderFocus=useGridSelector(apiRef,gridFocusColumnHeaderSelector),columnGroupHeaderFocus=useGridSelector(apiRef,unstable_gridFocusColumnGroupHeaderSelector),densityFactor=useGridSelector(apiRef,gridDensityFactorSelector),headerGroupingMaxDepth=useGridSelector(apiRef,gridColumnGroupsHeaderMaxDepthSelector),columnMenuState=useGridSelector(apiRef,gridColumnMenuSelector),columnVisibility=useGridSelector(apiRef,gridColumnVisibilityModelSelector),columnGroupsHeaderStructure=useGridSelector(apiRef,gridColumnGroupsHeaderStructureSelector),hasOtherElementInTabSequence=!(null===columnGroupHeaderTabIndexState&&null===columnHeaderTabIndexState&&null===cellTabIndexState),[isVirtualizationDisabled,setIsVirtualizationDisabled]=react.useState(rootProps.disableVirtualization);(0,useEnhancedEffect.Z)((()=>{apiRef.current.computeSizeAndPublishResizeEvent();const elementToObserve=rootRef.current;if("undefined"==typeof ResizeObserver)return()=>{};let animationFrame;const observer=new ResizeObserver((()=>{animationFrame=window.requestAnimationFrame((()=>{apiRef.current.computeSizeAndPublishResizeEvent()}))}));return elementToObserve&&observer.observe(elementToObserve),()=>{animationFrame&&window.cancelAnimationFrame(animationFrame),elementToObserve&&observer.unobserve(elementToObserve)}}),[apiRef]);const disableVirtualization=react.useCallback((()=>{setIsVirtualizationDisabled(!0)}),[]),enableVirtualization=react.useCallback((()=>{setIsVirtualizationDisabled(!1)}),[]);react.useEffect((()=>{setIsVirtualizationDisabled(rootProps.disableVirtualization)}),[rootProps.disableVirtualization]),apiRef.current.unstable_disableVirtualization=disableVirtualization,apiRef.current.unstable_enableVirtualization=enableVirtualization;const columnHeadersRef=react.useRef(null),columnsContainerRef=react.useRef(null),virtualScrollerRef=react.useRef(null);apiRef.current.register("private",{columnHeadersContainerElementRef:columnsContainerRef,columnHeadersElementRef:columnHeadersRef,virtualScrollerRef,mainElementRef:rootRef});const hasDimensions=!!apiRef.current.getRootDimensions();return(0,jsx_runtime.jsxs)(GridMainContainer,{ref:rootRef,children:[(0,jsx_runtime.jsx)(rootProps.slots.columnHeaders,(0,esm_extends.Z)({ref:columnsContainerRef,innerRef:columnHeadersRef,visibleColumns,filterColumnLookup,sortColumnLookup,columnPositions,columnHeaderTabIndexState,columnGroupHeaderTabIndexState,columnHeaderFocus,columnGroupHeaderFocus,densityFactor,headerGroupingMaxDepth,columnMenuState,columnVisibility,columnGroupsHeaderStructure,hasOtherElementInTabSequence},ColumnHeadersProps)),hasDimensions&&(0,jsx_runtime.jsx)(VirtualScrollerComponent,{ref:virtualScrollerRef,disableVirtualization:isVirtualizationDisabled}),children]})}function GridFooterPlaceholder(){var _rootProps$slotProps;const rootProps=useGridRootProps();return rootProps.hideFooter?null:(0,jsx_runtime.jsx)(rootProps.slots.footer,(0,esm_extends.Z)({},null==(_rootProps$slotProps=rootProps.slotProps)?void 0:_rootProps$slotProps.footer))}function isFunction(value){return"function"==typeof value}function isObject(value){return"object"==typeof value&&null!==value}function escapeRegExp(value){return value.replace(/[-[\]{}()*+?.,\\^$|#\s]/g,"\\$&")}const clamp=(value,min,max)=>Math.max(min,Math.min(max,value));function isDeepEqual(a,b){if(a===b)return!0;if(a&&b&&"object"==typeof a&&"object"==typeof b){if(a.constructor!==b.constructor)return!1;if(Array.isArray(a)){const length=a.length;if(length!==b.length)return!1;for(let i=0;i<length;i+=1)if(!isDeepEqual(a[i],b[i]))return!1;return!0}if(a instanceof Map&&b instanceof Map){if(a.size!==b.size)return!1;const entriesA=Array.from(a.entries());for(let i=0;i<entriesA.length;i+=1)if(!b.has(entriesA[i][0]))return!1;for(let i=0;i<entriesA.length;i+=1){const entryA=entriesA[i];if(!isDeepEqual(entryA[1],b.get(entryA[0])))return!1}return!0}if(a instanceof Set&&b instanceof Set){if(a.size!==b.size)return!1;const entries=Array.from(a.entries());for(let i=0;i<entries.length;i+=1)if(!b.has(entries[i][0]))return!1;return!0}if(ArrayBuffer.isView(a)&&ArrayBuffer.isView(b)){const length=a.length;if(length!==b.length)return!1;for(let i=0;i<length;i+=1)if(a[i]!==b[i])return!1;return!0}if(a.constructor===RegExp)return a.source===b.source&&a.flags===b.flags;if(a.valueOf!==Object.prototype.valueOf)return a.valueOf()===b.valueOf();if(a.toString!==Object.prototype.toString)return a.toString()===b.toString();const keys=Object.keys(a),length=keys.length;if(length!==Object.keys(b).length)return!1;for(let i=0;i<length;i+=1)if(!Object.prototype.hasOwnProperty.call(b,keys[i]))return!1;for(let i=0;i<length;i+=1){const key=keys[i];if(!isDeepEqual(a[key],b[key]))return!1}return!0}return a!=a&&b!=b}function randomNumberBetween(seed,min,max){const random=function mulberry32(a){return()=>{let t=a+=1831565813;return t=Math.imul(t^t>>>15,1|t),t^=t+Math.imul(t^t>>>7,61|t),((t^t>>>14)>>>0)/4294967296}}(seed);return()=>min+(max-min)*random()}function deepClone(obj){return"function"==typeof structuredClone?structuredClone(obj):JSON.parse(JSON.stringify(obj))}function useGridApiMethod(privateApiRef,apiMethods,visibility){const apiMethodsRef=react.useRef(apiMethods),[apiMethodsNames]=react.useState(Object.keys(apiMethods)),installMethods=react.useCallback((()=>{privateApiRef.current&&apiMethodsNames.forEach((methodName=>{privateApiRef.current.hasOwnProperty(methodName)||privateApiRef.current.register(visibility,{[methodName]:(...args)=>(0,apiMethodsRef.current[methodName])(...args)})}))}),[apiMethodsNames,privateApiRef,visibility]);react.useEffect((()=>{apiMethodsRef.current=apiMethods}),[apiMethods]),react.useEffect((()=>{installMethods()}),[installMethods]),installMethods()}var useGridLoggerFactory_console=__webpack_require__("./node_modules/console-browserify/index.js");const forceDebug=function localStorageAvailable(){try{const key="__some_random_key_you_are_not_going_to_use__";return window.localStorage.setItem(key,key),window.localStorage.removeItem(key),!0}catch(err){return!1}}()&&null!=window.localStorage.getItem("DEBUG"),noop=()=>{},noopLogger={debug:noop,info:noop,warn:noop,error:noop},LOG_LEVELS=["debug","info","warn","error"];function getAppender(name,logLevel,appender=useGridLoggerFactory_console){const minLogLevelIdx=LOG_LEVELS.indexOf(logLevel);if(-1===minLogLevelIdx)throw new Error(`MUI: Log level ${logLevel} not recognized.`);return LOG_LEVELS.reduce(((loggerObj,method,idx)=>(loggerObj[method]=idx>=minLogLevelIdx?(...args)=>{const[message,...other]=args;appender[method](`MUI: ${name} - ${message}`,...other)}:noop,loggerObj)),{})}class TimerBasedCleanupTracking{constructor(timeout=1e3){this.timeouts=new Map,this.cleanupTimeout=1e3,this.cleanupTimeout=timeout}register(object,unsubscribe,unregisterToken){this.timeouts||(this.timeouts=new Map);const timeout=setTimeout((()=>{"function"==typeof unsubscribe&&unsubscribe(),this.timeouts.delete(unregisterToken.cleanupToken)}),this.cleanupTimeout);this.timeouts.set(unregisterToken.cleanupToken,timeout)}unregister(unregisterToken){const timeout=this.timeouts.get(unregisterToken.cleanupToken);timeout&&(this.timeouts.delete(unregisterToken.cleanupToken),clearTimeout(timeout))}reset(){this.timeouts&&(this.timeouts.forEach(((value,key)=>{this.unregister({cleanupToken:key})})),this.timeouts=void 0)}}class FinalizationRegistryBasedCleanupTracking{constructor(){this.registry=new FinalizationRegistry((unsubscribe=>{"function"==typeof unsubscribe&&unsubscribe()}))}register(object,unsubscribe,unregisterToken){this.registry.register(object,unsubscribe,unregisterToken)}unregister(unregisterToken){this.registry.unregister(unregisterToken)}reset(){}}var GridSignature=function(GridSignature){return GridSignature.DataGrid="DataGrid",GridSignature.DataGridPro="DataGridPro",GridSignature}(GridSignature||{});class ObjectToBeRetainedByReact{}const registryContainer={registry:null},useGridApiEventHandler=function createUseGridApiEventHandler(registryContainer){let cleanupTokensCounter=0;return function useGridApiEventHandler(apiRef,eventName,handler,options){null===registryContainer.registry&&(registryContainer.registry="undefined"!=typeof FinalizationRegistry?new FinalizationRegistryBasedCleanupTracking:new TimerBasedCleanupTracking);const[objectRetainedByReact]=react.useState(new ObjectToBeRetainedByReact),subscription=react.useRef(null),handlerRef=react.useRef();handlerRef.current=handler;const cleanupTokenRef=react.useRef(null);if(!subscription.current&&handlerRef.current){const enhancedHandler=(params,event,details)=>{var _handlerRef$current;event.defaultMuiPrevented||(null==(_handlerRef$current=handlerRef.current)||_handlerRef$current.call(handlerRef,params,event,details))};subscription.current=apiRef.current.subscribeEvent(eventName,enhancedHandler,options),cleanupTokensCounter+=1,cleanupTokenRef.current={cleanupToken:cleanupTokensCounter},registryContainer.registry.register(objectRetainedByReact,(()=>{var _subscription$current;null==(_subscription$current=subscription.current)||_subscription$current.call(subscription),subscription.current=null,cleanupTokenRef.current=null}),cleanupTokenRef.current)}else!handlerRef.current&&subscription.current&&(subscription.current(),subscription.current=null,cleanupTokenRef.current&&(registryContainer.registry.unregister(cleanupTokenRef.current),cleanupTokenRef.current=null));react.useEffect((()=>{if(!subscription.current&&handlerRef.current){const enhancedHandler=(params,event,details)=>{var _handlerRef$current2;event.defaultMuiPrevented||(null==(_handlerRef$current2=handlerRef.current)||_handlerRef$current2.call(handlerRef,params,event,details))};subscription.current=apiRef.current.subscribeEvent(eventName,enhancedHandler,options)}return cleanupTokenRef.current&&registryContainer.registry&&(registryContainer.registry.unregister(cleanupTokenRef.current),cleanupTokenRef.current=null),()=>{var _subscription$current2;null==(_subscription$current2=subscription.current)||_subscription$current2.call(subscription),subscription.current=null}}),[apiRef,eventName,options])}}(registryContainer),optionsSubscriberOptions={isFirst:!0};function useGridApiOptionHandler(apiRef,eventName,handler){useGridApiEventHandler(apiRef,eventName,handler,optionsSubscriberOptions)}class EventManager{constructor(){this.maxListeners=20,this.warnOnce=!1,this.events={}}on(eventName,listener,options={}){let collection=this.events[eventName];collection||(collection={highPriority:new Map,regular:new Map},this.events[eventName]=collection),options.isFirst?collection.highPriority.set(listener,!0):collection.regular.set(listener,!0)}removeListener(eventName,listener){this.events[eventName]&&(this.events[eventName].regular.delete(listener),this.events[eventName].highPriority.delete(listener))}removeAllListeners(){this.events={}}emit(eventName,...args){const collection=this.events[eventName];if(!collection)return;const highPriorityListeners=Array.from(collection.highPriority.keys()),regularListeners=Array.from(collection.regular.keys());for(let i=highPriorityListeners.length-1;i>=0;i-=1){const listener=highPriorityListeners[i];collection.highPriority.has(listener)&&listener.apply(this,args)}for(let i=0;i<regularListeners.length;i+=1){const listener=regularListeners[i];collection.regular.has(listener)&&listener.apply(this,args)}}once(eventName,listener){const that=this;this.on(eventName,(function oneTimeListener(...args){that.removeListener(eventName,oneTimeListener),listener.apply(that,args)}))}}let globalId=0;function useGridApiInitialization(inputApiRef,props){const publicApiRef=react.useRef();publicApiRef.current||(publicApiRef.current={state:{},instanceId:{id:globalId}},globalId+=1);const privateApiRef=react.useRef();privateApiRef.current||(privateApiRef.current=(publicApi=>{const privateOnlyApi={getPublicApi:()=>publicApi,register:(visibility,methods)=>{Object.keys(methods).forEach((methodName=>{"public"===visibility?publicApi[methodName]=methods[methodName]:privateOnlyApi[methodName]=methods[methodName]}))}};return new Proxy(publicApi,{get:(obj,prop)=>prop in obj?obj[prop]:privateOnlyApi[prop],set:(obj,prop,value)=>(obj[prop]=value,!0)})})(publicApiRef.current),privateApiRef.current.register("private",{caches:{},eventManager:new EventManager})),react.useImperativeHandle(inputApiRef,(()=>publicApiRef.current),[publicApiRef]);const publishEvent=react.useCallback(((...args)=>{const[name,params,event={}]=args;if(event.defaultMuiPrevented=!1,(event=>void 0!==event.isPropagationStopped)(event)&&event.isPropagationStopped())return;const details=props.signature===GridSignature.DataGridPro?{api:privateApiRef.current.getPublicApi()}:{};privateApiRef.current.eventManager.emit(name,params,event,details)}),[privateApiRef,props.signature]),subscribeEvent=react.useCallback(((event,handler,options)=>{privateApiRef.current.eventManager.on(event,handler,options);const api=privateApiRef.current;return()=>{api.eventManager.removeListener(event,handler)}}),[privateApiRef]);return useGridApiMethod(privateApiRef,{subscribeEvent,publishEvent},"public"),react.useEffect((()=>{const api=privateApiRef.current;return()=>{api.publishEvent("unmount")}}),[privateApiRef]),privateApiRef}var toPropertyKey=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/toPropertyKey.js");const GRID_STRATEGIES_PROCESSORS={rowTreeCreation:"rowTree",filtering:"rowTree",sorting:"rowTree",visibleRowsLookupCreation:"rowTree"},useGridStateInitialization_excluded=["stateId"],useGridInitialization=(inputApiRef,props)=>{const privateApiRef=useGridApiInitialization(inputApiRef,props);return((apiRef,props)=>{useGridApiMethod(apiRef,{getLogger:react.useCallback((name=>forceDebug?getAppender(name,"debug",props.logger):props.logLevel?getAppender(name,props.logLevel.toString(),props.logger):noopLogger),[props.logLevel,props.logger])},"private")})(privateApiRef,props),((apiRef,props)=>{const controlStateMapRef=react.useRef({}),[,rawForceUpdate]=react.useState(),registerControlState=react.useCallback((controlStateItem=>{const{stateId}=controlStateItem,others=(0,objectWithoutPropertiesLoose.Z)(controlStateItem,useGridStateInitialization_excluded);controlStateMapRef.current[stateId]=(0,esm_extends.Z)({},others,{stateId})}),[]),setState=react.useCallback(((state,reason)=>{let newState;if(newState=isFunction(state)?state(apiRef.current.state):state,apiRef.current.state===newState)return!1;let ignoreSetState=!1;const updatedControlStateIds=[];if(Object.keys(controlStateMapRef.current).forEach((stateId=>{const controlState=controlStateMapRef.current[stateId],oldSubState=controlState.stateSelector(apiRef.current.state,apiRef.current.instanceId),newSubState=controlState.stateSelector(newState,apiRef.current.instanceId);newSubState!==oldSubState&&(updatedControlStateIds.push({stateId:controlState.stateId,hasPropChanged:newSubState!==controlState.propModel}),void 0!==controlState.propModel&&newSubState!==controlState.propModel&&(ignoreSetState=!0))})),updatedControlStateIds.length>1)throw new Error(`You're not allowed to update several sub-state in one transaction. You already updated ${updatedControlStateIds[0].stateId}, therefore, you're not allowed to update ${updatedControlStateIds.map((el=>el.stateId)).join(", ")} in the same transaction.`);if(ignoreSetState||(apiRef.current.state=newState,apiRef.current.publishEvent&&apiRef.current.publishEvent("stateChange",newState)),1===updatedControlStateIds.length){const{stateId,hasPropChanged}=updatedControlStateIds[0],controlState=controlStateMapRef.current[stateId],model=controlState.stateSelector(newState,apiRef.current.instanceId);if(controlState.propOnChange&&hasPropChanged){const details=props.signature===GridSignature.DataGridPro?{api:apiRef.current,reason}:{reason};controlState.propOnChange(model,details)}ignoreSetState||apiRef.current.publishEvent(controlState.changeEvent,model,{reason})}return!ignoreSetState}),[apiRef,props.signature]),updateControlState=react.useCallback(((key,state,reason)=>apiRef.current.setState((previousState=>(0,esm_extends.Z)({},previousState,{[key]:state(previousState[key])})),reason)),[apiRef]),forceUpdate=react.useCallback((()=>rawForceUpdate((()=>apiRef.current.state))),[apiRef]),privateStateApi={updateControlState,registerControlState};useGridApiMethod(apiRef,{setState,forceUpdate},"public"),useGridApiMethod(apiRef,privateStateApi,"private")})(privateApiRef,props),(apiRef=>{const processorsCache=react.useRef({}),runAppliers=react.useCallback((groupCache=>{groupCache&&Object.values(groupCache.appliers).forEach((callback=>{callback()}))}),[]),registerPipeProcessor=react.useCallback(((group,id,processor)=>{processorsCache.current[group]||(processorsCache.current[group]={processors:new Map,appliers:{}});const groupCache=processorsCache.current[group];return groupCache.processors.get(id)!==processor&&(groupCache.processors.set(id,processor),runAppliers(groupCache)),()=>{processorsCache.current[group].processors.set(id,null)}}),[runAppliers]),registerPipeApplier=react.useCallback(((group,id,applier)=>(processorsCache.current[group]||(processorsCache.current[group]={processors:new Map,appliers:{}}),processorsCache.current[group].appliers[id]=applier,()=>{const _appliers=processorsCache.current[group].appliers,otherAppliers=(0,objectWithoutPropertiesLoose.Z)(_appliers,[id].map(toPropertyKey.Z));processorsCache.current[group].appliers=otherAppliers})),[]),requestPipeProcessorsApplication=react.useCallback((group=>{const groupCache=processorsCache.current[group];runAppliers(groupCache)}),[runAppliers]),preProcessingPublicApi={unstable_applyPipeProcessors:react.useCallback(((...args)=>{const[group,value,context]=args;return processorsCache.current[group]?Array.from(processorsCache.current[group].processors.values()).reduce(((acc,preProcessor)=>preProcessor?preProcessor(acc,context):acc),value):value}),[])};useGridApiMethod(apiRef,{registerPipeProcessor,registerPipeApplier,requestPipeProcessorsApplication},"private"),useGridApiMethod(apiRef,preProcessingPublicApi,"public")})(privateApiRef),(apiRef=>{const availableStrategies=react.useRef(new Map),strategiesCache=react.useRef({}),registerStrategyProcessor=react.useCallback(((strategyName,processorName,processor)=>{const cleanup=()=>{const _ref=strategiesCache.current[processorName],otherProcessors=(0,objectWithoutPropertiesLoose.Z)(_ref,[strategyName].map(toPropertyKey.Z));strategiesCache.current[processorName]=otherProcessors};strategiesCache.current[processorName]||(strategiesCache.current[processorName]={});const groupPreProcessors=strategiesCache.current[processorName],previousProcessor=groupPreProcessors[strategyName];return groupPreProcessors[strategyName]=processor,previousProcessor&&previousProcessor!==processor?(strategyName===apiRef.current.getActiveStrategy(GRID_STRATEGIES_PROCESSORS[processorName])&&apiRef.current.publishEvent("activeStrategyProcessorChange",processorName),cleanup):cleanup}),[apiRef]),applyStrategyProcessor=react.useCallback(((processorName,params)=>{const activeStrategy=apiRef.current.getActiveStrategy(GRID_STRATEGIES_PROCESSORS[processorName]);if(null==activeStrategy)throw new Error("Can't apply a strategy processor before defining an active strategy");const groupCache=strategiesCache.current[processorName];if(!groupCache||!groupCache[activeStrategy])throw new Error(`No processor found for processor "${processorName}" on strategy "${activeStrategy}"`);return(0,groupCache[activeStrategy])(params)}),[apiRef]),getActiveStrategy=react.useCallback((strategyGroup=>{var _availableStrategyEnt;const availableStrategyEntry=Array.from(availableStrategies.current.entries()).find((([,strategy])=>strategy.group===strategyGroup&&strategy.isAvailable()));return null!=(_availableStrategyEnt=null==availableStrategyEntry?void 0:availableStrategyEntry[0])?_availableStrategyEnt:"none"}),[]),setStrategyAvailability=react.useCallback(((strategyGroup,strategyName,isAvailable)=>{availableStrategies.current.set(strategyName,{group:strategyGroup,isAvailable}),apiRef.current.publishEvent("strategyAvailabilityChange")}),[apiRef]);useGridApiMethod(apiRef,{registerStrategyProcessor,applyStrategyProcessor,getActiveStrategy,setStrategyAvailability},"private")})(privateApiRef),((apiRef,props)=>{const getLocaleText=react.useCallback((key=>{if(null==props.localeText[key])throw new Error(`Missing translation for key ${key}.`);return props.localeText[key]}),[props.localeText]);apiRef.current.register("public",{getLocaleText})})(privateApiRef,props),privateApiRef},useFirstRender=callback=>{const isFirstRender=react.useRef(!0);isFirstRender.current&&(isFirstRender.current=!1,callback())},useGridRegisterPipeProcessor=(apiRef,group,callback)=>{const cleanup=react.useRef(),id=react.useRef(`mui-${Math.round(1e9*Math.random())}`),registerPreProcessor=react.useCallback((()=>{cleanup.current=apiRef.current.registerPipeProcessor(group,id.current,callback)}),[apiRef,callback,group]);useFirstRender((()=>{registerPreProcessor()}));const isFirstRender=react.useRef(!0);react.useEffect((()=>(isFirstRender.current?isFirstRender.current=!1:registerPreProcessor(),()=>{cleanup.current&&(cleanup.current(),cleanup.current=null)})),[registerPreProcessor])},isEscapeKey=key=>"Escape"===key,isEnterKey=key=>"Enter"===key,isTabKey=key=>"Tab"===key,isSpaceKey=key=>" "===key;function isPrintableKey(event){return 1===event.key.length&&!1===event.ctrlKey&&!1===event.metaKey}const isNavigationKey=key=>(key=>"Home"===key||"End"===key)(key)||(key=>0===key.indexOf("Arrow"))(key)||(key=>0===key.indexOf("Page"))(key)||isSpaceKey(key);function useGridApiContext_useGridApiContext(){const apiRef=react.useContext(GridApiContext);if(void 0===apiRef)throw new Error(["MUI: Could not find the data grid context.","It looks like you rendered your component outside of a DataGrid, DataGridPro or DataGridPremium parent component.","This can also happen if you are bundling multiple versions of the data grid."].join("\n"));return apiRef}const GridCellCheckboxRenderer_excluded=["field","id","value","formattedValue","row","rowNode","colDef","isEditable","cellMode","hasFocus","tabIndex","api"],GridCellCheckboxRenderer=react.forwardRef((function GridCellCheckboxRenderer(props,ref){var _rootProps$slotProps;const{field,id,value:isChecked,rowNode,hasFocus,tabIndex}=props,other=(0,objectWithoutPropertiesLoose.Z)(props,GridCellCheckboxRenderer_excluded),apiRef=useGridApiContext_useGridApiContext(),rootProps=useGridRootProps(),classes=(ownerState=>{const{classes}=ownerState;return(0,composeClasses.Z)({root:["checkboxInput"]},getDataGridUtilityClass,classes)})({classes:rootProps.classes}),checkboxElement=react.useRef(null),rippleRef=react.useRef(null),handleRef=(0,useForkRef.Z)(checkboxElement,ref),element=apiRef.current.getCellElement(id,field);react.useLayoutEffect((()=>{0===tabIndex&&element&&(element.tabIndex=-1)}),[element,tabIndex]),react.useEffect((()=>{if(hasFocus){var _checkboxElement$curr;const input=null==(_checkboxElement$curr=checkboxElement.current)?void 0:_checkboxElement$curr.querySelector("input");null==input||input.focus({preventScroll:!0})}else rippleRef.current&&rippleRef.current.stop({})}),[hasFocus]);const handleKeyDown=react.useCallback((event=>{isSpaceKey(event.key)&&event.stopPropagation()}),[]);if("footer"===rowNode.type||"pinnedRow"===rowNode.type)return null;const isSelectable=apiRef.current.isRowSelectable(id),label=apiRef.current.getLocaleText(isChecked?"checkboxSelectionUnselectRow":"checkboxSelectionSelectRow");return(0,jsx_runtime.jsx)(rootProps.slots.baseCheckbox,(0,esm_extends.Z)({ref:handleRef,tabIndex,checked:isChecked,onChange:event=>{const params={value:event.target.checked,id};apiRef.current.publishEvent("rowSelectionCheckboxChange",params,event)},className:classes.root,inputProps:{"aria-label":label},onKeyDown:handleKeyDown,disabled:!isSelectable,touchRippleRef:rippleRef},null==(_rootProps$slotProps=rootProps.slotProps)?void 0:_rootProps$slotProps.baseCheckbox,other))})),gridRowSelectionStateSelector=state=>state.rowSelection,selectedGridRowsCountSelector=createSelector(gridRowSelectionStateSelector,(selection=>selection.length)),selectedGridRowsSelector=createSelector(gridRowSelectionStateSelector,gridRowsLookupSelector,((selectedRows,rowsLookup)=>new Map(selectedRows.map((id=>[id,rowsLookup[id]]))))),selectedIdsLookupSelector=createSelector(gridRowSelectionStateSelector,(selection=>selection.reduce(((lookup,rowId)=>(lookup[rowId]=rowId,lookup)),{}))),getPageCount=(rowCount,pageSize)=>pageSize>0&&rowCount>0?Math.ceil(rowCount/pageSize):0,getDefaultGridPaginationModel=(buildWarning(["MUI: the 'rowCount' prop is undefined while using paginationMode='server'","For more detail, see http://mui.com/components/data-grid/pagination/#basic-implementation"],"error"),autoPageSize=>({page:0,pageSize:autoPageSize?0:100})),throwIfPageSizeExceedsTheLimit=(pageSize,signatureProp)=>{if(signatureProp===GridSignature.DataGrid&&pageSize>100)throw new Error(["MUI: `pageSize` cannot exceed 100 in the MIT version of the DataGrid.","You need to upgrade to DataGridPro or DataGridPremium component to unlock this feature."].join("\n"))},gridPaginationSelector=state=>state.pagination,gridPaginationModelSelector=createSelector(gridPaginationSelector,(pagination=>pagination.paginationModel)),gridPageSelector=createSelector(gridPaginationModelSelector,(paginationModel=>paginationModel.page)),gridPageSizeSelector=createSelector(gridPaginationModelSelector,(paginationModel=>paginationModel.pageSize)),gridPaginationRowRangeSelector=(createSelector(gridPaginationModelSelector,gridFilteredTopLevelRowCountSelector,((paginationModel,visibleTopLevelRowCount)=>getPageCount(visibleTopLevelRowCount,paginationModel.pageSize))),createSelector(gridPaginationModelSelector,gridRowTreeSelector,gridRowMaximumTreeDepthSelector,gridExpandedSortedRowEntriesSelector,gridFilteredSortedTopLevelRowEntriesSelector,((paginationModel,rowTree,rowTreeDepth,visibleSortedRowEntries,visibleSortedTopLevelRowEntries)=>{const visibleTopLevelRowCount=visibleSortedTopLevelRowEntries.length,topLevelFirstRowIndex=Math.min(paginationModel.pageSize*paginationModel.page,visibleTopLevelRowCount-1),topLevelLastRowIndex=Math.min(topLevelFirstRowIndex+paginationModel.pageSize-1,visibleTopLevelRowCount-1);if(-1===topLevelFirstRowIndex||-1===topLevelLastRowIndex)return null;if(rowTreeDepth<2)return{firstRowIndex:topLevelFirstRowIndex,lastRowIndex:topLevelLastRowIndex};const topLevelFirstRow=visibleSortedTopLevelRowEntries[topLevelFirstRowIndex],topLevelRowsInCurrentPageCount=topLevelLastRowIndex-topLevelFirstRowIndex+1,firstRowIndex=visibleSortedRowEntries.findIndex((row=>row.id===topLevelFirstRow.id));let lastRowIndex=firstRowIndex,topLevelRowAdded=0;for(;lastRowIndex<visibleSortedRowEntries.length&&topLevelRowAdded<=topLevelRowsInCurrentPageCount;){const depth=rowTree[visibleSortedRowEntries[lastRowIndex].id].depth;(topLevelRowAdded<topLevelRowsInCurrentPageCount||depth>0)&&(lastRowIndex+=1),0===depth&&(topLevelRowAdded+=1)}return{firstRowIndex,lastRowIndex:lastRowIndex-1}}))),gridPaginatedVisibleSortedGridRowEntriesSelector=createSelector(gridExpandedSortedRowEntriesSelector,gridPaginationRowRangeSelector,((visibleSortedRowEntries,paginationRange)=>paginationRange?visibleSortedRowEntries.slice(paginationRange.firstRowIndex,paginationRange.lastRowIndex+1):[])),gridPaginatedVisibleSortedGridRowIdsSelector=createSelector(gridExpandedSortedRowIdsSelector,gridPaginationRowRangeSelector,((visibleSortedRowIds,paginationRange)=>paginationRange?visibleSortedRowIds.slice(paginationRange.firstRowIndex,paginationRange.lastRowIndex+1):[])),GridHeaderCheckbox_excluded=["field","colDef"],GridHeaderCheckbox=react.forwardRef((function GridHeaderCheckbox(props,ref){var _rootProps$slotProps;const other=(0,objectWithoutPropertiesLoose.Z)(props,GridHeaderCheckbox_excluded),[,forceUpdate]=react.useState(!1),apiRef=useGridApiContext_useGridApiContext(),rootProps=useGridRootProps(),classes=(ownerState=>{const{classes}=ownerState;return(0,composeClasses.Z)({root:["checkboxInput"]},getDataGridUtilityClass,classes)})({classes:rootProps.classes}),tabIndexState=useGridSelector(apiRef,gridTabIndexColumnHeaderSelector),selection=useGridSelector(apiRef,gridRowSelectionStateSelector),visibleRowIds=useGridSelector(apiRef,gridExpandedSortedRowIdsSelector),paginatedVisibleRowIds=useGridSelector(apiRef,gridPaginatedVisibleSortedGridRowIdsSelector),filteredSelection=react.useMemo((()=>"function"!=typeof rootProps.isRowSelectable?selection:selection.filter((id=>!!apiRef.current.getRow(id)&&rootProps.isRowSelectable(apiRef.current.getRowParams(id))))),[apiRef,rootProps.isRowSelectable,selection]),selectionCandidates=react.useMemo((()=>(rootProps.pagination&&rootProps.checkboxSelectionVisibleOnly?paginatedVisibleRowIds:visibleRowIds).reduce(((acc,id)=>(acc[id]=!0,acc)),{})),[rootProps.pagination,rootProps.checkboxSelectionVisibleOnly,paginatedVisibleRowIds,visibleRowIds]),currentSelectionSize=react.useMemo((()=>filteredSelection.filter((id=>selectionCandidates[id])).length),[filteredSelection,selectionCandidates]),isIndeterminate=currentSelectionSize>0&&currentSelectionSize<Object.keys(selectionCandidates).length,isChecked=currentSelectionSize>0,tabIndex=null!==tabIndexState&&tabIndexState.field===props.field?0:-1;react.useLayoutEffect((()=>{const element=apiRef.current.getColumnHeaderElement(props.field);0===tabIndex&&element&&(element.tabIndex=-1)}),[tabIndex,apiRef,props.field]);const handleKeyDown=react.useCallback((event=>{" "===event.key&&apiRef.current.publishEvent("headerSelectionCheckboxChange",{value:!isChecked})}),[apiRef,isChecked]),handleSelectionChange=react.useCallback((()=>{forceUpdate((p=>!p))}),[]);react.useEffect((()=>apiRef.current.subscribeEvent("rowSelectionChange",handleSelectionChange)),[apiRef,handleSelectionChange]);const label=apiRef.current.getLocaleText(isChecked?"checkboxSelectionUnselectAllRows":"checkboxSelectionSelectAllRows");return(0,jsx_runtime.jsx)(rootProps.slots.baseCheckbox,(0,esm_extends.Z)({ref,indeterminate:isIndeterminate,checked:isChecked,onChange:event=>{const params={value:event.target.checked};apiRef.current.publishEvent("headerSelectionCheckboxChange",params)},className:classes.root,inputProps:{"aria-label":label},tabIndex,onKeyDown:handleKeyDown},null==(_rootProps$slotProps=rootProps.slotProps)?void 0:_rootProps$slotProps.baseCheckbox,other))}));var InputBase=__webpack_require__("./node_modules/@mui/material/InputBase/InputBase.js");const GridEditInputCell_excluded=["id","value","formattedValue","api","field","row","rowNode","colDef","cellMode","isEditable","tabIndex","hasFocus","isValidating","debounceMs","isProcessingProps","onValueChange"],GridEditInputCellRoot=(0,styled.ZP)(InputBase.ZP,{name:"MuiDataGrid",slot:"EditInputCell",overridesResolver:(props,styles)=>styles.editInputCell})((({theme})=>(0,esm_extends.Z)({},theme.typography.body2,{padding:"1px 0","& input":{padding:"0 16px",height:"100%"}}))),GridEditInputCell=react.forwardRef(((props,ref)=>{const rootProps=useGridRootProps(),{id,value,field,colDef,hasFocus,debounceMs=200,isProcessingProps,onValueChange}=props,other=(0,objectWithoutPropertiesLoose.Z)(props,GridEditInputCell_excluded),apiRef=useGridApiContext_useGridApiContext(),inputRef=react.useRef(),[valueState,setValueState]=react.useState(value),classes=(ownerState=>{const{classes}=ownerState;return(0,composeClasses.Z)({root:["editInputCell"]},getDataGridUtilityClass,classes)})(rootProps),handleChange=react.useCallback((async event=>{const newValue=event.target.value;onValueChange&&await onValueChange(event,newValue);const column=apiRef.current.getColumn(field);let parsedValue=newValue;column.valueParser&&(parsedValue=column.valueParser(newValue,apiRef.current.getCellParams(id,field))),setValueState(parsedValue),apiRef.current.setEditCellValue({id,field,value:parsedValue,debounceMs,unstable_skipValueParser:!0},event)}),[apiRef,debounceMs,field,id,onValueChange]),meta=apiRef.current.unstable_getEditCellMeta?apiRef.current.unstable_getEditCellMeta(id,field):{};return react.useEffect((()=>{"debouncedSetEditCellValue"!==meta.changeReason&&setValueState(value)}),[meta.changeReason,value]),(0,useEnhancedEffect.Z)((()=>{hasFocus&&inputRef.current.focus()}),[hasFocus]),(0,jsx_runtime.jsx)(GridEditInputCellRoot,(0,esm_extends.Z)({ref,inputRef,className:classes.root,ownerState:rootProps,fullWidth:!0,type:"number"===colDef.type?colDef.type:"text",value:null!=valueState?valueState:"",onChange:handleChange,endAdornment:isProcessingProps?(0,jsx_runtime.jsx)(rootProps.slots.loadIcon,{fontSize:"small",color:"action"}):void 0},other))})),sortModelDisableMultiColumnsSortingWarning=buildWarning(["MUI: The `sortModel` can only contain a single item when the `disableMultipleColumnsSorting` prop is set to `true`.","If you are using the community version of the `DataGrid`, this prop is always `true`."],"error"),sanitizeSortModel=(model,disableMultipleColumnsSorting)=>disableMultipleColumnsSorting&&model.length>1?(sortModelDisableMultiColumnsSortingWarning(),[model[0]]):model,mergeStateWithSortModel=(sortModel,disableMultipleColumnsSorting)=>state=>(0,esm_extends.Z)({},state,{sorting:(0,esm_extends.Z)({},state.sorting,{sortModel:sanitizeSortModel(sortModel,disableMultipleColumnsSorting)})}),getNextGridSortDirection=(sortingOrder,current)=>{const currentIdx=sortingOrder.indexOf(current);return current&&-1!==currentIdx&&currentIdx+1!==sortingOrder.length?sortingOrder[currentIdx+1]:sortingOrder[0]},gridNillComparator=(v1,v2)=>null==v1&&null!=v2?-1:null==v2&&null!=v1?1:null==v1&&null==v2?0:null,collator=new Intl.Collator,gridNumberComparator=(value1,value2)=>{const nillResult=gridNillComparator(value1,value2);return null!==nillResult?nillResult:Number(value1)-Number(value2)},gridDateComparator=(value1,value2)=>{const nillResult=gridNillComparator(value1,value2);return null!==nillResult?nillResult:value1>value2?1:value1<value2?-1:0};var useId=__webpack_require__("./node_modules/@mui/utils/esm/useId/useId.js");const GridFilterInputValue_excluded=["item","applyValue","type","apiRef","focusElementRef","tabIndex","disabled","isFilterActive","clearButton","InputProps"];function GridFilterInputValue(props){var _item$value,_rootProps$slotProps;const{item,applyValue,type,apiRef,focusElementRef,tabIndex,disabled,clearButton,InputProps}=props,others=(0,objectWithoutPropertiesLoose.Z)(props,GridFilterInputValue_excluded),filterTimeout=react.useRef(),[filterValueState,setFilterValueState]=react.useState(null!=(_item$value=item.value)?_item$value:""),[applying,setIsApplying]=react.useState(!1),id=(0,useId.Z)(),rootProps=useGridRootProps(),onFilterChange=react.useCallback((event=>{const{value}=event.target;clearTimeout(filterTimeout.current),setFilterValueState(String(value)),setIsApplying(!0),filterTimeout.current=setTimeout((()=>{applyValue((0,esm_extends.Z)({},item,{value})),setIsApplying(!1)}),500)}),[applyValue,item]);return react.useEffect((()=>()=>{clearTimeout(filterTimeout.current)}),[]),react.useEffect((()=>{var _item$value2;const itemValue=null!=(_item$value2=item.value)?_item$value2:"";setFilterValueState(String(itemValue))}),[item.value]),(0,jsx_runtime.jsx)(rootProps.slots.baseTextField,(0,esm_extends.Z)({id,label:apiRef.current.getLocaleText("filterPanelInputLabel"),placeholder:apiRef.current.getLocaleText("filterPanelInputPlaceholder"),value:filterValueState,onChange:onFilterChange,variant:"standard",type:type||"text",InputProps:(0,esm_extends.Z)({},applying||clearButton?{endAdornment:applying?(0,jsx_runtime.jsx)(rootProps.slots.loadIcon,{fontSize:"small",color:"action"}):clearButton}:{},{disabled},InputProps,{inputProps:(0,esm_extends.Z)({tabIndex},null==InputProps?void 0:InputProps.inputProps)}),InputLabelProps:{shrink:!0},inputRef:focusElementRef},others,null==(_rootProps$slotProps=rootProps.slotProps)?void 0:_rootProps$slotProps.baseTextField))}var Autocomplete=__webpack_require__("./node_modules/@mui/material/Autocomplete/Autocomplete.js");const GridFilterInputMultipleValue_excluded=["item","applyValue","type","apiRef","focusElementRef","color","error","helperText","size","variant"];function GridFilterInputMultipleValue(props){const{item,applyValue,type,apiRef,focusElementRef,color,error,helperText,size,variant}=props,other=(0,objectWithoutPropertiesLoose.Z)(props,GridFilterInputMultipleValue_excluded),TextFieldProps={color,error,helperText,size,variant},[filterValueState,setFilterValueState]=react.useState(item.value||[]),id=(0,useId.Z)(),rootProps=useGridRootProps();react.useEffect((()=>{var _item$value;const itemValue=null!=(_item$value=item.value)?_item$value:[];setFilterValueState(itemValue.map(String))}),[item.value]);const handleChange=react.useCallback(((event,value)=>{setFilterValueState(value.map(String)),applyValue((0,esm_extends.Z)({},item,{value:[...value]}))}),[applyValue,item]);return(0,jsx_runtime.jsx)(Autocomplete.Z,(0,esm_extends.Z)({multiple:!0,freeSolo:!0,options:[],filterOptions:(options,params)=>{const{inputValue}=params;return null==inputValue||""===inputValue?[]:[inputValue]},id,value:filterValueState,onChange:handleChange,renderTags:(value,getTagProps)=>value.map(((option,index)=>(0,jsx_runtime.jsx)(rootProps.slots.baseChip,(0,esm_extends.Z)({variant:"outlined",size:"small",label:option},getTagProps({index}))))),renderInput:params=>{var _rootProps$slotProps;return(0,jsx_runtime.jsx)(rootProps.slots.baseTextField,(0,esm_extends.Z)({},params,{label:apiRef.current.getLocaleText("filterPanelInputLabel"),placeholder:apiRef.current.getLocaleText("filterPanelInputPlaceholder"),InputLabelProps:(0,esm_extends.Z)({},params.InputLabelProps,{shrink:!0}),inputRef:focusElementRef,type:type||"text"},TextFieldProps,null==(_rootProps$slotProps=rootProps.slotProps)?void 0:_rootProps$slotProps.baseTextField))}},other))}const GRID_STRING_COL_DEF={width:100,minWidth:50,maxWidth:1/0,hideable:!0,sortable:!0,resizable:!0,filterable:!0,groupable:!0,pinnable:!0,aggregable:!0,editable:!1,sortComparator:(value1,value2)=>{const nillResult=gridNillComparator(value1,value2);return null!==nillResult?nillResult:"string"==typeof value1?collator.compare(value1.toString(),value2.toString()):value1-value2},type:"string",align:"left",filterOperators:((disableTrim=!1)=>[{value:"contains",getApplyFilterFn:filterItem=>{if(!filterItem.value)return null;const filterItemValue=disableTrim?filterItem.value:filterItem.value.trim(),filterRegex=new RegExp(escapeRegExp(filterItemValue),"i");return({value})=>null!=value&&filterRegex.test(value.toString())},InputComponent:GridFilterInputValue},{value:"equals",getApplyFilterFn:filterItem=>{if(!filterItem.value)return null;const filterItemValue=disableTrim?filterItem.value:filterItem.value.trim(),collator=new Intl.Collator(void 0,{sensitivity:"base",usage:"search"});return({value})=>null!=value&&0===collator.compare(filterItemValue,value.toString())},InputComponent:GridFilterInputValue},{value:"startsWith",getApplyFilterFn:filterItem=>{if(!filterItem.value)return null;const filterItemValue=disableTrim?filterItem.value:filterItem.value.trim(),filterRegex=new RegExp(`^${escapeRegExp(filterItemValue)}.*$`,"i");return({value})=>null!=value&&filterRegex.test(value.toString())},InputComponent:GridFilterInputValue},{value:"endsWith",getApplyFilterFn:filterItem=>{if(!filterItem.value)return null;const filterItemValue=disableTrim?filterItem.value:filterItem.value.trim(),filterRegex=new RegExp(`.*${escapeRegExp(filterItemValue)}$`,"i");return({value})=>null!=value&&filterRegex.test(value.toString())},InputComponent:GridFilterInputValue},{value:"isEmpty",getApplyFilterFn:()=>({value})=>""===value||null==value,requiresFilterValue:!1},{value:"isNotEmpty",getApplyFilterFn:()=>({value})=>""!==value&&null!=value,requiresFilterValue:!1},{value:"isAnyOf",getApplyFilterFn:filterItem=>{if(!Array.isArray(filterItem.value)||0===filterItem.value.length)return null;const filterItemValue=disableTrim?filterItem.value:filterItem.value.map((val=>val.trim())),collator=new Intl.Collator(void 0,{sensitivity:"base",usage:"search"});return({value})=>null!=value&&filterItemValue.some((filterValue=>0===collator.compare(filterValue,value.toString()||"")))},InputComponent:GridFilterInputMultipleValue}])(),renderEditCell:params=>(0,jsx_runtime.jsx)(GridEditInputCell,(0,esm_extends.Z)({},params)),getApplyQuickFilterFn:value=>{if(!value)return null;const filterRegex=new RegExp(escapeRegExp(value),"i");return({formattedValue:columnValue})=>null!=columnValue&&filterRegex.test(columnValue.toString())}},GRID_ROOT_GROUP_ID="auto-generated-group-node-root",buildRootGroup=()=>({type:"group",id:GRID_ROOT_GROUP_ID,depth:-1,groupingField:null,groupingKey:null,isAutoGenerated:!0,children:[],childrenFromPath:{},childrenExpanded:!0,parent:null});const getRowIdFromRowModel=(rowModel,getRowId,detailErrorMessage)=>{const id=getRowId?getRowId(rowModel):rowModel.id;return function checkGridRowIdIsValid(id,row,detailErrorMessage="A row was provided without id in the rows prop:"){if(null==id)throw new Error(["MUI: The data grid component requires all rows to have a unique `id` property.","Alternatively, you can use the `getRowId` prop to specify a custom id for each row.",detailErrorMessage,JSON.stringify(row)].join("\n"))}(id,rowModel,detailErrorMessage),id},createRowsInternalCache=({rows,getRowId,loading,rowCount})=>{const updates={type:"full",rows:[]},dataRowIdToModelLookup={},dataRowIdToIdLookup={};for(let i=0;i<rows.length;i+=1){const model=rows[i],id=getRowIdFromRowModel(model,getRowId);dataRowIdToModelLookup[id]=model,dataRowIdToIdLookup[id]=id,updates.rows.push(id)}return{rowsBeforePartialUpdates:rows,loadingPropBeforePartialUpdates:loading,rowCountPropBeforePartialUpdates:rowCount,updates,dataRowIdToIdLookup,dataRowIdToModelLookup}},getTopLevelRowCount=({tree,rowCountProp=0})=>{const rootGroupNode=tree[GRID_ROOT_GROUP_ID];return Math.max(rowCountProp,rootGroupNode.children.length+(null==rootGroupNode.footerId?0:1))},getRowsStateFromCache=({apiRef,rowCountProp=0,loadingProp,previousTree,previousTreeDepths})=>{const cache=apiRef.current.caches.rows,{tree:unProcessedTree,treeDepths:unProcessedTreeDepths,dataRowIds:unProcessedDataRowIds,groupingName}=apiRef.current.applyStrategyProcessor("rowTreeCreation",{previousTree,previousTreeDepths,updates:cache.updates,dataRowIdToIdLookup:cache.dataRowIdToIdLookup,dataRowIdToModelLookup:cache.dataRowIdToModelLookup}),groupingParamsWithHydrateRows=apiRef.current.unstable_applyPipeProcessors("hydrateRows",{tree:unProcessedTree,treeDepths:unProcessedTreeDepths,dataRowIdToIdLookup:cache.dataRowIdToIdLookup,dataRowIds:unProcessedDataRowIds,dataRowIdToModelLookup:cache.dataRowIdToModelLookup});return apiRef.current.caches.rows.updates={type:"partial",actions:{insert:[],modify:[],remove:[]},idToActionLookup:{}},(0,esm_extends.Z)({},groupingParamsWithHydrateRows,{totalRowCount:Math.max(rowCountProp,groupingParamsWithHydrateRows.dataRowIds.length),totalTopLevelRowCount:getTopLevelRowCount({tree:groupingParamsWithHydrateRows.tree,rowCountProp}),groupingName,loading:loadingProp})},isAutoGeneratedRow=rowNode=>"skeletonRow"===rowNode.type||"footer"===rowNode.type||"group"===rowNode.type&&rowNode.isAutoGenerated||"pinnedRow"===rowNode.type&&rowNode.isAutoGenerated,getTreeNodeDescendants=(tree,parentId,skipAutoGeneratedRows)=>{const node=tree[parentId];if("group"!==node.type)return[];const validDescendants=[];for(let i=0;i<node.children.length;i+=1){const child=node.children[i];skipAutoGeneratedRows&&isAutoGeneratedRow(tree[child])||validDescendants.push(child),validDescendants.push(...getTreeNodeDescendants(tree,child,skipAutoGeneratedRows))}return skipAutoGeneratedRows||null==node.footerId||validDescendants.push(node.footerId),validDescendants};function calculatePinnedRowsHeight(apiRef){var _pinnedRows$top,_pinnedRows$bottom;const pinnedRows=gridPinnedRowsSelector(apiRef);return{top:(null==pinnedRows||null==(_pinnedRows$top=pinnedRows.top)?void 0:_pinnedRows$top.reduce(((acc,value)=>acc+=apiRef.current.unstable_getRowHeight(value.id)),0))||0,bottom:(null==pinnedRows||null==(_pinnedRows$bottom=pinnedRows.bottom)?void 0:_pinnedRows$bottom.reduce(((acc,value)=>acc+=apiRef.current.unstable_getRowHeight(value.id)),0))||0}}function getMinimalContentHeight(apiRef,rowHeight){const densityFactor=gridDensityFactorSelector(apiRef);return 2*Math.floor(rowHeight*densityFactor)}const GridBooleanCell_excluded=["id","value","formattedValue","api","field","row","rowNode","colDef","cellMode","isEditable","hasFocus","tabIndex"];function GridBooleanCellRaw(props){const{value}=props,other=(0,objectWithoutPropertiesLoose.Z)(props,GridBooleanCell_excluded),apiRef=useGridApiContext_useGridApiContext(),rootProps=useGridRootProps(),classes=(ownerState=>{const{classes}=ownerState;return(0,composeClasses.Z)({root:["booleanCell"]},getDataGridUtilityClass,classes)})({classes:rootProps.classes}),Icon=react.useMemo((()=>value?rootProps.slots.booleanCellTrueIcon:rootProps.slots.booleanCellFalseIcon),[rootProps.slots.booleanCellFalseIcon,rootProps.slots.booleanCellTrueIcon,value]);return(0,jsx_runtime.jsx)(Icon,(0,esm_extends.Z)({fontSize:"small",className:classes.root,titleAccess:apiRef.current.getLocaleText(value?"booleanCellTrueLabel":"booleanCellFalseLabel"),"data-value":Boolean(value)},other))}const GridBooleanCell=react.memo(GridBooleanCellRaw),GridEditBooleanCell_excluded=["id","value","formattedValue","api","field","row","rowNode","colDef","cellMode","isEditable","tabIndex","className","hasFocus","isValidating","isProcessingProps","error","onValueChange"];function GridEditBooleanCell(props){var _rootProps$slotProps;const{id:idProp,value,field,className,hasFocus,onValueChange}=props,other=(0,objectWithoutPropertiesLoose.Z)(props,GridEditBooleanCell_excluded),apiRef=useGridApiContext_useGridApiContext(),inputRef=react.useRef(null),id=(0,useId.Z)(),[valueState,setValueState]=react.useState(value),rootProps=useGridRootProps(),classes=(ownerState=>{const{classes}=ownerState;return(0,composeClasses.Z)({root:["editBooleanCell"]},getDataGridUtilityClass,classes)})({classes:rootProps.classes}),handleChange=react.useCallback((async event=>{const newValue=event.target.checked;onValueChange&&await onValueChange(event,newValue),setValueState(newValue),await apiRef.current.setEditCellValue({id:idProp,field,value:newValue},event)}),[apiRef,field,idProp,onValueChange]);return react.useEffect((()=>{setValueState(value)}),[value]),(0,useEnhancedEffect.Z)((()=>{hasFocus&&inputRef.current.focus()}),[hasFocus]),(0,jsx_runtime.jsx)("label",(0,esm_extends.Z)({htmlFor:id,className:(0,clsx_m.Z)(classes.root,className)},other,{children:(0,jsx_runtime.jsx)(rootProps.slots.baseCheckbox,(0,esm_extends.Z)({id,inputRef,checked:Boolean(valueState),onChange:handleChange,size:"small"},null==(_rootProps$slotProps=rootProps.slotProps)?void 0:_rootProps$slotProps.baseCheckbox))}))}const GridFilterInputBoolean_excluded=["item","applyValue","apiRef","focusElementRef","isFilterActive","clearButton","tabIndex","label"],BooleanOperatorContainer=(0,styled.ZP)("div")({display:"flex",alignItems:"center",width:"100%","& button":{margin:"auto 0px 5px 5px"}});function GridFilterInputBoolean(props){var _rootProps$slotProps,_baseSelectProps$nati,_rootProps$slotProps2,_rootProps$slotProps3;const{item,applyValue,apiRef,focusElementRef,clearButton,tabIndex,label:labelProp}=props,others=(0,objectWithoutPropertiesLoose.Z)(props,GridFilterInputBoolean_excluded),[filterValueState,setFilterValueState]=react.useState(item.value||""),rootProps=useGridRootProps(),labelId=(0,useId.Z)(),selectId=(0,useId.Z)(),baseSelectProps=(null==(_rootProps$slotProps=rootProps.slotProps)?void 0:_rootProps$slotProps.baseSelect)||{},isSelectNative=null==(_baseSelectProps$nati=baseSelectProps.native)||_baseSelectProps$nati,baseSelectOptionProps=(null==(_rootProps$slotProps2=rootProps.slotProps)?void 0:_rootProps$slotProps2.baseSelectOption)||{},onFilterChange=react.useCallback((event=>{const value=event.target.value;setFilterValueState(value),applyValue((0,esm_extends.Z)({},item,{value}))}),[applyValue,item]);react.useEffect((()=>{setFilterValueState(item.value||"")}),[item.value]);const label=null!=labelProp?labelProp:apiRef.current.getLocaleText("filterPanelInputLabel");return(0,jsx_runtime.jsxs)(BooleanOperatorContainer,{children:[(0,jsx_runtime.jsxs)(rootProps.slots.baseFormControl,{fullWidth:!0,children:[(0,jsx_runtime.jsx)(rootProps.slots.baseInputLabel,(0,esm_extends.Z)({},null==(_rootProps$slotProps3=rootProps.slotProps)?void 0:_rootProps$slotProps3.baseInputLabel,{id:labelId,shrink:!0,variant:"standard",children:label})),(0,jsx_runtime.jsxs)(rootProps.slots.baseSelect,(0,esm_extends.Z)({labelId,id:selectId,label,value:filterValueState,onChange:onFilterChange,variant:"standard",native:isSelectNative,displayEmpty:!0,inputProps:{ref:focusElementRef,tabIndex}},others,baseSelectProps,{children:[(0,jsx_runtime.jsx)(rootProps.slots.baseSelectOption,(0,esm_extends.Z)({},baseSelectOptionProps,{native:isSelectNative,value:"",children:apiRef.current.getLocaleText("filterValueAny")})),(0,jsx_runtime.jsx)(rootProps.slots.baseSelectOption,(0,esm_extends.Z)({},baseSelectOptionProps,{native:isSelectNative,value:"true",children:apiRef.current.getLocaleText("filterValueTrue")})),(0,jsx_runtime.jsx)(rootProps.slots.baseSelectOption,(0,esm_extends.Z)({},baseSelectOptionProps,{native:isSelectNative,value:"false",children:apiRef.current.getLocaleText("filterValueFalse")}))]}))]}),clearButton]})}const GRID_BOOLEAN_COL_DEF=(0,esm_extends.Z)({},GRID_STRING_COL_DEF,{type:"boolean",align:"center",headerAlign:"center",renderCell:params=>isAutoGeneratedRow(params.rowNode)?"":(0,jsx_runtime.jsx)(GridBooleanCell,(0,esm_extends.Z)({},params)),renderEditCell:params=>(0,jsx_runtime.jsx)(GridEditBooleanCell,(0,esm_extends.Z)({},params)),sortComparator:gridNumberComparator,valueFormatter:function gridBooleanFormatter({value,api}){return value?api.getLocaleText("booleanCellTrueLabel"):api.getLocaleText("booleanCellFalseLabel")},filterOperators:[{value:"is",getApplyFilterFn:filterItem=>{if(!filterItem.value)return null;const valueAsBoolean="true"===filterItem.value;return({value})=>Boolean(value)===valueAsBoolean},InputComponent:GridFilterInputBoolean}],getApplyQuickFilterFn:void 0,aggregable:!1,pastedValueParser:value=>(value=>{switch(value.toLowerCase().trim()){case"true":case"yes":case"1":return!0;case"false":case"no":case"0":case"null":case"undefined":return!1;default:return}})(value)}),GRID_CHECKBOX_SELECTION_COL_DEF=(0,esm_extends.Z)({},GRID_BOOLEAN_COL_DEF,{field:"__check__",type:"checkboxSelection",width:50,resizable:!1,sortable:!1,filterable:!1,aggregable:!1,disableColumnMenu:!0,disableReorder:!0,disableExport:!0,getApplyQuickFilterFn:void 0,valueGetter:params=>void 0!==selectedIdsLookupSelector(params.api.state,params.api.instanceId)[params.id],renderHeader:params=>(0,jsx_runtime.jsx)(GridHeaderCheckbox,(0,esm_extends.Z)({},params)),renderCell:params=>(0,jsx_runtime.jsx)(GridCellCheckboxRenderer,(0,esm_extends.Z)({},params))}),useGridRowSelectionPreProcessors=(apiRef,props)=>{const classes=(ownerState=>{const{classes}=ownerState;return react.useMemo((()=>(0,composeClasses.Z)({cellCheckbox:["cellCheckbox"],columnHeaderCheckbox:["columnHeaderCheckbox"]},getDataGridUtilityClass,classes)),[classes])})({classes:props.classes}),updateSelectionColumn=react.useCallback((columnsState=>{const selectionColumn=(0,esm_extends.Z)({},GRID_CHECKBOX_SELECTION_COL_DEF,{cellClassName:classes.cellCheckbox,headerClassName:classes.columnHeaderCheckbox,headerName:apiRef.current.getLocaleText("checkboxSelectionHeaderName")}),shouldHaveSelectionColumn=props.checkboxSelection,haveSelectionColumn=null!=columnsState.lookup.__check__;return shouldHaveSelectionColumn&&!haveSelectionColumn?(columnsState.lookup.__check__=selectionColumn,columnsState.orderedFields=["__check__",...columnsState.orderedFields]):!shouldHaveSelectionColumn&&haveSelectionColumn?(delete columnsState.lookup.__check__,columnsState.orderedFields=columnsState.orderedFields.filter((field=>"__check__"!==field))):shouldHaveSelectionColumn&&haveSelectionColumn&&(columnsState.lookup.__check__=(0,esm_extends.Z)({},selectionColumn,columnsState.lookup.__check__)),columnsState}),[apiRef,classes,props.checkboxSelection]);useGridRegisterPipeProcessor(apiRef,"hydrateColumns",updateSelectionColumn)},useGridRegisterStrategyProcessor=(apiRef,strategyName,group,processor)=>{const registerPreProcessor=react.useCallback((()=>{apiRef.current.registerStrategyProcessor(strategyName,group,processor)}),[apiRef,processor,group,strategyName]);useFirstRender((()=>{registerPreProcessor()}));const isFirstRender=react.useRef(!0);react.useEffect((()=>{isFirstRender.current?isFirstRender.current=!1:registerPreProcessor()}),[registerPreProcessor])},flatRowTreeCreationMethod=params=>"full"===params.updates.type?(rows=>{const tree={[GRID_ROOT_GROUP_ID]:(0,esm_extends.Z)({},buildRootGroup(),{children:rows})};for(let i=0;i<rows.length;i+=1){const rowId=rows[i];tree[rowId]={id:rowId,depth:0,parent:GRID_ROOT_GROUP_ID,type:"leaf",groupingKey:null}}return{groupingName:"none",tree,treeDepths:{0:rows.length},dataRowIds:rows}})(params.updates.rows):(({previousTree,actions})=>{const tree=(0,esm_extends.Z)({},previousTree),idsToRemoveFromRootGroup={};for(let i=0;i<actions.remove.length;i+=1){const idToDelete=actions.remove[i];idsToRemoveFromRootGroup[idToDelete]=!0,delete tree[idToDelete]}for(let i=0;i<actions.insert.length;i+=1){const idToInsert=actions.insert[i];tree[idToInsert]={id:idToInsert,depth:0,parent:GRID_ROOT_GROUP_ID,type:"leaf",groupingKey:null}}const rootGroup=tree[GRID_ROOT_GROUP_ID];let rootGroupChildren=[...rootGroup.children,...actions.insert];return Object.values(idsToRemoveFromRootGroup).length&&(rootGroupChildren=rootGroupChildren.filter((id=>!idsToRemoveFromRootGroup[id]))),tree[GRID_ROOT_GROUP_ID]=(0,esm_extends.Z)({},rootGroup,{children:rootGroupChildren}),{groupingName:"none",tree,treeDepths:{0:rootGroupChildren.length},dataRowIds:rootGroupChildren}})({previousTree:params.previousTree,actions:params.updates.actions}),useGridInitializeState=(initializer,privateApiRef,props)=>{const isInitialized=react.useRef(!1);isInitialized.current||(privateApiRef.current.state=initializer(privateApiRef.current.state,props,privateApiRef),isInitialized.current=!0)};function useGridLogger(privateApiRef,name){const logger=react.useRef(null);if(logger.current)return logger.current;const newLogger=privateApiRef.current.getLogger(name);return logger.current=newLogger,newLogger}const headerFilteringStateInitializer=state=>(0,esm_extends.Z)({},state,{headerFiltering:{editing:null,menuOpen:null}});var MenuList=__webpack_require__("./node_modules/@mui/material/MenuList/MenuList.js"),useTheme=__webpack_require__("./node_modules/@mui/material/styles/useTheme.js"),ClickAwayListener=__webpack_require__("./node_modules/@mui/base/ClickAwayListener/ClickAwayListener.js"),Grow=__webpack_require__("./node_modules/@mui/material/Grow/Grow.js"),Paper=__webpack_require__("./node_modules/@mui/material/Paper/Paper.js"),Popper=__webpack_require__("./node_modules/@mui/material/Popper/Popper.js");const GridMenu_excluded=["open","target","onClickAway","children","position","className","onExited"],GridMenu_useUtilityClasses=ownerState=>{const{classes}=ownerState;return(0,composeClasses.Z)({root:["menu"]},getDataGridUtilityClass,classes)},GridMenuRoot=(0,styled.ZP)(Popper.Z,{name:"MuiDataGrid",slot:"Menu",overridesResolver:(_,styles)=>styles.menu})((({theme})=>({zIndex:theme.zIndex.modal,[`& .${gridClasses_gridClasses.menuList}`]:{outline:0}}))),transformOrigin={"bottom-start":"top left","bottom-end":"top right"};function GridMenu(props){var _rootProps$slotProps;const{open,target,onClickAway,children,position,className,onExited}=props,other=(0,objectWithoutPropertiesLoose.Z)(props,GridMenu_excluded),apiRef=useGridApiContext_useGridApiContext(),rootProps=useGridRootProps(),classes=GridMenu_useUtilityClasses(rootProps);react.useEffect((()=>{const eventName=open?"menuOpen":"menuClose";apiRef.current.publishEvent(eventName,{target})}),[apiRef,open,target]);return(0,jsx_runtime.jsx)(GridMenuRoot,(0,esm_extends.Z)({as:rootProps.slots.basePopper,className:(0,clsx_m.Z)(className,classes.root),ownerState:rootProps,open,anchorEl:target,transition:!0,placement:position},other,null==(_rootProps$slotProps=rootProps.slotProps)?void 0:_rootProps$slotProps.basePopper,{children:({TransitionProps,placement})=>{return(0,jsx_runtime.jsx)(ClickAwayListener.d,{onClickAway,mouseEvent:"onMouseDown",children:(0,jsx_runtime.jsx)(Grow.Z,(0,esm_extends.Z)({},TransitionProps,{style:{transformOrigin:transformOrigin[placement]},onExited:(popperOnExited=null==TransitionProps?void 0:TransitionProps.onExited,node=>{popperOnExited&&popperOnExited(),onExited&&onExited(node)}),children:(0,jsx_runtime.jsx)(Paper.Z,{children})}))});var popperOnExited}}))}const GridActionsCell_excluded=["api","colDef","id","hasFocus","isEditable","field","value","formattedValue","row","rowNode","cellMode","tabIndex","position","focusElementRef"];function GridActionsCell(props){var _rootProps$slotProps;const{colDef,id,hasFocus,tabIndex,position="bottom-end",focusElementRef}=props,other=(0,objectWithoutPropertiesLoose.Z)(props,GridActionsCell_excluded),[focusedButtonIndex,setFocusedButtonIndex]=react.useState(-1),[open,setOpen]=react.useState(!1),apiRef=useGridApiContext_useGridApiContext(),rootRef=react.useRef(null),buttonRef=react.useRef(null),ignoreCallToFocus=react.useRef(!1),touchRippleRefs=react.useRef({}),theme=(0,useTheme.Z)(),menuId=(0,useId.Z)(),buttonId=(0,useId.Z)(),rootProps=useGridRootProps();if(!(colDef=>"function"==typeof colDef.getActions)(colDef))throw new Error("MUI: Missing the `getActions` property in the `GridColDef`.");const options=colDef.getActions(apiRef.current.getRowParams(id)),iconButtons=options.filter((option=>!option.props.showInMenu)),menuButtons=options.filter((option=>option.props.showInMenu)),numberOfButtons=iconButtons.length+(menuButtons.length?1:0);react.useLayoutEffect((()=>{hasFocus||Object.entries(touchRippleRefs.current).forEach((([index,ref])=>{null==ref||ref.stop({},(()=>{delete touchRippleRefs.current[index]}))}))}),[hasFocus]),react.useEffect((()=>{if(focusedButtonIndex<0||!rootRef.current)return;if(focusedButtonIndex>=rootRef.current.children.length)return;rootRef.current.children[focusedButtonIndex].focus({preventScroll:!0})}),[focusedButtonIndex]),react.useEffect((()=>{hasFocus||(setFocusedButtonIndex(-1),ignoreCallToFocus.current=!1)}),[hasFocus]),react.useImperativeHandle(focusElementRef,(()=>({focus(){ignoreCallToFocus.current||setFocusedButtonIndex(0)}})),[]),react.useEffect((()=>{focusedButtonIndex>=numberOfButtons&&setFocusedButtonIndex(numberOfButtons-1)}),[focusedButtonIndex,numberOfButtons]);const hideMenu=()=>{setOpen(!1)},handleTouchRippleRef=index=>instance=>{touchRippleRefs.current[index]=instance},handleButtonClick=(index,onClick)=>event=>{setFocusedButtonIndex(index),ignoreCallToFocus.current=!0,onClick&&onClick(event)};return(0,jsx_runtime.jsxs)("div",(0,esm_extends.Z)({role:"menu",ref:rootRef,tabIndex:-1,className:gridClasses_gridClasses.actionsCell,onKeyDown:event=>{if(numberOfButtons<=1)return;let newIndex=focusedButtonIndex;"ArrowRight"===event.key?"rtl"===theme.direction?newIndex-=1:newIndex+=1:"ArrowLeft"===event.key&&("rtl"===theme.direction?newIndex+=1:newIndex-=1),newIndex<0||newIndex>=numberOfButtons||newIndex!==focusedButtonIndex&&(event.preventDefault(),event.stopPropagation(),setFocusedButtonIndex(newIndex))}},other,{children:[iconButtons.map(((button,index)=>react.cloneElement(button,{key:index,touchRippleRef:handleTouchRippleRef(index),onClick:handleButtonClick(index,button.props.onClick),tabIndex:focusedButtonIndex===index?tabIndex:-1}))),menuButtons.length>0&&buttonId&&(0,jsx_runtime.jsx)(rootProps.slots.baseIconButton,(0,esm_extends.Z)({ref:buttonRef,id:buttonId,"aria-label":apiRef.current.getLocaleText("actionsCellMore"),"aria-haspopup":"menu","aria-expanded":open,"aria-controls":open?menuId:void 0,role:"menuitem",size:"small",onClick:()=>{setOpen(!0),setFocusedButtonIndex(numberOfButtons-1),ignoreCallToFocus.current=!0},touchRippleRef:handleTouchRippleRef(buttonId),tabIndex:focusedButtonIndex===iconButtons.length?tabIndex:-1},null==(_rootProps$slotProps=rootProps.slotProps)?void 0:_rootProps$slotProps.baseIconButton,{children:(0,jsx_runtime.jsx)(rootProps.slots.moreActionsIcon,{fontSize:"small"})})),menuButtons.length>0&&(0,jsx_runtime.jsx)(GridMenu,{onClickAway:hideMenu,onClick:hideMenu,open,target:buttonRef.current,position,children:(0,jsx_runtime.jsx)(MenuList.Z,{id:menuId,className:gridClasses_gridClasses.menuList,onKeyDown:event=>{"Tab"===event.key&&event.preventDefault(),["Tab","Enter","Escape"].includes(event.key)&&hideMenu()},"aria-labelledby":buttonId,variant:"menu",autoFocusItem:!0,children:menuButtons.map(((button,index)=>react.cloneElement(button,{key:index})))})})]}))}const GRID_ACTIONS_COL_DEF=(0,esm_extends.Z)({},GRID_STRING_COL_DEF,{sortable:!1,filterable:!1,aggregable:!1,width:100,align:"center",headerAlign:"center",headerName:"",disableColumnMenu:!0,disableExport:!0,renderCell:params=>(0,jsx_runtime.jsx)(GridActionsCell,(0,esm_extends.Z)({},params)),getApplyQuickFilterFn:void 0});var GridEditModes=function(GridEditModes){return GridEditModes.Cell="cell",GridEditModes.Row="row",GridEditModes}(GridEditModes||{}),GridCellModes=function(GridCellModes){return GridCellModes.Edit="edit",GridCellModes.View="view",GridCellModes}(GridCellModes||{}),GridRowModes=function(GridRowModes){return GridRowModes.Edit="edit",GridRowModes.View="view",GridRowModes}(GridRowModes||{});const getVisibleRows=(apiRef,props)=>{let rows,range;return props.pagination&&"client"===props.paginationMode?(range=gridPaginationRowRangeSelector(apiRef),rows=gridPaginatedVisibleSortedGridRowEntriesSelector(apiRef)):(rows=gridExpandedSortedRowEntriesSelector(apiRef),range=0===rows.length?null:{firstRowIndex:0,lastRowIndex:rows.length-1}),{rows,range}},useGridVisibleRows=(apiRef,props)=>{const response=getVisibleRows(apiRef,props);return react.useMemo((()=>({rows:response.rows,range:response.range})),[response.rows,response.range])},getSelectionModelPropValue=(selectionModelProp,prevSelectionModel)=>null==selectionModelProp||Array.isArray(selectionModelProp)?selectionModelProp:prevSelectionModel&&prevSelectionModel[0]===selectionModelProp?prevSelectionModel:[selectionModelProp],rowSelectionStateInitializer=(state,props)=>{var _getSelectionModelPro;return(0,esm_extends.Z)({},state,{rowSelection:props.rowSelection&&null!=(_getSelectionModelPro=getSelectionModelPropValue(props.rowSelectionModel))?_getSelectionModelPro:[]})},useGridRegisterPipeApplier=(apiRef,group,callback)=>{const cleanup=react.useRef(),id=react.useRef(`mui-${Math.round(1e9*Math.random())}`),registerPreProcessor=react.useCallback((()=>{cleanup.current=apiRef.current.registerPipeApplier(group,id.current,callback)}),[apiRef,callback,group]);useFirstRender((()=>{registerPreProcessor()}));const isFirstRender=react.useRef(!0);react.useEffect((()=>(isFirstRender.current?isFirstRender.current=!1:registerPreProcessor(),()=>{cleanup.current&&(cleanup.current(),cleanup.current=null)})),[registerPreProcessor])},parseNumericValue=value=>null==value?null:Number(value),GRID_NUMERIC_COL_DEF=(0,esm_extends.Z)({},GRID_STRING_COL_DEF,{type:"number",align:"right",headerAlign:"right",sortComparator:gridNumberComparator,valueParser:value=>""===value?null:Number(value),valueFormatter:({value})=>function isNumber(value){return"number"==typeof value}(value)?value.toLocaleString():value||"",filterOperators:[{value:"=",getApplyFilterFn:filterItem=>null==filterItem.value||Number.isNaN(filterItem.value)?null:({value})=>parseNumericValue(value)===filterItem.value,InputComponent:GridFilterInputValue,InputComponentProps:{type:"number"}},{value:"!=",getApplyFilterFn:filterItem=>null==filterItem.value||Number.isNaN(filterItem.value)?null:({value})=>parseNumericValue(value)!==filterItem.value,InputComponent:GridFilterInputValue,InputComponentProps:{type:"number"}},{value:">",getApplyFilterFn:filterItem=>null==filterItem.value||Number.isNaN(filterItem.value)?null:({value})=>null!=value&&parseNumericValue(value)>filterItem.value,InputComponent:GridFilterInputValue,InputComponentProps:{type:"number"}},{value:">=",getApplyFilterFn:filterItem=>null==filterItem.value||Number.isNaN(filterItem.value)?null:({value})=>null!=value&&parseNumericValue(value)>=filterItem.value,InputComponent:GridFilterInputValue,InputComponentProps:{type:"number"}},{value:"<",getApplyFilterFn:filterItem=>null==filterItem.value||Number.isNaN(filterItem.value)?null:({value})=>null!=value&&parseNumericValue(value)<filterItem.value,InputComponent:GridFilterInputValue,InputComponentProps:{type:"number"}},{value:"<=",getApplyFilterFn:filterItem=>null==filterItem.value||Number.isNaN(filterItem.value)?null:({value})=>null!=value&&parseNumericValue(value)<=filterItem.value,InputComponent:GridFilterInputValue,InputComponentProps:{type:"number"}},{value:"isEmpty",getApplyFilterFn:()=>({value})=>null==value,requiresFilterValue:!1},{value:"isNotEmpty",getApplyFilterFn:()=>({value})=>null!=value,requiresFilterValue:!1},{value:"isAnyOf",getApplyFilterFn:filterItem=>Array.isArray(filterItem.value)&&0!==filterItem.value.length?({value})=>null!=value&&filterItem.value.includes(Number(value)):null,InputComponent:GridFilterInputMultipleValue,InputComponentProps:{type:"number"}}],getApplyQuickFilterFn:value=>null==value||Number.isNaN(value)||""===value?null:({value:columnValue})=>parseNumericValue(columnValue)===parseNumericValue(value)}),GridFilterInputDate_excluded=["item","applyValue","type","apiRef","focusElementRef","InputProps","isFilterActive","clearButton","tabIndex","disabled"];function GridFilterInputDate(props){var _item$value,_rootProps$slotProps;const{item,applyValue,type,apiRef,focusElementRef,InputProps,clearButton,tabIndex,disabled}=props,other=(0,objectWithoutPropertiesLoose.Z)(props,GridFilterInputDate_excluded),filterTimeout=react.useRef(),[filterValueState,setFilterValueState]=react.useState(null!=(_item$value=item.value)?_item$value:""),[applying,setIsApplying]=react.useState(!1),id=(0,useId.Z)(),rootProps=useGridRootProps(),onFilterChange=react.useCallback((event=>{const value=event.target.value;clearTimeout(filterTimeout.current),setFilterValueState(String(value)),setIsApplying(!0),filterTimeout.current=setTimeout((()=>{applyValue((0,esm_extends.Z)({},item,{value})),setIsApplying(!1)}),500)}),[applyValue,item]);return react.useEffect((()=>()=>{clearTimeout(filterTimeout.current)}),[]),react.useEffect((()=>{var _item$value2;const itemValue=null!=(_item$value2=item.value)?_item$value2:"";setFilterValueState(String(itemValue))}),[item.value]),(0,jsx_runtime.jsx)(rootProps.slots.baseTextField,(0,esm_extends.Z)({fullWidth:!0,id,label:apiRef.current.getLocaleText("filterPanelInputLabel"),placeholder:apiRef.current.getLocaleText("filterPanelInputPlaceholder"),value:filterValueState,onChange:onFilterChange,variant:"standard",type:type||"text",InputLabelProps:{shrink:!0},inputRef:focusElementRef,InputProps:(0,esm_extends.Z)({},applying||clearButton?{endAdornment:applying?(0,jsx_runtime.jsx)(rootProps.slots.loadIcon,{fontSize:"small",color:"action"}):clearButton}:{},{disabled},InputProps,{inputProps:(0,esm_extends.Z)({max:"datetime-local"===type?"9999-12-31T23:59":"9999-12-31",tabIndex},null==InputProps?void 0:InputProps.inputProps)})},other,null==(_rootProps$slotProps=rootProps.slotProps)?void 0:_rootProps$slotProps.baseTextField))}const dateRegex=/(\d+)-(\d+)-(\d+)/,dateTimeRegex=/(\d+)-(\d+)-(\d+)T(\d+):(\d+)/;function buildApplyFilterFn(filterItem,compareFn,showTime,keepHours){if(!filterItem.value)return null;const[year,month,day,hour,minute]=filterItem.value.match(showTime?dateTimeRegex:dateRegex).slice(1).map(Number),time=new Date(year,month-1,day,hour||0,minute||0).getTime();return({value})=>{if(!value)return!1;if(keepHours)return compareFn(value.getTime(),time);const timeToCompare=new Date(value).setHours(showTime?value.getHours():0,showTime?value.getMinutes():0,0,0);return compareFn(timeToCompare,time)}}const getGridDateOperators=showTime=>[{value:"is",getApplyFilterFn:filterItem=>buildApplyFilterFn(filterItem,((value1,value2)=>value1===value2),showTime),InputComponent:GridFilterInputDate,InputComponentProps:{type:showTime?"datetime-local":"date"}},{value:"not",getApplyFilterFn:filterItem=>buildApplyFilterFn(filterItem,((value1,value2)=>value1!==value2),showTime),InputComponent:GridFilterInputDate,InputComponentProps:{type:showTime?"datetime-local":"date"}},{value:"after",getApplyFilterFn:filterItem=>buildApplyFilterFn(filterItem,((value1,value2)=>value1>value2),showTime),InputComponent:GridFilterInputDate,InputComponentProps:{type:showTime?"datetime-local":"date"}},{value:"onOrAfter",getApplyFilterFn:filterItem=>buildApplyFilterFn(filterItem,((value1,value2)=>value1>=value2),showTime),InputComponent:GridFilterInputDate,InputComponentProps:{type:showTime?"datetime-local":"date"}},{value:"before",getApplyFilterFn:filterItem=>buildApplyFilterFn(filterItem,((value1,value2)=>value1<value2),showTime,!showTime),InputComponent:GridFilterInputDate,InputComponentProps:{type:showTime?"datetime-local":"date"}},{value:"onOrBefore",getApplyFilterFn:filterItem=>buildApplyFilterFn(filterItem,((value1,value2)=>value1<=value2),showTime),InputComponent:GridFilterInputDate,InputComponentProps:{type:showTime?"datetime-local":"date"}},{value:"isEmpty",getApplyFilterFn:()=>({value})=>null==value,requiresFilterValue:!1},{value:"isNotEmpty",getApplyFilterFn:()=>({value})=>null!=value,requiresFilterValue:!1}],GridEditDateCell_excluded=["id","value","formattedValue","api","field","row","rowNode","colDef","cellMode","isEditable","tabIndex","hasFocus","inputProps","isValidating","isProcessingProps","onValueChange"],StyledInputBase=(0,styled.ZP)(InputBase.ZP)({fontSize:"inherit"});function GridEditDateCell(props){const{id,value:valueProp,field,colDef,hasFocus,inputProps,onValueChange}=props,other=(0,objectWithoutPropertiesLoose.Z)(props,GridEditDateCell_excluded),isDateTime="dateTime"===colDef.type,apiRef=useGridApiContext_useGridApiContext(),inputRef=react.useRef(),valueTransformed=react.useMemo((()=>{let parsedDate,formattedDate;if(parsedDate=null==valueProp?null:valueProp instanceof Date?valueProp:new Date((null!=valueProp?valueProp:"").toString()),null==parsedDate||Number.isNaN(parsedDate.getTime()))formattedDate="";else{formattedDate=new Date(parsedDate.getTime()-60*parsedDate.getTimezoneOffset()*1e3).toISOString().substr(0,isDateTime?16:10)}return{parsed:parsedDate,formatted:formattedDate}}),[valueProp,isDateTime]),[valueState,setValueState]=react.useState(valueTransformed),classes=(ownerState=>{const{classes}=ownerState;return(0,composeClasses.Z)({root:["editInputCell"]},getDataGridUtilityClass,classes)})({classes:useGridRootProps().classes}),hasUpdatedEditValueOnMount=react.useRef(!1),parseValueToDate=react.useCallback((value=>{if(""===value)return null;const[date,time]=value.split("T"),[year,month,day]=date.split("-"),parsedDate=new Date;if(parsedDate.setFullYear(Number(year),Number(month)-1,Number(day)),parsedDate.setHours(0,0,0,0),time){const[hours,minutes]=time.split(":");parsedDate.setHours(Number(hours),Number(minutes),0,0)}return parsedDate}),[]),handleChange=react.useCallback((async event=>{const newFormattedDate=event.target.value,newParsedDate=parseValueToDate(newFormattedDate);onValueChange&&await onValueChange(event,newParsedDate),setValueState({parsed:newParsedDate,formatted:newFormattedDate}),apiRef.current.setEditCellValue({id,field,value:newParsedDate},event)}),[apiRef,field,id,onValueChange,parseValueToDate]);react.useEffect((()=>{setValueState((state=>{var _valueTransformed$par,_state$parsed;return valueTransformed.parsed!==state.parsed&&(null==(_valueTransformed$par=valueTransformed.parsed)?void 0:_valueTransformed$par.getTime())!==(null==(_state$parsed=state.parsed)?void 0:_state$parsed.getTime())?valueTransformed:state}))}),[valueTransformed]),(0,useEnhancedEffect.Z)((()=>{hasFocus&&inputRef.current.focus()}),[hasFocus]);const meta=apiRef.current.unstable_getEditCellMeta(id,field);return(0,jsx_runtime.jsx)(StyledInputBase,(0,esm_extends.Z)({inputRef:el=>{if(inputRef.current=el,meta.unstable_updateValueOnRender&&!hasUpdatedEditValueOnMount.current){const inputValue=inputRef.current.value,parsedDate=parseValueToDate(inputValue);setValueState({parsed:parsedDate,formatted:inputValue}),apiRef.current.setEditCellValue({id,field,value:parsedDate}),hasUpdatedEditValueOnMount.current=!0}},fullWidth:!0,className:classes.root,type:isDateTime?"datetime-local":"date",inputProps:(0,esm_extends.Z)({max:isDateTime?"9999-12-31T23:59":"9999-12-31"},inputProps),value:valueState.formatted,onChange:handleChange},other))}const renderEditDateCell=params=>(0,jsx_runtime.jsx)(GridEditDateCell,(0,esm_extends.Z)({},params));function throwIfNotDateObject({value,columnType,rowId,field}){if(!(value instanceof Date))throw new Error([`MUI: \`${columnType}\` column type only accepts \`Date\` objects as values.`,"Use `valueGetter` to transform the value into a `Date` object.",`Row ID: ${rowId}, field: "${field}".`].join("\n"))}const GRID_DATE_COL_DEF=(0,esm_extends.Z)({},GRID_STRING_COL_DEF,{type:"date",sortComparator:gridDateComparator,valueFormatter:function gridDateFormatter({value,field,id}){return value?(throwIfNotDateObject({value,columnType:"date",rowId:id,field}),value.toLocaleDateString()):""},filterOperators:getGridDateOperators(),renderEditCell:renderEditDateCell,getApplyQuickFilterFn:void 0,pastedValueParser:value=>new Date(value)}),GRID_DATETIME_COL_DEF=(0,esm_extends.Z)({},GRID_STRING_COL_DEF,{type:"dateTime",sortComparator:gridDateComparator,valueFormatter:function gridDateTimeFormatter({value,field,id}){return value?(throwIfNotDateObject({value,columnType:"dateTime",rowId:id,field}),value.toLocaleString()):""},filterOperators:getGridDateOperators(!0),renderEditCell:renderEditDateCell,getApplyQuickFilterFn:void 0,pastedValueParser:value=>new Date(value)});var GridCellEditStartReasons=function(GridCellEditStartReasons){return GridCellEditStartReasons.enterKeyDown="enterKeyDown",GridCellEditStartReasons.cellDoubleClick="cellDoubleClick",GridCellEditStartReasons.printableKeyDown="printableKeyDown",GridCellEditStartReasons.deleteKeyDown="deleteKeyDown",GridCellEditStartReasons}(GridCellEditStartReasons||{}),GridCellEditStopReasons=function(GridCellEditStopReasons){return GridCellEditStopReasons.cellFocusOut="cellFocusOut",GridCellEditStopReasons.escapeKeyDown="escapeKeyDown",GridCellEditStopReasons.enterKeyDown="enterKeyDown",GridCellEditStopReasons.tabKeyDown="tabKeyDown",GridCellEditStopReasons.shiftTabKeyDown="shiftTabKeyDown",GridCellEditStopReasons}(GridCellEditStopReasons||{});function isSingleSelectColDef(colDef){return"singleSelect"===(null==colDef?void 0:colDef.type)}function getValueFromValueOptions(value,valueOptions,getOptionValue){if(void 0===valueOptions)return;const result=valueOptions.find((option=>{const optionValue=getOptionValue(option);return String(optionValue)===String(value)}));return getOptionValue(result)}const GridEditSingleSelectCell_excluded=["id","value","formattedValue","api","field","row","rowNode","colDef","cellMode","isEditable","tabIndex","className","hasFocus","isValidating","isProcessingProps","error","onValueChange","initialOpen","getOptionLabel","getOptionValue"],_excluded2=["MenuProps"];function GridEditSingleSelectCell(props){var _rootProps$slotProps,_baseSelectProps$nati,_rootProps$slotProps2;const rootProps=useGridRootProps(),{id,value:valueProp,field,row,colDef,hasFocus,error,onValueChange,initialOpen=rootProps.editMode===GridEditModes.Cell,getOptionLabel:getOptionLabelProp,getOptionValue:getOptionValueProp}=props,other=(0,objectWithoutPropertiesLoose.Z)(props,GridEditSingleSelectCell_excluded),apiRef=useGridApiContext_useGridApiContext(),ref=react.useRef(),inputRef=react.useRef(),[open,setOpen]=react.useState(initialOpen),isSelectNative=null!=(_baseSelectProps$nati=((null==(_rootProps$slotProps=rootProps.slotProps)?void 0:_rootProps$slotProps.baseSelect)||{}).native)&&_baseSelectProps$nati,_ref=(null==(_rootProps$slotProps2=rootProps.slotProps)?void 0:_rootProps$slotProps2.baseSelect)||{},{MenuProps}=_ref,otherBaseSelectProps=(0,objectWithoutPropertiesLoose.Z)(_ref,_excluded2);if((0,useEnhancedEffect.Z)((()=>{var _inputRef$current;hasFocus&&(null==(_inputRef$current=inputRef.current)||_inputRef$current.focus())}),[hasFocus]),!isSingleSelectColDef(colDef))return null;let valueOptions;if(valueOptions="function"==typeof(null==colDef?void 0:colDef.valueOptions)?null==colDef?void 0:colDef.valueOptions({id,row,field}):null==colDef?void 0:colDef.valueOptions,!valueOptions)return null;const getOptionValue=getOptionValueProp||colDef.getOptionValue,getOptionLabel=getOptionLabelProp||colDef.getOptionLabel;return valueOptions&&colDef?(0,jsx_runtime.jsx)(rootProps.slots.baseSelect,(0,esm_extends.Z)({ref,inputRef,value:valueProp,onChange:async event=>{if(!isSingleSelectColDef(colDef)||!valueOptions)return;setOpen(!1);const formattedTargetValue=getValueFromValueOptions(event.target.value,valueOptions,getOptionValue);onValueChange&&await onValueChange(event,formattedTargetValue),await apiRef.current.setEditCellValue({id,field,value:formattedTargetValue},event)},open,onOpen:event=>{(function GridEditSingleSelectCell_isKeyboardEvent(event){return!!event.key})(event)&&"Enter"===event.key||setOpen(!0)},MenuProps:(0,esm_extends.Z)({onClose:(event,reason)=>{if(rootProps.editMode!==GridEditModes.Row){if("backdropClick"===reason||isEscapeKey(event.key)){const params=apiRef.current.getCellParams(id,field);apiRef.current.publishEvent("cellEditStop",(0,esm_extends.Z)({},params,{reason:isEscapeKey(event.key)?GridCellEditStopReasons.escapeKeyDown:GridCellEditStopReasons.cellFocusOut}))}}else setOpen(!1)}},MenuProps),error,native:isSelectNative,fullWidth:!0},other,otherBaseSelectProps,{children:valueOptions.map((valueOption=>{var _rootProps$slotProps3;const value=getOptionValue(valueOption);return(0,react.createElement)(rootProps.slots.baseSelectOption,(0,esm_extends.Z)({},(null==(_rootProps$slotProps3=rootProps.slotProps)?void 0:_rootProps$slotProps3.baseSelectOption)||{},{native:isSelectNative,key:value,value}),getOptionLabel(valueOption))}))})):null}const GridFilterInputSingleSelect_excluded=["item","applyValue","type","apiRef","focusElementRef","getOptionLabel","getOptionValue","placeholder","tabIndex","label","isFilterActive","clearButton"],renderSingleSelectOptions=({column:{valueOptions,field},OptionComponent,getOptionLabel,getOptionValue,isSelectNative,baseSelectOptionProps})=>("function"==typeof valueOptions?["",...valueOptions({field})]:["",...valueOptions||[]]).map((option=>{const value=getOptionValue(option),label=getOptionLabel(option);return(0,react.createElement)(OptionComponent,(0,esm_extends.Z)({},baseSelectOptionProps,{native:isSelectNative,key:value,value}),label)})),SingleSelectOperatorContainer=(0,styled.ZP)("div")({display:"flex",alignItems:"flex-end",width:"100%","& button":{margin:"auto 0px 5px 5px"}});function GridFilterInputSingleSelect(props){var _item$value,_rootProps$slotProps$,_rootProps$slotProps,_rootProps$slotProps$2,_resolvedColumn,_resolvedColumn2,_rootProps$slotProps2,_rootProps$slotProps3,_rootProps$slotProps4;const{item,applyValue,type,apiRef,focusElementRef,getOptionLabel:getOptionLabelProp,getOptionValue:getOptionValueProp,placeholder,tabIndex,label:labelProp,clearButton}=props,others=(0,objectWithoutPropertiesLoose.Z)(props,GridFilterInputSingleSelect_excluded),[filterValueState,setFilterValueState]=react.useState(null!=(_item$value=item.value)?_item$value:""),id=(0,useId.Z)(),labelId=(0,useId.Z)(),rootProps=useGridRootProps(),isSelectNative=null==(_rootProps$slotProps$=null==(_rootProps$slotProps=rootProps.slotProps)||null==(_rootProps$slotProps$2=_rootProps$slotProps.baseSelect)?void 0:_rootProps$slotProps$2.native)||_rootProps$slotProps$;let resolvedColumn=null;if(item.field){const column=apiRef.current.getColumn(item.field);isSingleSelectColDef(column)&&(resolvedColumn=column)}const getOptionValue=getOptionValueProp||(null==(_resolvedColumn=resolvedColumn)?void 0:_resolvedColumn.getOptionValue),getOptionLabel=getOptionLabelProp||(null==(_resolvedColumn2=resolvedColumn)?void 0:_resolvedColumn2.getOptionLabel),currentValueOptions=react.useMemo((()=>{if(resolvedColumn)return"function"==typeof resolvedColumn.valueOptions?resolvedColumn.valueOptions({field:resolvedColumn.field}):resolvedColumn.valueOptions}),[resolvedColumn]),onFilterChange=react.useCallback((event=>{let value=event.target.value;value=getValueFromValueOptions(value,currentValueOptions,getOptionValue),setFilterValueState(String(value)),applyValue((0,esm_extends.Z)({},item,{value}))}),[currentValueOptions,getOptionValue,applyValue,item]);if(react.useEffect((()=>{var _itemValue;let itemValue;if(void 0!==currentValueOptions){if(itemValue=getValueFromValueOptions(item.value,currentValueOptions,getOptionValue),itemValue!==item.value)return void applyValue((0,esm_extends.Z)({},item,{value:itemValue}))}else itemValue=item.value;itemValue=null!=(_itemValue=itemValue)?_itemValue:"",setFilterValueState(String(itemValue))}),[item,currentValueOptions,applyValue,getOptionValue]),!isSingleSelectColDef(resolvedColumn))return null;if(!isSingleSelectColDef(resolvedColumn))return null;const label=null!=labelProp?labelProp:apiRef.current.getLocaleText("filterPanelInputLabel");return(0,jsx_runtime.jsxs)(SingleSelectOperatorContainer,{children:[(0,jsx_runtime.jsxs)(rootProps.slots.baseFormControl,{children:[(0,jsx_runtime.jsx)(rootProps.slots.baseInputLabel,(0,esm_extends.Z)({},null==(_rootProps$slotProps2=rootProps.slotProps)?void 0:_rootProps$slotProps2.baseInputLabel,{id:labelId,htmlFor:id,shrink:!0,variant:"standard",children:label})),(0,jsx_runtime.jsx)(rootProps.slots.baseSelect,(0,esm_extends.Z)({id,label,labelId,value:filterValueState,onChange:onFilterChange,variant:"standard",type:type||"text",inputProps:{tabIndex,ref:focusElementRef,placeholder:null!=placeholder?placeholder:apiRef.current.getLocaleText("filterPanelInputPlaceholder")},native:isSelectNative},others,null==(_rootProps$slotProps3=rootProps.slotProps)?void 0:_rootProps$slotProps3.baseSelect,{children:renderSingleSelectOptions({column:resolvedColumn,OptionComponent:rootProps.slots.baseSelectOption,getOptionLabel,getOptionValue,isSelectNative,baseSelectOptionProps:null==(_rootProps$slotProps4=rootProps.slotProps)?void 0:_rootProps$slotProps4.baseSelectOption})}))]}),clearButton]})}var useAutocomplete=__webpack_require__("./node_modules/@mui/base/useAutocomplete/useAutocomplete.js");const GridFilterInputMultipleSingleSelect_excluded=["item","applyValue","type","apiRef","focusElementRef","color","error","helperText","size","variant","getOptionLabel","getOptionValue"],filter=(0,useAutocomplete.D)();function GridFilterInputMultipleSingleSelect(props){var _resolvedColumn,_resolvedColumn2;const{item,applyValue,apiRef,focusElementRef,color,error,helperText,size,variant="standard",getOptionLabel:getOptionLabelProp,getOptionValue:getOptionValueProp}=props,other=(0,objectWithoutPropertiesLoose.Z)(props,GridFilterInputMultipleSingleSelect_excluded),TextFieldProps={color,error,helperText,size,variant},id=(0,useId.Z)(),rootProps=useGridRootProps();let resolvedColumn=null;if(item.field){const column=apiRef.current.getColumn(item.field);isSingleSelectColDef(column)&&(resolvedColumn=column)}const getOptionValue=getOptionValueProp||(null==(_resolvedColumn=resolvedColumn)?void 0:_resolvedColumn.getOptionValue),getOptionLabel=getOptionLabelProp||(null==(_resolvedColumn2=resolvedColumn)?void 0:_resolvedColumn2.getOptionLabel),isOptionEqualToValue=react.useCallback(((option,value)=>getOptionValue(option)===getOptionValue(value)),[getOptionValue]),resolvedValueOptions=react.useMemo((()=>{var _resolvedColumn3;return null!=(_resolvedColumn3=resolvedColumn)&&_resolvedColumn3.valueOptions?"function"==typeof resolvedColumn.valueOptions?resolvedColumn.valueOptions({field:resolvedColumn.field}):resolvedColumn.valueOptions:[]}),[resolvedColumn]),resolvedFormattedValueOptions=react.useMemo((()=>null==resolvedValueOptions?void 0:resolvedValueOptions.map(getOptionValue)),[resolvedValueOptions,getOptionValue]),filteredValues=react.useMemo((()=>{if(!Array.isArray(item.value))return[];if(void 0!==resolvedValueOptions){return item.value.map((element=>null==resolvedFormattedValueOptions?void 0:resolvedFormattedValueOptions.findIndex((formattedOption=>formattedOption===element)))).filter((index=>index>=0)).map((index=>resolvedValueOptions[index]))}return item.value}),[item.value,resolvedValueOptions,resolvedFormattedValueOptions]);react.useEffect((()=>{Array.isArray(item.value)&&filteredValues.length===item.value.length||applyValue((0,esm_extends.Z)({},item,{value:filteredValues.map(getOptionValue)}))}),[item,filteredValues,applyValue,getOptionValue]);const handleChange=react.useCallback(((event,value)=>{applyValue((0,esm_extends.Z)({},item,{value:value.map(getOptionValue)}))}),[applyValue,item,getOptionValue]);return(0,jsx_runtime.jsx)(Autocomplete.Z,(0,esm_extends.Z)({multiple:!0,options:resolvedValueOptions,isOptionEqualToValue,filterOptions:filter,id,value:filteredValues,onChange:handleChange,getOptionLabel,renderTags:(value,getTagProps)=>value.map(((option,index)=>(0,jsx_runtime.jsx)(rootProps.slots.baseChip,(0,esm_extends.Z)({variant:"outlined",size:"small",label:getOptionLabel(option)},getTagProps({index}))))),renderInput:params=>{var _rootProps$slotProps;return(0,jsx_runtime.jsx)(rootProps.slots.baseTextField,(0,esm_extends.Z)({},params,{label:apiRef.current.getLocaleText("filterPanelInputLabel"),placeholder:apiRef.current.getLocaleText("filterPanelInputPlaceholder"),InputLabelProps:(0,esm_extends.Z)({},params.InputLabelProps,{shrink:!0}),inputRef:focusElementRef,type:"singleSelect"},TextFieldProps,null==(_rootProps$slotProps=rootProps.slotProps)?void 0:_rootProps$slotProps.baseTextField))}},other))}const parseObjectValue=value=>null!=value&&isObject(value)?value.value:value,GRID_SINGLE_SELECT_COL_DEF=(0,esm_extends.Z)({},GRID_STRING_COL_DEF,{type:"singleSelect",getOptionLabel:value=>isObject(value)?value.label:String(value),getOptionValue:value=>isObject(value)?value.value:value,valueFormatter(params){const{id,field,value,api}=params,colDef=params.api.getColumn(field);if(!isSingleSelectColDef(colDef))return"";let valueOptions;if(valueOptions="function"==typeof colDef.valueOptions?colDef.valueOptions({id,row:id?api.getRow(id):null,field}):colDef.valueOptions,null==value)return"";if(!valueOptions)return value;if("object"!=typeof valueOptions[0])return colDef.getOptionLabel(value);const valueOption=valueOptions.find((option=>colDef.getOptionValue(option)===value));return valueOption?colDef.getOptionLabel(valueOption):""},renderEditCell:params=>(0,jsx_runtime.jsx)(GridEditSingleSelectCell,(0,esm_extends.Z)({},params)),filterOperators:[{value:"is",getApplyFilterFn:filterItem=>null==filterItem.value||""===filterItem.value?null:({value})=>parseObjectValue(value)===parseObjectValue(filterItem.value),InputComponent:GridFilterInputSingleSelect},{value:"not",getApplyFilterFn:filterItem=>null==filterItem.value||""===filterItem.value?null:({value})=>parseObjectValue(value)!==parseObjectValue(filterItem.value),InputComponent:GridFilterInputSingleSelect},{value:"isAnyOf",getApplyFilterFn:filterItem=>{if(!Array.isArray(filterItem.value)||0===filterItem.value.length)return null;const filterItemValues=filterItem.value.map(parseObjectValue);return({value})=>filterItemValues.includes(parseObjectValue(value))},InputComponent:GridFilterInputMultipleSingleSelect}],pastedValueParser:(value,params)=>{const colDef=params.colDef,colDefValueOptions=colDef.valueOptions,valueOptions="function"==typeof colDefValueOptions?colDefValueOptions({field:colDef.field}):colDefValueOptions||[],getOptionValue=colDef.getOptionValue;if(valueOptions.find((option=>getOptionValue(option)===value)))return value}}),COLUMNS_DIMENSION_PROPERTIES=["maxWidth","minWidth","width","flex"];const hydrateColumnsWidth=(rawState,viewportInnerWidth)=>{const columnsLookup={};let totalFlexUnits=0,widthAllocatedBeforeFlex=0;const flexColumns=[];rawState.orderedFields.forEach((columnField=>{const newColumn=(0,esm_extends.Z)({},rawState.lookup[columnField]);if(!1===rawState.columnVisibilityModel[columnField])newColumn.computedWidth=0;else{let computedWidth;newColumn.flex&&newColumn.flex>0?(totalFlexUnits+=newColumn.flex,computedWidth=0,flexColumns.push(newColumn)):computedWidth=clamp(newColumn.width,newColumn.minWidth,newColumn.maxWidth),widthAllocatedBeforeFlex+=computedWidth,newColumn.computedWidth=computedWidth}columnsLookup[columnField]=newColumn}));const initialFreeSpace=Math.max(viewportInnerWidth-widthAllocatedBeforeFlex,0);if(totalFlexUnits>0&&viewportInnerWidth>0){const computedColumnWidths=function computeFlexColumnsWidth({initialFreeSpace,totalFlexUnits,flexColumns}){const flexColumnsLookup={all:{},frozenFields:[],freeze:field=>{const value=flexColumnsLookup.all[field];value&&!0!==value.frozen&&(flexColumnsLookup.all[field].frozen=!0,flexColumnsLookup.frozenFields.push(field))}};return function loopOverFlexItems(){if(flexColumnsLookup.frozenFields.length===flexColumns.length)return;const violationsLookup={min:{},max:{}};let remainingFreeSpace=initialFreeSpace,flexUnits=totalFlexUnits,totalViolation=0;flexColumnsLookup.frozenFields.forEach((field=>{remainingFreeSpace-=flexColumnsLookup.all[field].computedWidth,flexUnits-=flexColumnsLookup.all[field].flex}));for(let i=0;i<flexColumns.length;i+=1){const column=flexColumns[i];if(flexColumnsLookup.all[column.field]&&!0===flexColumnsLookup.all[column.field].frozen)continue;let computedWidth=remainingFreeSpace/flexUnits*column.flex;computedWidth<column.minWidth?(totalViolation+=column.minWidth-computedWidth,computedWidth=column.minWidth,violationsLookup.min[column.field]=!0):computedWidth>column.maxWidth&&(totalViolation+=column.maxWidth-computedWidth,computedWidth=column.maxWidth,violationsLookup.max[column.field]=!0),flexColumnsLookup.all[column.field]={frozen:!1,computedWidth,flex:column.flex}}totalViolation<0?Object.keys(violationsLookup.max).forEach((field=>{flexColumnsLookup.freeze(field)})):totalViolation>0?Object.keys(violationsLookup.min).forEach((field=>{flexColumnsLookup.freeze(field)})):flexColumns.forEach((({field})=>{flexColumnsLookup.freeze(field)})),loopOverFlexItems()}(),flexColumnsLookup.all}({initialFreeSpace,totalFlexUnits,flexColumns});Object.keys(computedColumnWidths).forEach((field=>{columnsLookup[field].computedWidth=computedColumnWidths[field].computedWidth}))}return(0,esm_extends.Z)({},rawState,{lookup:columnsLookup})},createColumnsState=({apiRef,columnsToUpsert,initialState,columnTypes,columnVisibilityModel=gridColumnVisibilityModelSelector(apiRef),keepOnlyColumnsToUpsert=!1})=>{var _apiRef$current$getRo,_apiRef$current$getRo2,_apiRef$current,_apiRef$current$getRo3;const isInsideStateInitializer=!apiRef.current.state.columns;let columnsState;if(isInsideStateInitializer)columnsState={orderedFields:[],lookup:{},columnVisibilityModel};else{const currentState=gridColumnsStateSelector(apiRef.current.state);columnsState={orderedFields:keepOnlyColumnsToUpsert?[]:[...currentState.orderedFields],lookup:(0,esm_extends.Z)({},currentState.lookup),columnVisibilityModel}}let columnsToKeep={};keepOnlyColumnsToUpsert&&!isInsideStateInitializer&&(columnsToKeep=Object.keys(columnsState.lookup).reduce(((acc,key)=>(0,esm_extends.Z)({},acc,{[key]:!1})),{}));const columnsToUpsertLookup={};columnsToUpsert.forEach((newColumn=>{const{field}=newColumn;columnsToUpsertLookup[field]=!0,columnsToKeep[field]=!0;let existingState=columnsState.lookup[field];if(null==existingState){let colDef=columnTypes.__default__;newColumn.type&&columnTypes[newColumn.type]&&(colDef=columnTypes[newColumn.type]),existingState=(0,esm_extends.Z)({},colDef,{field,hasBeenResized:!1}),columnsState.orderedFields.push(field)}else keepOnlyColumnsToUpsert&&columnsState.orderedFields.push(field);let hasBeenResized=existingState.hasBeenResized;COLUMNS_DIMENSION_PROPERTIES.forEach((key=>{void 0!==newColumn[key]&&(hasBeenResized=!0,-1===newColumn[key]&&(newColumn[key]=1/0))})),columnsState.lookup[field]=(0,esm_extends.Z)({},existingState,newColumn,{hasBeenResized})})),keepOnlyColumnsToUpsert&&!isInsideStateInitializer&&Object.keys(columnsState.lookup).forEach((field=>{columnsToKeep[field]||delete columnsState.lookup[field]}));const columnsStateWithPortableColumns=((columnsState,initialState)=>{if(!initialState)return columnsState;const{orderedFields=[],dimensions={}}=initialState,columnsWithUpdatedDimensions=Object.keys(dimensions);if(0===columnsWithUpdatedDimensions.length&&0===orderedFields.length)return columnsState;const orderedFieldsLookup={},cleanOrderedFields=[];for(let i=0;i<orderedFields.length;i+=1){const field=orderedFields[i];columnsState.lookup[field]&&(orderedFieldsLookup[field]=!0,cleanOrderedFields.push(field))}const newOrderedFields=0===cleanOrderedFields.length?columnsState.orderedFields:[...cleanOrderedFields,...columnsState.orderedFields.filter((field=>!orderedFieldsLookup[field]))],newColumnLookup=(0,esm_extends.Z)({},columnsState.lookup);for(let i=0;i<columnsWithUpdatedDimensions.length;i+=1){const field=columnsWithUpdatedDimensions[i],newColDef=(0,esm_extends.Z)({},newColumnLookup[field],{hasBeenResized:!0});Object.entries(dimensions[field]).forEach((([key,value])=>{newColDef[key]=-1===value?1/0:value})),newColumnLookup[field]=newColDef}return(0,esm_extends.Z)({},columnsState,{orderedFields:newOrderedFields,lookup:newColumnLookup})})(apiRef.current.unstable_applyPipeProcessors("hydrateColumns",columnsState),initialState);return hydrateColumnsWidth(columnsStateWithPortableColumns,null!=(_apiRef$current$getRo=null==(_apiRef$current$getRo2=(_apiRef$current=apiRef.current).getRootDimensions)||null==(_apiRef$current$getRo3=_apiRef$current$getRo2.call(_apiRef$current))?void 0:_apiRef$current$getRo3.viewportInnerSize.width)?_apiRef$current$getRo:0)},mergeColumnsState=columnsState=>state=>(0,esm_extends.Z)({},state,{columns:columnsState});function getFirstNonSpannedColumnToRender({firstColumnToRender,apiRef,firstRowToRender,lastRowToRender,visibleRows}){let firstNonSpannedColumnToRender=firstColumnToRender;for(let i=firstRowToRender;i<lastRowToRender;i+=1){if(visibleRows[i]){const rowId=visibleRows[i].id,cellColSpanInfo=apiRef.current.unstable_getCellColSpanInfo(rowId,firstColumnToRender);cellColSpanInfo&&cellColSpanInfo.spannedByColSpan&&(firstNonSpannedColumnToRender=cellColSpanInfo.leftVisibleCellIndex)}}return firstNonSpannedColumnToRender}function getFirstColumnIndexToRender({firstColumnIndex,minColumnIndex,columnBuffer,firstRowToRender,lastRowToRender,apiRef,visibleRows}){return getFirstNonSpannedColumnToRender({firstColumnToRender:Math.max(firstColumnIndex-columnBuffer,minColumnIndex),apiRef,firstRowToRender,lastRowToRender,visibleRows})}function getTotalHeaderHeight(apiRef,headerHeight){const densityFactor=gridDensityFactorSelector(apiRef),maxDepth=gridColumnGroupsHeaderMaxDepthSelector(apiRef);return Math.floor(headerHeight*densityFactor)*((null!=maxDepth?maxDepth:0)+1)}var GridPreferencePanelsValue=function(GridPreferencePanelsValue){return GridPreferencePanelsValue.filters="filters",GridPreferencePanelsValue.columns="columns",GridPreferencePanelsValue}(GridPreferencePanelsValue||{});const defaultColumnTypes={string:GRID_STRING_COL_DEF,number:GRID_NUMERIC_COL_DEF,date:GRID_DATE_COL_DEF,dateTime:GRID_DATETIME_COL_DEF,boolean:GRID_BOOLEAN_COL_DEF,singleSelect:GRID_SINGLE_SELECT_COL_DEF,actions:GRID_ACTIONS_COL_DEF,__default__:GRID_STRING_COL_DEF},columnsStateInitializer=(state,props,apiRef)=>{var _props$initialState,_ref,_props$columnVisibili,_props$initialState2,_props$initialState2$;const columnsState=createColumnsState({apiRef,columnTypes:defaultColumnTypes,columnsToUpsert:props.columns,initialState:null==(_props$initialState=props.initialState)?void 0:_props$initialState.columns,columnVisibilityModel:null!=(_ref=null!=(_props$columnVisibili=props.columnVisibilityModel)?_props$columnVisibili:null==(_props$initialState2=props.initialState)||null==(_props$initialState2$=_props$initialState2.columns)?void 0:_props$initialState2$.columnVisibilityModel)?_ref:{},keepOnlyColumnsToUpsert:!0});return(0,esm_extends.Z)({},state,{columns:columnsState})};const rowsStateInitializer=(state,props,apiRef)=>(apiRef.current.caches.rows=createRowsInternalCache({rows:props.rows,getRowId:props.getRowId,loading:props.loading,rowCount:props.rowCount}),(0,esm_extends.Z)({},state,{rows:getRowsStateFromCache({apiRef,rowCountProp:props.rowCount,loadingProp:props.loading,previousTree:null,previousTreeDepths:null})})),useGridRows=(apiRef,props)=>{const logger=useGridLogger(apiRef,"useGridRows"),currentPage=useGridVisibleRows(apiRef,props),lastUpdateMs=react.useRef(Date.now()),timeout=react.useRef(null),getRow=react.useCallback((id=>{const model=gridRowsLookupSelector(apiRef)[id];if(model)return model;const node=apiRef.current.getRowNode(id);return node&&isAutoGeneratedRow(node)?{}:null}),[apiRef]),lookup=react.useMemo((()=>currentPage.rows.reduce(((acc,{id},index)=>(acc[id]=index,acc)),{})),[currentPage.rows]),throttledRowsChange=react.useCallback((({cache,throttle})=>{const run=()=>{timeout.current=null,lastUpdateMs.current=Date.now(),apiRef.current.setState((state=>(0,esm_extends.Z)({},state,{rows:getRowsStateFromCache({apiRef,rowCountProp:props.rowCount,loadingProp:props.loading,previousTree:gridRowTreeSelector(apiRef),previousTreeDepths:gridRowTreeDepthsSelector(apiRef)})}))),apiRef.current.publishEvent("rowsSet"),apiRef.current.forceUpdate()};if(timeout.current&&(clearTimeout(timeout.current),timeout.current=null),apiRef.current.caches.rows=cache,!throttle)return void run();const throttleRemainingTimeMs=props.throttleRowsMs-(Date.now()-lastUpdateMs.current);throttleRemainingTimeMs>0?timeout.current=setTimeout(run,throttleRemainingTimeMs):run()}),[props.throttleRowsMs,props.rowCount,props.loading,apiRef]),setRows=react.useCallback((rows=>{logger.debug(`Updating all rows, new length ${rows.length}`);const cache=createRowsInternalCache({rows,getRowId:props.getRowId,loading:props.loading,rowCount:props.rowCount}),prevCache=apiRef.current.caches.rows;cache.rowsBeforePartialUpdates=prevCache.rowsBeforePartialUpdates,throttledRowsChange({cache,throttle:!0})}),[logger,props.getRowId,props.loading,props.rowCount,throttledRowsChange,apiRef]),updateRows=react.useCallback((updates=>{if(props.signature===GridSignature.DataGrid&&updates.length>1)throw new Error(["MUI: You can't update several rows at once in `apiRef.current.updateRows` on the DataGrid.","You need to upgrade to DataGridPro or DataGridPremium component to unlock this feature."].join("\n"));const nonPinnedRowsUpdates=[];updates.forEach((update=>{const id=getRowIdFromRowModel(update,props.getRowId,"A row was provided without id when calling updateRows():"),rowNode=apiRef.current.getRowNode(id);if("pinnedRow"===(null==rowNode?void 0:rowNode.type)){const pinnedRowsCache=apiRef.current.caches.pinnedRows,prevModel=pinnedRowsCache.idLookup[id];prevModel&&(pinnedRowsCache.idLookup[id]=(0,esm_extends.Z)({},prevModel,update))}else nonPinnedRowsUpdates.push(update)}));const cache=(({previousCache,getRowId,updates})=>{var _previousCache$update,_previousCache$update2,_previousCache$update3;if("full"===previousCache.updates.type)throw new Error("MUI: Unable to prepare a partial update if a full update is not applied yet");const uniqueUpdates=new Map;updates.forEach((update=>{const id=getRowIdFromRowModel(update,getRowId,"A row was provided without id when calling updateRows():");uniqueUpdates.has(id)?uniqueUpdates.set(id,(0,esm_extends.Z)({},uniqueUpdates.get(id),update)):uniqueUpdates.set(id,update)}));const partialUpdates={type:"partial",actions:{insert:[...null!=(_previousCache$update=previousCache.updates.actions.insert)?_previousCache$update:[]],modify:[...null!=(_previousCache$update2=previousCache.updates.actions.modify)?_previousCache$update2:[]],remove:[...null!=(_previousCache$update3=previousCache.updates.actions.remove)?_previousCache$update3:[]]},idToActionLookup:(0,esm_extends.Z)({},previousCache.updates.idToActionLookup)},dataRowIdToModelLookup=(0,esm_extends.Z)({},previousCache.dataRowIdToModelLookup),dataRowIdToIdLookup=(0,esm_extends.Z)({},previousCache.dataRowIdToIdLookup),alreadyAppliedActionsToRemove={insert:{},modify:{},remove:{}};uniqueUpdates.forEach(((partialRow,id)=>{const actionAlreadyAppliedToRow=partialUpdates.idToActionLookup[id];if("delete"===partialRow._action){if("remove"===actionAlreadyAppliedToRow||!dataRowIdToModelLookup[id])return;return null!=actionAlreadyAppliedToRow&&(alreadyAppliedActionsToRemove[actionAlreadyAppliedToRow][id]=!0),partialUpdates.actions.remove.push(id),delete dataRowIdToModelLookup[id],void delete dataRowIdToIdLookup[id]}const oldRow=dataRowIdToModelLookup[id];if(oldRow)return"remove"===actionAlreadyAppliedToRow?(alreadyAppliedActionsToRemove.remove[id]=!0,partialUpdates.actions.modify.push(id)):null==actionAlreadyAppliedToRow&&partialUpdates.actions.modify.push(id),void(dataRowIdToModelLookup[id]=(0,esm_extends.Z)({},oldRow,partialRow));"remove"===actionAlreadyAppliedToRow?(alreadyAppliedActionsToRemove.remove[id]=!0,partialUpdates.actions.insert.push(id)):null==actionAlreadyAppliedToRow&&partialUpdates.actions.insert.push(id),dataRowIdToModelLookup[id]=partialRow,dataRowIdToIdLookup[id]=id}));const actionTypeWithActionsToRemove=Object.keys(alreadyAppliedActionsToRemove);for(let i=0;i<actionTypeWithActionsToRemove.length;i+=1){const actionType=actionTypeWithActionsToRemove[i],idsToRemove=alreadyAppliedActionsToRemove[actionType];Object.keys(idsToRemove).length>0&&(partialUpdates.actions[actionType]=partialUpdates.actions[actionType].filter((id=>!idsToRemove[id])))}return{dataRowIdToModelLookup,dataRowIdToIdLookup,updates:partialUpdates,rowsBeforePartialUpdates:previousCache.rowsBeforePartialUpdates,loadingPropBeforePartialUpdates:previousCache.loadingPropBeforePartialUpdates,rowCountPropBeforePartialUpdates:previousCache.rowCountPropBeforePartialUpdates}})({updates:nonPinnedRowsUpdates,getRowId:props.getRowId,previousCache:apiRef.current.caches.rows});throttledRowsChange({cache,throttle:!0})}),[props.signature,props.getRowId,throttledRowsChange,apiRef]),getRowModels=react.useCallback((()=>{const dataRows=gridDataRowIdsSelector(apiRef),idRowsLookup=gridRowsLookupSelector(apiRef);return new Map(dataRows.map((id=>{var _idRowsLookup$id;return[id,null!=(_idRowsLookup$id=idRowsLookup[id])?_idRowsLookup$id:{}]})))}),[apiRef]),getRowsCount=react.useCallback((()=>gridRowCountSelector(apiRef)),[apiRef]),getAllRowIds=react.useCallback((()=>gridDataRowIdsSelector(apiRef)),[apiRef]),getRowIndexRelativeToVisibleRows=react.useCallback((id=>lookup[id]),[lookup]),setRowChildrenExpansion=react.useCallback(((id,isExpanded)=>{const currentNode=apiRef.current.getRowNode(id);if(!currentNode)throw new Error(`MUI: No row with id #${id} found`);if("group"!==currentNode.type)throw new Error("MUI: Only group nodes can be expanded or collapsed");const newNode=(0,esm_extends.Z)({},currentNode,{childrenExpanded:isExpanded});apiRef.current.setState((state=>(0,esm_extends.Z)({},state,{rows:(0,esm_extends.Z)({},state.rows,{tree:(0,esm_extends.Z)({},state.rows.tree,{[id]:newNode})})}))),apiRef.current.forceUpdate(),apiRef.current.publishEvent("rowExpansionChange",newNode)}),[apiRef]),getRowNode=react.useCallback((id=>{var _ref;return null!=(_ref=gridRowTreeSelector(apiRef)[id])?_ref:null}),[apiRef]),getRowGroupChildren=react.useCallback((({skipAutoGeneratedRows=!0,groupId,applySorting,applyFiltering})=>{const tree=gridRowTreeSelector(apiRef);let children;if(applySorting){const groupNode=tree[groupId];if(!groupNode)return[];const sortedRowIds=gridSortedRowIdsSelector(apiRef);children=[];for(let index=sortedRowIds.findIndex((id=>id===groupId))+1;index<sortedRowIds.length&&tree[sortedRowIds[index]].depth>groupNode.depth;index+=1){const id=sortedRowIds[index];skipAutoGeneratedRows&&isAutoGeneratedRow(tree[id])||children.push(id)}}else children=getTreeNodeDescendants(tree,groupId,skipAutoGeneratedRows);if(applyFiltering){const filteredRowsLookup=gridFilteredRowsLookupSelector(apiRef);children=children.filter((childId=>!1!==filteredRowsLookup[childId]))}return children}),[apiRef]),setRowIndex=react.useCallback(((rowId,targetIndex)=>{const node=apiRef.current.getRowNode(rowId);if(!node)throw new Error(`MUI: No row with id #${rowId} found`);if(node.parent!==GRID_ROOT_GROUP_ID)throw new Error("MUI: The row reordering do not support reordering of grouped rows yet");if("leaf"!==node.type)throw new Error("MUI: The row reordering do not support reordering of footer or grouping rows");apiRef.current.setState((state=>{const group=gridRowTreeSelector(state,apiRef.current.instanceId)[GRID_ROOT_GROUP_ID],allRows=group.children,oldIndex=allRows.findIndex((row=>row===rowId));if(-1===oldIndex||oldIndex===targetIndex)return state;logger.debug(`Moving row ${rowId} to index ${targetIndex}`);const updatedRows=[...allRows];return updatedRows.splice(targetIndex,0,updatedRows.splice(oldIndex,1)[0]),(0,esm_extends.Z)({},state,{rows:(0,esm_extends.Z)({},state.rows,{tree:(0,esm_extends.Z)({},state.rows.tree,{[GRID_ROOT_GROUP_ID]:(0,esm_extends.Z)({},group,{children:updatedRows})})})})})),apiRef.current.publishEvent("rowsSet")}),[apiRef,logger]),replaceRows=react.useCallback(((firstRowToRender,newRows)=>{if(props.signature===GridSignature.DataGrid&&newRows.length>1)throw new Error(["MUI: You can't replace rows using `apiRef.current.unstable_replaceRows` on the DataGrid.","You need to upgrade to DataGridPro or DataGridPremium component to unlock this feature."].join("\n"));if(0===newRows.length)return;if(gridRowMaximumTreeDepthSelector(apiRef)>1)throw new Error("`apiRef.current.unstable_replaceRows` is not compatible with tree data and row grouping");const tree=(0,esm_extends.Z)({},gridRowTreeSelector(apiRef)),dataRowIdToModelLookup=(0,esm_extends.Z)({},gridRowsLookupSelector(apiRef)),dataRowIdToIdLookup=(0,esm_extends.Z)({},gridRowsDataRowIdToIdLookupSelector(apiRef)),rootGroup=tree[GRID_ROOT_GROUP_ID],rootGroupChildren=[...rootGroup.children];for(let i=0;i<newRows.length;i+=1){const rowModel=newRows[i],rowId=getRowIdFromRowModel(rowModel,props.getRowId,"A row was provided without id when calling replaceRows()."),[replacedRowId]=rootGroupChildren.splice(firstRowToRender+i,1,rowId);delete dataRowIdToModelLookup[replacedRowId],delete dataRowIdToIdLookup[replacedRowId],delete tree[replacedRowId];const rowTreeNodeConfig={id:rowId,depth:0,parent:GRID_ROOT_GROUP_ID,type:"leaf",groupingKey:null};dataRowIdToModelLookup[rowId]=rowModel,dataRowIdToIdLookup[rowId]=rowId,tree[rowId]=rowTreeNodeConfig}tree[GRID_ROOT_GROUP_ID]=(0,esm_extends.Z)({},rootGroup,{children:rootGroupChildren});const dataRowIds=rootGroupChildren.filter((childId=>"leaf"===tree[childId].type));apiRef.current.caches.rows.dataRowIdToModelLookup=dataRowIdToModelLookup,apiRef.current.caches.rows.dataRowIdToIdLookup=dataRowIdToIdLookup,apiRef.current.setState((state=>(0,esm_extends.Z)({},state,{rows:(0,esm_extends.Z)({},state.rows,{dataRowIdToModelLookup,dataRowIdToIdLookup,dataRowIds,tree})}))),apiRef.current.publishEvent("rowsSet")}),[apiRef,props.signature,props.getRowId]),rowApi={getRow,getRowModels,getRowsCount,getAllRowIds,setRows,updateRows,getRowNode,getRowIndexRelativeToVisibleRows,unstable_replaceRows:replaceRows},rowProApi={setRowIndex,setRowChildrenExpansion,getRowGroupChildren},groupRows=react.useCallback((()=>{let cache;logger.info("Row grouping pre-processing have changed, regenerating the row tree"),cache=apiRef.current.caches.rows.rowsBeforePartialUpdates===props.rows?(0,esm_extends.Z)({},apiRef.current.caches.rows,{updates:{type:"full",rows:gridDataRowIdsSelector(apiRef)}}):createRowsInternalCache({rows:props.rows,getRowId:props.getRowId,loading:props.loading,rowCount:props.rowCount}),throttledRowsChange({cache,throttle:!1})}),[logger,apiRef,props.rows,props.getRowId,props.loading,props.rowCount,throttledRowsChange]),handleStrategyProcessorChange=react.useCallback((methodName=>{"rowTreeCreation"===methodName&&groupRows()}),[groupRows]),handleStrategyActivityChange=react.useCallback((()=>{apiRef.current.getActiveStrategy("rowTree")!==gridRowGroupingNameSelector(apiRef)&&groupRows()}),[apiRef,groupRows]);useGridApiEventHandler(apiRef,"activeStrategyProcessorChange",handleStrategyProcessorChange),useGridApiEventHandler(apiRef,"strategyAvailabilityChange",handleStrategyActivityChange);const applyHydrateRowsProcessor=react.useCallback((()=>{apiRef.current.setState((state=>{const response=apiRef.current.unstable_applyPipeProcessors("hydrateRows",{tree:gridRowTreeSelector(state,apiRef.current.instanceId),treeDepths:gridRowTreeDepthsSelector(state,apiRef.current.instanceId),dataRowIds:gridDataRowIdsSelector(state,apiRef.current.instanceId),dataRowIdToModelLookup:gridRowsLookupSelector(state,apiRef.current.instanceId),dataRowIdToIdLookup:gridRowsDataRowIdToIdLookupSelector(state,apiRef.current.instanceId)});return(0,esm_extends.Z)({},state,{rows:(0,esm_extends.Z)({},state.rows,response,{totalTopLevelRowCount:getTopLevelRowCount({tree:response.tree,rowCountProp:props.rowCount})})})})),apiRef.current.publishEvent("rowsSet"),apiRef.current.forceUpdate()}),[apiRef,props.rowCount]);useGridRegisterPipeApplier(apiRef,"hydrateRows",applyHydrateRowsProcessor),useGridApiMethod(apiRef,rowApi,"public"),useGridApiMethod(apiRef,rowProApi,props.signature===GridSignature.DataGrid?"private":"public"),react.useEffect((()=>()=>{null!==timeout.current&&clearTimeout(timeout.current)}),[]);const isFirstRender=react.useRef(!0);react.useEffect((()=>{if(isFirstRender.current)return void(isFirstRender.current=!1);const areNewRowsAlreadyInState=apiRef.current.caches.rows.rowsBeforePartialUpdates===props.rows,isNewLoadingAlreadyInState=apiRef.current.caches.rows.loadingPropBeforePartialUpdates===props.loading,isNewRowCountAlreadyInState=apiRef.current.caches.rows.rowCountPropBeforePartialUpdates===props.rowCount;if(areNewRowsAlreadyInState)return isNewLoadingAlreadyInState||(apiRef.current.setState((state=>(0,esm_extends.Z)({},state,{rows:(0,esm_extends.Z)({},state.rows,{loading:props.loading})}))),apiRef.current.caches.rows.loadingPropBeforePartialUpdates=props.loading,apiRef.current.forceUpdate()),void(isNewRowCountAlreadyInState||(apiRef.current.setState((state=>(0,esm_extends.Z)({},state,{rows:(0,esm_extends.Z)({},state.rows,{totalRowCount:Math.max(props.rowCount||0,state.rows.totalRowCount),totalTopLevelRowCount:Math.max(props.rowCount||0,state.rows.totalTopLevelRowCount)})}))),apiRef.current.caches.rows.rowCountPropBeforePartialUpdates=props.rowCount,apiRef.current.forceUpdate()));logger.debug(`Updating all rows, new length ${props.rows.length}`),throttledRowsChange({cache:createRowsInternalCache({rows:props.rows,getRowId:props.getRowId,loading:props.loading,rowCount:props.rowCount}),throttle:!1})}),[props.rows,props.rowCount,props.getRowId,props.loading,logger,throttledRowsChange,apiRef])};var useEventCallback=__webpack_require__("./node_modules/@mui/utils/esm/useEventCallback/useEventCallback.js");const gridEditRowsStateSelector=state=>state.editRows,useGridCellEditing_excluded=["id","field"],useGridCellEditing_excluded2=["id","field"],missingOnProcessRowUpdateErrorWarning=buildWarning(["MUI: A call to `processRowUpdate` threw an error which was not handled because `onProcessRowUpdateError` is missing.","To handle the error pass a callback to the `onProcessRowUpdateError` prop, e.g. `<DataGrid onProcessRowUpdateError={(error) => ...} />`.","For more detail, see http://mui.com/components/data-grid/editing/#persistence."],"error");var GridRowEditStartReasons=function(GridRowEditStartReasons){return GridRowEditStartReasons.enterKeyDown="enterKeyDown",GridRowEditStartReasons.cellDoubleClick="cellDoubleClick",GridRowEditStartReasons.printableKeyDown="printableKeyDown",GridRowEditStartReasons.deleteKeyDown="deleteKeyDown",GridRowEditStartReasons}(GridRowEditStartReasons||{}),GridRowEditStopReasons=function(GridRowEditStopReasons){return GridRowEditStopReasons.rowFocusOut="rowFocusOut",GridRowEditStopReasons.escapeKeyDown="escapeKeyDown",GridRowEditStopReasons.enterKeyDown="enterKeyDown",GridRowEditStopReasons.tabKeyDown="tabKeyDown",GridRowEditStopReasons.shiftTabKeyDown="shiftTabKeyDown",GridRowEditStopReasons}(GridRowEditStopReasons||{});const useGridRowEditing_excluded=["id"],useGridRowEditing_excluded2=["id"],useGridRowEditing_missingOnProcessRowUpdateErrorWarning=buildWarning(["MUI: A call to `processRowUpdate` threw an error which was not handled because `onProcessRowUpdateError` is missing.","To handle the error pass a callback to the `onProcessRowUpdateError` prop, e.g. `<DataGrid onProcessRowUpdateError={(error) => ...} />`.","For more detail, see http://mui.com/components/data-grid/editing/#persistence."],"error"),editingStateInitializer=state=>(0,esm_extends.Z)({},state,{editRows:{}}),useGridEditing=(apiRef,props)=>{((apiRef,props)=>{const[cellModesModel,setCellModesModel]=react.useState({}),cellModesModelRef=react.useRef(cellModesModel),prevCellModesModel=react.useRef({}),{processRowUpdate,onProcessRowUpdateError,cellModesModel:cellModesModelProp,onCellModesModelChange}=props,runIfEditModeIsCell=callback=>(...args)=>{props.editMode===GridEditModes.Cell&&callback(...args)},throwIfNotEditable=react.useCallback(((id,field)=>{const params=apiRef.current.getCellParams(id,field);if(!apiRef.current.isCellEditable(params))throw new Error(`MUI: The cell with id=${id} and field=${field} is not editable.`)}),[apiRef]),throwIfNotInMode=react.useCallback(((id,field,mode)=>{if(apiRef.current.getCellMode(id,field)!==mode)throw new Error(`MUI: The cell with id=${id} and field=${field} is not in ${mode} mode.`)}),[apiRef]),handleCellDoubleClick=react.useCallback(((params,event)=>{if(!params.isEditable)return;if(params.cellMode===GridCellModes.Edit)return;const newParams=(0,esm_extends.Z)({},params,{reason:GridCellEditStartReasons.cellDoubleClick});apiRef.current.publishEvent("cellEditStart",newParams,event)}),[apiRef]),handleCellFocusOut=react.useCallback(((params,event)=>{if(params.cellMode===GridCellModes.View)return;if(apiRef.current.getCellMode(params.id,params.field)===GridCellModes.View)return;const newParams=(0,esm_extends.Z)({},params,{reason:GridCellEditStopReasons.cellFocusOut});apiRef.current.publishEvent("cellEditStop",newParams,event)}),[apiRef]),handleCellKeyDown=react.useCallback(((params,event)=>{if(params.cellMode===GridCellModes.Edit){if(229===event.which)return;let reason;if("Escape"===event.key?reason=GridCellEditStopReasons.escapeKeyDown:"Enter"===event.key?reason=GridCellEditStopReasons.enterKeyDown:"Tab"===event.key&&(reason=event.shiftKey?GridCellEditStopReasons.shiftTabKeyDown:GridCellEditStopReasons.tabKeyDown,event.preventDefault()),reason){const newParams=(0,esm_extends.Z)({},params,{reason});apiRef.current.publishEvent("cellEditStop",newParams,event)}}else if(params.isEditable){let reason;if(!apiRef.current.unstable_applyPipeProcessors("canStartEditing",!0,{event,cellParams:params,editMode:"cell"}))return;if(isPrintableKey(event)||(event.ctrlKey||event.metaKey)&&"v"===event.key?reason=GridCellEditStartReasons.printableKeyDown:"Enter"===event.key?reason=GridCellEditStartReasons.enterKeyDown:"Delete"!==event.key&&"Backspace"!==event.key||(reason=GridCellEditStartReasons.deleteKeyDown),reason){const newParams=(0,esm_extends.Z)({},params,{reason,key:event.key});apiRef.current.publishEvent("cellEditStart",newParams,event)}}}),[apiRef]),handleCellEditStart=react.useCallback((params=>{const{id,field,reason,key}=params,startCellEditModeParams={id,field};reason===GridCellEditStartReasons.printableKeyDown?react.version.startsWith("17")?startCellEditModeParams.deleteValue=!0:startCellEditModeParams.initialValue=key:reason===GridCellEditStartReasons.deleteKeyDown&&(startCellEditModeParams.deleteValue=!0),apiRef.current.startCellEditMode(startCellEditModeParams)}),[apiRef]),handleCellEditStop=react.useCallback((params=>{const{id,field,reason}=params;let cellToFocusAfter;apiRef.current.runPendingEditCellValueMutation(id,field),reason===GridCellEditStopReasons.enterKeyDown?cellToFocusAfter="below":reason===GridCellEditStopReasons.tabKeyDown?cellToFocusAfter="right":reason===GridCellEditStopReasons.shiftTabKeyDown&&(cellToFocusAfter="left");const ignoreModifications="escapeKeyDown"===reason;apiRef.current.stopCellEditMode({id,field,ignoreModifications,cellToFocusAfter})}),[apiRef]);useGridApiEventHandler(apiRef,"cellDoubleClick",runIfEditModeIsCell(handleCellDoubleClick)),useGridApiEventHandler(apiRef,"cellFocusOut",runIfEditModeIsCell(handleCellFocusOut)),useGridApiEventHandler(apiRef,"cellKeyDown",runIfEditModeIsCell(handleCellKeyDown)),useGridApiEventHandler(apiRef,"cellEditStart",runIfEditModeIsCell(handleCellEditStart)),useGridApiEventHandler(apiRef,"cellEditStop",runIfEditModeIsCell(handleCellEditStop)),useGridApiOptionHandler(apiRef,"cellEditStart",props.onCellEditStart),useGridApiOptionHandler(apiRef,"cellEditStop",props.onCellEditStop);const getCellMode=react.useCallback(((id,field)=>{const editingState=gridEditRowsStateSelector(apiRef.current.state);return editingState[id]&&editingState[id][field]?GridCellModes.Edit:GridCellModes.View}),[apiRef]),updateCellModesModel=(0,useEventCallback.Z)((newModel=>{const isNewModelDifferentFromProp=newModel!==props.cellModesModel;onCellModesModelChange&&isNewModelDifferentFromProp&&onCellModesModelChange(newModel,{}),props.cellModesModel&&isNewModelDifferentFromProp||(setCellModesModel(newModel),cellModesModelRef.current=newModel,apiRef.current.publishEvent("cellModesModelChange",newModel))})),updateFieldInCellModesModel=react.useCallback(((id,field,newProps)=>{const newModel=(0,esm_extends.Z)({},cellModesModelRef.current);if(null!==newProps)newModel[id]=(0,esm_extends.Z)({},newModel[id],{[field]:(0,esm_extends.Z)({},newProps)});else{const _newModel$id=newModel[id],otherFields=(0,objectWithoutPropertiesLoose.Z)(_newModel$id,[field].map(toPropertyKey.Z));newModel[id]=otherFields,0===Object.keys(newModel[id]).length&&delete newModel[id]}updateCellModesModel(newModel)}),[updateCellModesModel]),updateOrDeleteFieldState=react.useCallback(((id,field,newProps)=>{apiRef.current.setState((state=>{const newEditingState=(0,esm_extends.Z)({},state.editRows);return null!==newProps?newEditingState[id]=(0,esm_extends.Z)({},newEditingState[id],{[field]:(0,esm_extends.Z)({},newProps)}):(delete newEditingState[id][field],0===Object.keys(newEditingState[id]).length&&delete newEditingState[id]),(0,esm_extends.Z)({},state,{editRows:newEditingState})})),apiRef.current.forceUpdate()}),[apiRef]),startCellEditMode=react.useCallback((params=>{const{id,field}=params,other=(0,objectWithoutPropertiesLoose.Z)(params,useGridCellEditing_excluded);throwIfNotEditable(id,field),throwIfNotInMode(id,field,GridCellModes.View),updateFieldInCellModesModel(id,field,(0,esm_extends.Z)({mode:GridCellModes.Edit},other))}),[throwIfNotEditable,throwIfNotInMode,updateFieldInCellModesModel]),updateStateToStartCellEditMode=(0,useEventCallback.Z)((params=>{const{id,field,deleteValue,initialValue}=params;let newValue=apiRef.current.getCellValue(id,field),unstable_updateValueOnRender=!1;(deleteValue||initialValue)&&(newValue=deleteValue?"":initialValue,unstable_updateValueOnRender=!0),updateOrDeleteFieldState(id,field,{value:newValue,error:!1,isProcessingProps:!1,unstable_updateValueOnRender}),apiRef.current.setCellFocus(id,field)})),stopCellEditMode=react.useCallback((params=>{const{id,field}=params,other=(0,objectWithoutPropertiesLoose.Z)(params,useGridCellEditing_excluded2);throwIfNotInMode(id,field,GridCellModes.Edit),updateFieldInCellModesModel(id,field,(0,esm_extends.Z)({mode:GridCellModes.View},other))}),[throwIfNotInMode,updateFieldInCellModesModel]),updateStateToStopCellEditMode=(0,useEventCallback.Z)((async params=>{const{id,field,ignoreModifications,cellToFocusAfter="none"}=params;throwIfNotInMode(id,field,GridCellModes.Edit),apiRef.current.runPendingEditCellValueMutation(id,field);const finishCellEditMode=()=>{updateOrDeleteFieldState(id,field,null),updateFieldInCellModesModel(id,field,null),"none"!==cellToFocusAfter&&apiRef.current.moveFocusToRelativeCell(id,field,cellToFocusAfter)};if(ignoreModifications)return void finishCellEditMode();const editingState=gridEditRowsStateSelector(apiRef.current.state),{error,isProcessingProps}=editingState[id][field];if(error||isProcessingProps)return prevCellModesModel.current[id][field].mode=GridCellModes.Edit,void updateFieldInCellModesModel(id,field,{mode:GridCellModes.Edit});const rowUpdate=apiRef.current.getRowWithUpdatedValuesFromCellEditing(id,field);if(processRowUpdate){const handleError=errorThrown=>{prevCellModesModel.current[id][field].mode=GridCellModes.Edit,updateFieldInCellModesModel(id,field,{mode:GridCellModes.Edit}),onProcessRowUpdateError?onProcessRowUpdateError(errorThrown):missingOnProcessRowUpdateErrorWarning()};try{const row=apiRef.current.getRow(id);Promise.resolve(processRowUpdate(rowUpdate,row)).then((finalRowUpdate=>{apiRef.current.updateRows([finalRowUpdate]),finishCellEditMode()})).catch(handleError)}catch(errorThrown){handleError(errorThrown)}}else apiRef.current.updateRows([rowUpdate]),finishCellEditMode()})),editingPrivateApi={setCellEditingEditCellValue:react.useCallback((async params=>{var _editingState$id,_editingState$id$fiel;const{id,field,value,debounceMs,unstable_skipValueParser:skipValueParser}=params;throwIfNotEditable(id,field),throwIfNotInMode(id,field,GridCellModes.Edit);const column=apiRef.current.getColumn(field),row=apiRef.current.getRow(id);let parsedValue=value;column.valueParser&&!skipValueParser&&(parsedValue=column.valueParser(value,apiRef.current.getCellParams(id,field)));let editingState=gridEditRowsStateSelector(apiRef.current.state),newProps=(0,esm_extends.Z)({},editingState[id][field],{value:parsedValue,changeReason:debounceMs?"debouncedSetEditCellValue":"setEditCellValue"});if(column.preProcessEditCellProps){const hasChanged=value!==editingState[id][field].value;newProps=(0,esm_extends.Z)({},newProps,{isProcessingProps:!0}),updateOrDeleteFieldState(id,field,newProps),newProps=await Promise.resolve(column.preProcessEditCellProps({id,row,props:newProps,hasChanged}))}return apiRef.current.getCellMode(id,field)!==GridCellModes.View&&(editingState=gridEditRowsStateSelector(apiRef.current.state),newProps=(0,esm_extends.Z)({},newProps,{isProcessingProps:!1}),newProps.value=column.preProcessEditCellProps?editingState[id][field].value:parsedValue,updateOrDeleteFieldState(id,field,newProps),editingState=gridEditRowsStateSelector(apiRef.current.state),!(null!=(_editingState$id=editingState[id])&&null!=(_editingState$id$fiel=_editingState$id[field])&&_editingState$id$fiel.error))}),[apiRef,throwIfNotEditable,throwIfNotInMode,updateOrDeleteFieldState]),getRowWithUpdatedValuesFromCellEditing:react.useCallback(((id,field)=>{const column=apiRef.current.getColumn(field),editingState=gridEditRowsStateSelector(apiRef.current.state),row=apiRef.current.getRow(id);if(!editingState[id]||!editingState[id][field])return apiRef.current.getRow(id);const{value}=editingState[id][field];return column.valueSetter?column.valueSetter({value,row}):(0,esm_extends.Z)({},row,{[field]:value})}),[apiRef])};useGridApiMethod(apiRef,{getCellMode,startCellEditMode,stopCellEditMode},"public"),useGridApiMethod(apiRef,editingPrivateApi,"private"),react.useEffect((()=>{cellModesModelProp&&updateCellModesModel(cellModesModelProp)}),[cellModesModelProp,updateCellModesModel]),react.useEffect((()=>{const idToIdLookup=gridRowsDataRowIdToIdLookupSelector(apiRef),copyOfPrevCellModes=prevCellModesModel.current;prevCellModesModel.current=deepClone(cellModesModel),Object.entries(cellModesModel).forEach((([id,fields])=>{Object.entries(fields).forEach((([field,params])=>{var _copyOfPrevCellModes$,_copyOfPrevCellModes$2,_idToIdLookup$id;const prevMode=(null==(_copyOfPrevCellModes$=copyOfPrevCellModes[id])||null==(_copyOfPrevCellModes$2=_copyOfPrevCellModes$[field])?void 0:_copyOfPrevCellModes$2.mode)||GridCellModes.View,originalId=null!=(_idToIdLookup$id=idToIdLookup[id])?_idToIdLookup$id:id;params.mode===GridCellModes.Edit&&prevMode===GridCellModes.View?updateStateToStartCellEditMode((0,esm_extends.Z)({id:originalId,field},params)):params.mode===GridCellModes.View&&prevMode===GridCellModes.Edit&&updateStateToStopCellEditMode((0,esm_extends.Z)({id:originalId,field},params))}))}))}),[apiRef,cellModesModel,updateStateToStartCellEditMode,updateStateToStopCellEditMode])})(apiRef,props),((apiRef,props)=>{const[rowModesModel,setRowModesModel]=react.useState({}),rowModesModelRef=react.useRef(rowModesModel),prevRowModesModel=react.useRef({}),focusTimeout=react.useRef(null),nextFocusedCell=react.useRef(null),{processRowUpdate,onProcessRowUpdateError,rowModesModel:rowModesModelProp,onRowModesModelChange}=props,runIfEditModeIsRow=callback=>(...args)=>{props.editMode===GridEditModes.Row&&callback(...args)},throwIfNotEditable=react.useCallback(((id,field)=>{const params=apiRef.current.getCellParams(id,field);if(!apiRef.current.isCellEditable(params))throw new Error(`MUI: The cell with id=${id} and field=${field} is not editable.`)}),[apiRef]),throwIfNotInMode=react.useCallback(((id,mode)=>{if(apiRef.current.getRowMode(id)!==mode)throw new Error(`MUI: The row with id=${id} is not in ${mode} mode.`)}),[apiRef]),handleCellDoubleClick=react.useCallback(((params,event)=>{if(!params.isEditable)return;if(apiRef.current.getRowMode(params.id)===GridRowModes.Edit)return;const rowParams=apiRef.current.getRowParams(params.id),newParams=(0,esm_extends.Z)({},rowParams,{field:params.field,reason:GridRowEditStartReasons.cellDoubleClick});apiRef.current.publishEvent("rowEditStart",newParams,event)}),[apiRef]),handleCellFocusIn=react.useCallback((params=>{nextFocusedCell.current=params}),[]),handleCellFocusOut=react.useCallback(((params,event)=>{params.isEditable&&apiRef.current.getRowMode(params.id)!==GridRowModes.View&&(nextFocusedCell.current=null,focusTimeout.current=setTimeout((()=>{var _nextFocusedCell$curr;if(focusTimeout.current=null,(null==(_nextFocusedCell$curr=nextFocusedCell.current)?void 0:_nextFocusedCell$curr.id)!==params.id){if(!apiRef.current.getRow(params.id))return;if(apiRef.current.getRowMode(params.id)===GridRowModes.View)return;const rowParams=apiRef.current.getRowParams(params.id),newParams=(0,esm_extends.Z)({},rowParams,{field:params.field,reason:GridRowEditStopReasons.rowFocusOut});apiRef.current.publishEvent("rowEditStop",newParams,event)}})))}),[apiRef]);react.useEffect((()=>()=>{clearTimeout(focusTimeout.current)}),[]);const handleCellKeyDown=react.useCallback(((params,event)=>{if(params.cellMode===GridRowModes.Edit){if(229===event.which)return;let reason;if("Escape"===event.key)reason=GridRowEditStopReasons.escapeKeyDown;else if("Enter"===event.key)reason=GridRowEditStopReasons.enterKeyDown;else if("Tab"===event.key){const columnFields=gridColumnFieldsSelector(apiRef).filter((field=>apiRef.current.isCellEditable(apiRef.current.getCellParams(params.id,field))));if(event.shiftKey?params.field===columnFields[0]&&(reason=GridRowEditStopReasons.shiftTabKeyDown):params.field===columnFields[columnFields.length-1]&&(reason=GridRowEditStopReasons.tabKeyDown),event.preventDefault(),!reason){const index=columnFields.findIndex((field=>field===params.field)),nextFieldToFocus=columnFields[event.shiftKey?index-1:index+1];apiRef.current.setCellFocus(params.id,nextFieldToFocus)}}if(reason){const rowParams=apiRef.current.getRowParams(params.id),newParams=(0,esm_extends.Z)({},rowParams,{reason,field:params.field});apiRef.current.publishEvent("rowEditStop",newParams,event)}}else if(params.isEditable){let reason;if(!apiRef.current.unstable_applyPipeProcessors("canStartEditing",!0,{event,cellParams:params,editMode:"row"}))return;if(isPrintableKey(event)||(event.ctrlKey||event.metaKey)&&"v"===event.key?reason=GridRowEditStartReasons.printableKeyDown:"Enter"===event.key?reason=GridRowEditStartReasons.enterKeyDown:"Delete"!==event.key&&"Backspace"!==event.key||(reason=GridRowEditStartReasons.deleteKeyDown),reason){const rowParams=apiRef.current.getRowParams(params.id),newParams=(0,esm_extends.Z)({},rowParams,{field:params.field,key:event.key,reason});apiRef.current.publishEvent("rowEditStart",newParams,event)}}}),[apiRef]),handleRowEditStart=react.useCallback((params=>{const{id,field,reason,key}=params,startRowEditModeParams={id,fieldToFocus:field};reason===GridRowEditStartReasons.printableKeyDown?react.version.startsWith("17")?startRowEditModeParams.deleteValue=!!field:startRowEditModeParams.initialValue=key:reason===GridRowEditStartReasons.deleteKeyDown&&(startRowEditModeParams.deleteValue=!!field),apiRef.current.startRowEditMode(startRowEditModeParams)}),[apiRef]),handleRowEditStop=react.useCallback((params=>{const{id,reason,field}=params;let cellToFocusAfter;apiRef.current.runPendingEditCellValueMutation(id),reason===GridRowEditStopReasons.enterKeyDown?cellToFocusAfter="below":reason===GridRowEditStopReasons.tabKeyDown?cellToFocusAfter="right":reason===GridRowEditStopReasons.shiftTabKeyDown&&(cellToFocusAfter="left");const ignoreModifications="escapeKeyDown"===reason;apiRef.current.stopRowEditMode({id,ignoreModifications,field,cellToFocusAfter})}),[apiRef]);useGridApiEventHandler(apiRef,"cellDoubleClick",runIfEditModeIsRow(handleCellDoubleClick)),useGridApiEventHandler(apiRef,"cellFocusIn",runIfEditModeIsRow(handleCellFocusIn)),useGridApiEventHandler(apiRef,"cellFocusOut",runIfEditModeIsRow(handleCellFocusOut)),useGridApiEventHandler(apiRef,"cellKeyDown",runIfEditModeIsRow(handleCellKeyDown)),useGridApiEventHandler(apiRef,"rowEditStart",runIfEditModeIsRow(handleRowEditStart)),useGridApiEventHandler(apiRef,"rowEditStop",runIfEditModeIsRow(handleRowEditStop)),useGridApiOptionHandler(apiRef,"rowEditStart",props.onRowEditStart),useGridApiOptionHandler(apiRef,"rowEditStop",props.onRowEditStop);const getRowMode=react.useCallback((id=>{if(props.editMode===GridEditModes.Cell)return GridRowModes.View;const editingState=gridEditRowsStateSelector(apiRef.current.state);return editingState[id]&&Object.keys(editingState[id]).length>0?GridRowModes.Edit:GridRowModes.View}),[apiRef,props.editMode]),updateRowModesModel=(0,useEventCallback.Z)((newModel=>{const isNewModelDifferentFromProp=newModel!==props.rowModesModel;onRowModesModelChange&&isNewModelDifferentFromProp&&onRowModesModelChange(newModel,{}),props.rowModesModel&&isNewModelDifferentFromProp||(setRowModesModel(newModel),rowModesModelRef.current=newModel,apiRef.current.publishEvent("rowModesModelChange",newModel))})),updateRowInRowModesModel=react.useCallback(((id,newProps)=>{const newModel=(0,esm_extends.Z)({},rowModesModelRef.current);null!==newProps?newModel[id]=(0,esm_extends.Z)({},newProps):delete newModel[id],updateRowModesModel(newModel)}),[updateRowModesModel]),updateOrDeleteRowState=react.useCallback(((id,newProps)=>{apiRef.current.setState((state=>{const newEditingState=(0,esm_extends.Z)({},state.editRows);return null!==newProps?newEditingState[id]=newProps:delete newEditingState[id],(0,esm_extends.Z)({},state,{editRows:newEditingState})})),apiRef.current.forceUpdate()}),[apiRef]),updateOrDeleteFieldState=react.useCallback(((id,field,newProps)=>{apiRef.current.setState((state=>{const newEditingState=(0,esm_extends.Z)({},state.editRows);return null!==newProps?newEditingState[id]=(0,esm_extends.Z)({},newEditingState[id],{[field]:(0,esm_extends.Z)({},newProps)}):(delete newEditingState[id][field],0===Object.keys(newEditingState[id]).length&&delete newEditingState[id]),(0,esm_extends.Z)({},state,{editRows:newEditingState})})),apiRef.current.forceUpdate()}),[apiRef]),startRowEditMode=react.useCallback((params=>{const{id}=params,other=(0,objectWithoutPropertiesLoose.Z)(params,useGridRowEditing_excluded);throwIfNotInMode(id,GridRowModes.View),updateRowInRowModesModel(id,(0,esm_extends.Z)({mode:GridRowModes.Edit},other))}),[throwIfNotInMode,updateRowInRowModesModel]),updateStateToStartRowEditMode=(0,useEventCallback.Z)((params=>{const{id,fieldToFocus,deleteValue,initialValue}=params,newProps=gridColumnFieldsSelector(apiRef).reduce(((acc,field)=>{if(!apiRef.current.getCellParams(id,field).isEditable)return acc;let newValue=apiRef.current.getCellValue(id,field),unstable_updateValueOnRender=!1;return fieldToFocus===field&&(deleteValue||initialValue)&&(newValue=deleteValue?"":initialValue,unstable_updateValueOnRender=!0),acc[field]={value:newValue,error:!1,isProcessingProps:!1,unstable_updateValueOnRender},acc}),{});updateOrDeleteRowState(id,newProps),fieldToFocus&&apiRef.current.setCellFocus(id,fieldToFocus)})),stopRowEditMode=react.useCallback((params=>{const{id}=params,other=(0,objectWithoutPropertiesLoose.Z)(params,useGridRowEditing_excluded2);throwIfNotInMode(id,GridRowModes.Edit),updateRowInRowModesModel(id,(0,esm_extends.Z)({mode:GridRowModes.View},other))}),[throwIfNotInMode,updateRowInRowModesModel]),updateStateToStopRowEditMode=(0,useEventCallback.Z)((params=>{const{id,ignoreModifications,field:focusedField,cellToFocusAfter="none"}=params;apiRef.current.runPendingEditCellValueMutation(id);const finishRowEditMode=()=>{"none"!==cellToFocusAfter&&focusedField&&apiRef.current.moveFocusToRelativeCell(id,focusedField,cellToFocusAfter),updateOrDeleteRowState(id,null),updateRowInRowModesModel(id,null)};if(ignoreModifications)return void finishRowEditMode();const editingState=gridEditRowsStateSelector(apiRef.current.state),row=apiRef.current.getRow(id);if(Object.values(editingState[id]).some((fieldProps=>fieldProps.isProcessingProps)))return void(prevRowModesModel.current[id].mode=GridRowModes.Edit);if(Object.values(editingState[id]).some((fieldProps=>fieldProps.error)))return prevRowModesModel.current[id].mode=GridRowModes.Edit,void updateRowInRowModesModel(id,{mode:GridRowModes.Edit});const rowUpdate=apiRef.current.getRowWithUpdatedValuesFromRowEditing(id);if(processRowUpdate){const handleError=errorThrown=>{prevRowModesModel.current[id].mode=GridRowModes.Edit,updateRowInRowModesModel(id,{mode:GridRowModes.Edit}),onProcessRowUpdateError?onProcessRowUpdateError(errorThrown):useGridRowEditing_missingOnProcessRowUpdateErrorWarning()};try{Promise.resolve(processRowUpdate(rowUpdate,row)).then((finalRowUpdate=>{apiRef.current.updateRows([finalRowUpdate]),finishRowEditMode()})).catch(handleError)}catch(errorThrown){handleError(errorThrown)}}else apiRef.current.updateRows([rowUpdate]),finishRowEditMode()})),editingPrivateApi={setRowEditingEditCellValue:react.useCallback((params=>{const{id,field,value,debounceMs,unstable_skipValueParser:skipValueParser}=params;throwIfNotEditable(id,field);const column=apiRef.current.getColumn(field),row=apiRef.current.getRow(id);let parsedValue=value;column.valueParser&&!skipValueParser&&(parsedValue=column.valueParser(value,apiRef.current.getCellParams(id,field)));let editingState=gridEditRowsStateSelector(apiRef.current.state),newProps=(0,esm_extends.Z)({},editingState[id][field],{value:parsedValue,changeReason:debounceMs?"debouncedSetEditCellValue":"setEditCellValue"});return column.preProcessEditCellProps||updateOrDeleteFieldState(id,field,newProps),new Promise((resolve=>{const promises=[];if(column.preProcessEditCellProps){const hasChanged=newProps.value!==editingState[id][field].value;newProps=(0,esm_extends.Z)({},newProps,{isProcessingProps:!0}),updateOrDeleteFieldState(id,field,newProps);const _editingState$id=editingState[id],otherFieldsProps=(0,objectWithoutPropertiesLoose.Z)(_editingState$id,[field].map(toPropertyKey.Z)),promise=Promise.resolve(column.preProcessEditCellProps({id,row,props:newProps,hasChanged,otherFieldsProps})).then((processedProps=>{apiRef.current.getRowMode(id)!==GridRowModes.View?(editingState=gridEditRowsStateSelector(apiRef.current.state),(processedProps=(0,esm_extends.Z)({},processedProps,{isProcessingProps:!1})).value=column.preProcessEditCellProps?editingState[id][field].value:parsedValue,updateOrDeleteFieldState(id,field,processedProps)):resolve(!1)}));promises.push(promise)}Object.entries(editingState[id]).forEach((([thisField,fieldProps])=>{if(thisField===field)return;const fieldColumn=apiRef.current.getColumn(thisField);if(!fieldColumn.preProcessEditCellProps)return;fieldProps=(0,esm_extends.Z)({},fieldProps,{isProcessingProps:!0}),updateOrDeleteFieldState(id,thisField,fieldProps),editingState=gridEditRowsStateSelector(apiRef.current.state);const _editingState$id2=editingState[id],otherFieldsProps=(0,objectWithoutPropertiesLoose.Z)(_editingState$id2,[thisField].map(toPropertyKey.Z)),promise=Promise.resolve(fieldColumn.preProcessEditCellProps({id,row,props:fieldProps,hasChanged:!1,otherFieldsProps})).then((processedProps=>{apiRef.current.getRowMode(id)!==GridRowModes.View?(processedProps=(0,esm_extends.Z)({},processedProps,{isProcessingProps:!1}),updateOrDeleteFieldState(id,thisField,processedProps)):resolve(!1)}));promises.push(promise)})),Promise.all(promises).then((()=>{apiRef.current.getRowMode(id)===GridRowModes.Edit?(editingState=gridEditRowsStateSelector(apiRef.current.state),resolve(!editingState[id][field].error)):resolve(!1)}))}))}),[apiRef,throwIfNotEditable,updateOrDeleteFieldState]),getRowWithUpdatedValuesFromRowEditing:react.useCallback((id=>{const editingState=gridEditRowsStateSelector(apiRef.current.state),row=apiRef.current.getRow(id);if(!editingState[id])return apiRef.current.getRow(id);let rowUpdate=(0,esm_extends.Z)({},row);return Object.entries(editingState[id]).forEach((([field,fieldProps])=>{const column=apiRef.current.getColumn(field);column.valueSetter?rowUpdate=column.valueSetter({value:fieldProps.value,row:rowUpdate}):rowUpdate[field]=fieldProps.value})),rowUpdate}),[apiRef])};useGridApiMethod(apiRef,{getRowMode,startRowEditMode,stopRowEditMode},"public"),useGridApiMethod(apiRef,editingPrivateApi,"private"),react.useEffect((()=>{rowModesModelProp&&updateRowModesModel(rowModesModelProp)}),[rowModesModelProp,updateRowModesModel]),react.useEffect((()=>{const idToIdLookup=gridRowsDataRowIdToIdLookupSelector(apiRef),copyOfPrevRowModesModel=prevRowModesModel.current;prevRowModesModel.current=deepClone(rowModesModel),Object.entries(rowModesModel).forEach((([id,params])=>{var _copyOfPrevRowModesMo,_idToIdLookup$id;const prevMode=(null==(_copyOfPrevRowModesMo=copyOfPrevRowModesModel[id])?void 0:_copyOfPrevRowModesMo.mode)||GridRowModes.View,originalId=null!=(_idToIdLookup$id=idToIdLookup[id])?_idToIdLookup$id:id;params.mode===GridRowModes.Edit&&prevMode===GridRowModes.View?updateStateToStartRowEditMode((0,esm_extends.Z)({id:originalId},params)):params.mode===GridRowModes.View&&prevMode===GridRowModes.Edit&&updateStateToStopRowEditMode((0,esm_extends.Z)({id:originalId},params))}))}),[apiRef,rowModesModel,updateStateToStartRowEditMode,updateStateToStopRowEditMode])})(apiRef,props);const debounceMap=react.useRef({}),{isCellEditable:isCellEditableProp}=props,isCellEditable=react.useCallback((params=>!isAutoGeneratedRow(params.rowNode)&&(!!params.colDef.editable&&(!!params.colDef.renderEditCell&&(!isCellEditableProp||isCellEditableProp(params))))),[isCellEditableProp]);react.useEffect((()=>{const debounces=debounceMap.current;return()=>{Object.entries(debounces).forEach((([id,fields])=>{Object.keys(fields).forEach((field=>{const[timeout]=debounces[id][field];clearTimeout(timeout),delete debounces[id][field]}))}))}}),[]);const runPendingEditCellValueMutation=react.useCallback(((id,field)=>{if(debounceMap.current[id])if(field){if(debounceMap.current[id][field]){const[,runCallback]=debounceMap.current[id][field];runCallback()}}else Object.keys(debounceMap.current[id]).forEach((debouncedField=>{const[,runCallback]=debounceMap.current[id][debouncedField];runCallback()}))}),[]),setEditCellValue=react.useCallback((params=>{const{id,field,debounceMs}=params;return new Promise((resolve=>{((id,field,debounceMs,callback)=>{if(!debounceMs)return void callback();if(debounceMap.current[id]||(debounceMap.current[id]={}),debounceMap.current[id][field]){const[timeout]=debounceMap.current[id][field];clearTimeout(timeout)}const timeout=setTimeout((()=>{callback(),delete debounceMap.current[id][field]}),debounceMs);debounceMap.current[id][field]=[timeout,()=>{const[timeout]=debounceMap.current[id][field];clearTimeout(timeout),callback(),delete debounceMap.current[id][field]}]})(id,field,debounceMs,(async()=>{const setEditCellValueToCall=props.editMode===GridEditModes.Row?apiRef.current.setRowEditingEditCellValue:apiRef.current.setCellEditingEditCellValue;if(apiRef.current.getCellMode(id,field)===GridCellModes.Edit){const result=await setEditCellValueToCall(params);resolve(result)}}))}))}),[apiRef,props.editMode]),getRowWithUpdatedValues=react.useCallback(((id,field)=>props.editMode===GridEditModes.Cell?apiRef.current.getRowWithUpdatedValuesFromCellEditing(id,field):apiRef.current.getRowWithUpdatedValuesFromRowEditing(id)),[apiRef,props.editMode]),getEditCellMeta=react.useCallback(((id,field)=>gridEditRowsStateSelector(apiRef.current.state)[id][field]),[apiRef]),editingSharedPrivateApi={runPendingEditCellValueMutation};useGridApiMethod(apiRef,{isCellEditable,setEditCellValue,getRowWithUpdatedValues,unstable_getEditCellMeta:getEditCellMeta},"public"),useGridApiMethod(apiRef,editingSharedPrivateApi,"private")};var ownerDocument=__webpack_require__("./node_modules/@mui/utils/esm/ownerDocument/ownerDocument.js");const focusStateInitializer=state=>(0,esm_extends.Z)({},state,{focus:{cell:null,columnHeader:null,columnHeaderFilter:null,columnGroupHeader:null},tabIndex:{cell:null,columnHeader:null,columnHeaderFilter:null,columnGroupHeader:null}}),sortingStateInitializer=(state,props)=>{var _ref,_props$sortModel,_props$initialState,_props$initialState$s;const sortModel=null!=(_ref=null!=(_props$sortModel=props.sortModel)?_props$sortModel:null==(_props$initialState=props.initialState)||null==(_props$initialState$s=_props$initialState.sorting)?void 0:_props$initialState$s.sortModel)?_ref:[];return(0,esm_extends.Z)({},state,{sorting:{sortModel:sanitizeSortModel(sortModel,props.disableMultipleColumnsSorting),sortedRows:[]}})},gridPreferencePanelStateSelector=state=>state.preferencePanel,preferencePanelStateInitializer=(state,props)=>{var _props$initialState$p,_props$initialState;return(0,esm_extends.Z)({},state,{preferencePanel:null!=(_props$initialState$p=null==(_props$initialState=props.initialState)?void 0:_props$initialState.preferencePanel)?_props$initialState$p:{open:!1}})};var GridLogicOperator=function(GridLogicOperator){return GridLogicOperator.And="and",GridLogicOperator.Or="or",GridLogicOperator}(GridLogicOperator||{});const getDefaultGridFilterModel=()=>({items:[],logicOperator:GridLogicOperator.And,quickFilterValues:[],quickFilterLogicOperator:GridLogicOperator.And}),cleanFilterItem=(item,apiRef)=>{const cleanItem=(0,esm_extends.Z)({},item);if(null==cleanItem.id&&(cleanItem.id=Math.round(1e5*Math.random())),null==cleanItem.operator){const column=gridColumnLookupSelector(apiRef)[cleanItem.field];cleanItem.operator=column&&column.filterOperators[0].value}return cleanItem},filterModelDisableMultiColumnsFilteringWarning=buildWarning(["MUI: The `filterModel` can only contain a single item when the `disableMultipleColumnsFiltering` prop is set to `true`.","If you are using the community version of the `DataGrid`, this prop is always `true`."],"error"),filterModelMissingItemIdWarning=buildWarning("MUI: The `id` field is required on `filterModel.items` when you use multiple filters.","error"),filterModelMissingItemOperatorWarning=buildWarning("MUI: The `operator` field is required on `filterModel.items`, one or more of your filtering item has no `operator` provided.","error"),sanitizeFilterModel=(model,disableMultipleColumnsFiltering,apiRef)=>{const hasSeveralItems=model.items.length>1;let items;hasSeveralItems&&disableMultipleColumnsFiltering?(filterModelDisableMultiColumnsFilteringWarning(),items=[model.items[0]]):items=model.items;const hasItemsWithoutIds=hasSeveralItems&&items.some((item=>null==item.id)),hasItemWithoutOperator=items.some((item=>null==item.operator));return hasItemsWithoutIds&&filterModelMissingItemIdWarning(),hasItemWithoutOperator&&filterModelMissingItemOperatorWarning(),hasItemWithoutOperator||hasItemsWithoutIds?(0,esm_extends.Z)({},model,{items:items.map((item=>cleanFilterItem(item,apiRef)))}):model.items!==items?(0,esm_extends.Z)({},model,{items}):model},mergeStateWithFilterModel=(filterModel,disableMultipleColumnsFiltering,apiRef)=>filteringState=>(0,esm_extends.Z)({},filteringState,{filterModel:sanitizeFilterModel(filterModel,disableMultipleColumnsFiltering,apiRef)}),getFilterCallbackFromItem=(filterItem,apiRef)=>{if(!filterItem.field||!filterItem.operator)return null;const column=apiRef.current.getColumn(filterItem.field);if(!column)return null;let parsedValue;if(column.valueParser){var _filterItem$value;const parser=column.valueParser;parsedValue=Array.isArray(filterItem.value)?null==(_filterItem$value=filterItem.value)?void 0:_filterItem$value.map((x=>parser(x))):parser(filterItem.value)}else parsedValue=filterItem.value;const newFilterItem=(0,esm_extends.Z)({},filterItem,{value:parsedValue}),filterOperators=column.filterOperators;if(null==filterOperators||!filterOperators.length)throw new Error(`MUI: No filter operators found for column '${column.field}'.`);const filterOperator=filterOperators.find((operator=>operator.value===newFilterItem.operator));if(!filterOperator)throw new Error(`MUI: No filter operator found for column '${column.field}' and operator value '${newFilterItem.operator}'.`);const applyFilterOnRow=filterOperator.getApplyFilterFn(newFilterItem,column);if("function"!=typeof applyFilterOnRow)return null;return{fn:rowId=>{const cellParams=apiRef.current.getCellParams(rowId,newFilterItem.field);return applyFilterOnRow(cellParams)},item:newFilterItem}},buildAggregatedFilterApplier=(filterModel,apiRef)=>{const isRowMatchingFilterItems=((filterModel,apiRef)=>{const{items}=filterModel,appliers=items.map((item=>getFilterCallbackFromItem(item,apiRef))).filter((callback=>!!callback));return 0===appliers.length?null:(rowId,shouldApplyFilter)=>{const resultPerItemId={};return(shouldApplyFilter?appliers.filter((applier=>shouldApplyFilter(applier.item.field))):appliers).forEach((applier=>{resultPerItemId[applier.item.id]=applier.fn(rowId)})),resultPerItemId}})(filterModel,apiRef),isRowMatchingQuickFilter=((filterModel,apiRef)=>{const{quickFilterValues=[]}=filterModel;if(0===quickFilterValues.length)return null;const columnsFields=gridColumnFieldsSelector(apiRef),appliersPerField={};columnsFields.forEach((field=>{const column=apiRef.current.getColumn(field),getApplyQuickFilterFn=null==column?void 0:column.getApplyQuickFilterFn;getApplyQuickFilterFn&&(appliersPerField[field]=quickFilterValues.map((value=>getApplyQuickFilterFn(value,column,apiRef))))}));const sanitizedQuickFilterValues=quickFilterValues.filter(((value,index)=>Object.keys(appliersPerField).some((field=>null!=appliersPerField[field][index]))));return 0===sanitizedQuickFilterValues.length?null:(rowId,shouldApplyFilter)=>{const usedCellParams={},fieldsToFilter=[];Object.keys(appliersPerField).forEach((field=>{shouldApplyFilter&&!shouldApplyFilter(field)||(usedCellParams[field]=apiRef.current.getCellParams(rowId,field),fieldsToFilter.push(field))}));const quickFilterValueResult={};return sanitizedQuickFilterValues.forEach(((value,index)=>{const isPassing=fieldsToFilter.some((field=>{var _appliersPerField$fie,_appliersPerField$fie2;return null!=appliersPerField[field][index]&&(null==(_appliersPerField$fie=(_appliersPerField$fie2=appliersPerField[field])[index])?void 0:_appliersPerField$fie.call(_appliersPerField$fie2,usedCellParams[field]))}));quickFilterValueResult[value]=isPassing})),quickFilterValueResult}})(filterModel,apiRef);return(rowId,shouldApplyFilter)=>({passingFilterItems:isRowMatchingFilterItems&&isRowMatchingFilterItems(rowId,shouldApplyFilter),passingQuickFilterValues:isRowMatchingQuickFilter&&isRowMatchingQuickFilter(rowId,shouldApplyFilter)})},passFilterLogic=(allFilterItemResults,allQuickFilterResults,filterModel,apiRef)=>{var _filterModel$quickFil,_filterModel$logicOpe;const cleanedFilterItems=filterModel.items.filter((item=>null!==getFilterCallbackFromItem(item,apiRef))),cleanedAllFilterItemResults=allFilterItemResults.filter((result=>null!=result)),cleanedAllQuickFilterResults=allQuickFilterResults.filter((result=>null!=result)),quickFilterLogicOperator=null!=(_filterModel$quickFil=filterModel.quickFilterLogicOperator)?_filterModel$quickFil:getDefaultGridFilterModel().quickFilterLogicOperator,logicOperator=null!=(_filterModel$logicOpe=filterModel.logicOperator)?_filterModel$logicOpe:getDefaultGridFilterModel().logicOperator;if(cleanedAllFilterItemResults.length>0){const filterItemPredicate=item=>cleanedAllFilterItemResults.some((filterItemResult=>filterItemResult[item.id]));if(logicOperator===GridLogicOperator.And){if(!cleanedFilterItems.every(filterItemPredicate))return!1}else{if(!cleanedFilterItems.some(filterItemPredicate))return!1}}if(cleanedAllQuickFilterResults.length>0&&null!=filterModel.quickFilterValues){const quickFilterValuePredicate=value=>cleanedAllQuickFilterResults.some((quickFilterValueResult=>quickFilterValueResult[value]));if(quickFilterLogicOperator===GridLogicOperator.And){if(!filterModel.quickFilterValues.every(quickFilterValuePredicate))return!1}else{if(!filterModel.quickFilterValues.some(quickFilterValuePredicate))return!1}}return!0},filterStateInitializer=(state,props,apiRef)=>{var _ref,_props$filterModel,_props$initialState,_props$initialState$f;const filterModel=null!=(_ref=null!=(_props$filterModel=props.filterModel)?_props$filterModel:null==(_props$initialState=props.initialState)||null==(_props$initialState$f=_props$initialState.filter)?void 0:_props$initialState$f.filterModel)?_ref:getDefaultGridFilterModel();return(0,esm_extends.Z)({},state,{filter:{filterModel:sanitizeFilterModel(filterModel,props.disableMultipleColumnsFiltering,apiRef),filteredDescendantCountLookup:{}},visibleRowsLookup:{}})},getVisibleRowsLookup=params=>params.filteredRowsLookup;function getVisibleRowsLookupState(apiRef,state){return apiRef.current.applyStrategyProcessor("visibleRowsLookupCreation",{tree:state.rows.tree,filteredRowsLookup:state.filter.filteredRowsLookup})}const DENSITY_FACTORS={compact:.7,comfortable:1.3,standard:1},densityStateInitializer=(state,props)=>(0,esm_extends.Z)({},state,{density:{value:props.density,factor:DENSITY_FACTORS[props.density]}}),paginationStateInitializer=(state,props)=>{var _props$paginationMode,_props$initialState,_props$initialState$p;const paginationModel=(0,esm_extends.Z)({},getDefaultGridPaginationModel(props.autoPageSize),null!=(_props$paginationMode=props.paginationModel)?_props$paginationMode:null==(_props$initialState=props.initialState)||null==(_props$initialState$p=_props$initialState.pagination)?void 0:_props$initialState$p.paginationModel);return throwIfPageSizeExceedsTheLimit(paginationModel.pageSize,props.signature),(0,esm_extends.Z)({},state,{pagination:{paginationModel}})},mergeStateWithPaginationModel=(rowCount,signature,paginationModelProp)=>paginationState=>{var _paginationModelProp$;let paginationModel=paginationState.paginationModel;const pageSize=null!=(_paginationModelProp$=null==paginationModelProp?void 0:paginationModelProp.pageSize)?_paginationModelProp$:paginationModel.pageSize,pageCount=getPageCount(rowCount,pageSize);!paginationModelProp||(null==paginationModelProp?void 0:paginationModelProp.page)===paginationModel.page&&(null==paginationModelProp?void 0:paginationModelProp.pageSize)===paginationModel.pageSize||(paginationModel=paginationModelProp);const validPage=((page,pageCount=0)=>0===pageCount?page:Math.max(Math.min(page,pageCount-1),0))(paginationModel.page,pageCount);return validPage!==paginationModel.page&&(paginationModel=(0,esm_extends.Z)({},paginationModel,{page:validPage})),throwIfPageSizeExceedsTheLimit(paginationModel.pageSize,signature),{paginationModel}};var debounce=__webpack_require__("./node_modules/@mui/utils/esm/debounce/debounce.js");const GridCell_excluded=["align","children","colIndex","colDef","cellMode","field","formattedValue","hasFocus","height","isEditable","isSelected","rowId","tabIndex","value","width","className","showRightBorder","extendRowFullWidth","row","colSpan","disableDragEvents","onClick","onDoubleClick","onMouseDown","onMouseUp","onMouseOver","onKeyDown","onKeyUp","onDragEnter","onDragOver"];let cachedSupportsPreventScroll;const GridCell=react.forwardRef(((props,ref)=>{const{align,children,colIndex,cellMode,field,formattedValue,hasFocus,height,isEditable,isSelected,rowId,tabIndex,value,width,className,showRightBorder,colSpan,disableDragEvents,onClick,onDoubleClick,onMouseDown,onMouseUp,onMouseOver,onKeyDown,onKeyUp,onDragEnter,onDragOver}=props,other=(0,objectWithoutPropertiesLoose.Z)(props,GridCell_excluded),valueToRender=null==formattedValue?value:formattedValue,cellRef=react.useRef(null),handleRef=(0,useForkRef.Z)(ref,cellRef),focusElementRef=react.useRef(null),apiRef=useGridApiContext_useGridApiContext(),classes=(ownerState=>{const{align,showRightBorder,isEditable,isSelected,classes}=ownerState,slots={root:["cell",`cell--text${(0,capitalize.Z)(align)}`,isEditable&&"cell--editable",isSelected&&"selected",showRightBorder&&"cell--withRightBorder","withBorderColor"],content:["cellContent"]};return(0,composeClasses.Z)(slots,getDataGridUtilityClass,classes)})({align,showRightBorder,isEditable,classes:useGridRootProps().classes,isSelected}),publishMouseUp=react.useCallback((eventName=>event=>{const params=apiRef.current.getCellParams(rowId,field||"");apiRef.current.publishEvent(eventName,params,event),onMouseUp&&onMouseUp(event)}),[apiRef,field,onMouseUp,rowId]),publishMouseDown=react.useCallback((eventName=>event=>{const params=apiRef.current.getCellParams(rowId,field||"");apiRef.current.publishEvent(eventName,params,event),onMouseDown&&onMouseDown(event)}),[apiRef,field,onMouseDown,rowId]),publish=react.useCallback(((eventName,propHandler)=>event=>{if(!apiRef.current.getRow(rowId))return;const params=apiRef.current.getCellParams(rowId,field||"");apiRef.current.publishEvent(eventName,params,event),propHandler&&propHandler(event)}),[apiRef,field,rowId]),style={minWidth:width,maxWidth:width,minHeight:height,maxHeight:"auto"===height?"none":height};react.useEffect((()=>{if(!hasFocus||cellMode===GridCellModes.Edit)return;const doc=(0,ownerDocument.Z)(apiRef.current.rootElementRef.current);if(cellRef.current&&!cellRef.current.contains(doc.activeElement)){const focusableElement=cellRef.current.querySelector('[tabindex="0"]'),elementToFocus=focusElementRef.current||focusableElement||cellRef.current;if(function doesSupportPreventScroll(){return void 0===cachedSupportsPreventScroll&&document.createElement("div").focus({get preventScroll(){return cachedSupportsPreventScroll=!0,!1}}),cachedSupportsPreventScroll}())elementToFocus.focus({preventScroll:!0});else{const scrollPosition=apiRef.current.getScrollPosition();elementToFocus.focus(),apiRef.current.scroll(scrollPosition)}}}),[hasFocus,cellMode,apiRef]);let handleFocus=other.onFocus;const managesOwnFocus="actions"===apiRef.current.getColumn(field).type,draggableEventHandlers=disableDragEvents?null:{onDragEnter:publish("cellDragEnter",onDragEnter),onDragOver:publish("cellDragOver",onDragOver)};return(0,jsx_runtime.jsx)("div",(0,esm_extends.Z)({ref:handleRef,className:(0,clsx_m.Z)(className,classes.root),role:"cell","data-field":field,"data-colindex":colIndex,"aria-colindex":colIndex+1,"aria-colspan":colSpan,style,tabIndex:"view"!==cellMode&&isEditable||managesOwnFocus?-1:tabIndex,onClick:publish("cellClick",onClick),onDoubleClick:publish("cellDoubleClick",onDoubleClick),onMouseOver:publish("cellMouseOver",onMouseOver),onMouseDown:publishMouseDown("cellMouseDown"),onMouseUp:publishMouseUp("cellMouseUp"),onKeyDown:publish("cellKeyDown",onKeyDown),onKeyUp:publish("cellKeyUp",onKeyUp)},draggableEventHandlers,other,{onFocus:handleFocus,children:(()=>{if(void 0===children){const valueString=null==valueToRender?void 0:valueToRender.toString();return(0,jsx_runtime.jsx)("div",{className:classes.content,title:valueString,children:valueString})}return react.isValidElement(children)&&managesOwnFocus?react.cloneElement(children,{focusElementRef}):children})()}))})),MemoizedCell=react.memo(GridCell);var Skeleton=__webpack_require__("./node_modules/@mui/material/Skeleton/Skeleton.js");const GridSkeletonCell_excluded=["field","align","width","contentWidth"];var Badge=__webpack_require__("./node_modules/@mui/material/Badge/Badge.js");const GridIconButtonContainer_excluded=["className"],GridIconButtonContainerRoot=(0,esm_styled.Z)("div",{name:"MuiDataGrid",slot:"IconButtonContainer",overridesResolver:(props,styles)=>styles.iconButtonContainer})((()=>({display:"flex",visibility:"hidden",width:0}))),GridIconButtonContainer=react.forwardRef((function GridIconButtonContainer(props,ref){const{className}=props,other=(0,objectWithoutPropertiesLoose.Z)(props,GridIconButtonContainer_excluded),rootProps=useGridRootProps(),classes=(ownerState=>{const{classes}=ownerState;return(0,composeClasses.Z)({root:["iconButtonContainer"]},getDataGridUtilityClass,classes)})(rootProps);return(0,jsx_runtime.jsx)(GridIconButtonContainerRoot,(0,esm_extends.Z)({ref,className:(0,clsx_m.Z)(classes.root,className),ownerState:rootProps},other))}));const GridRowCount_excluded=["className","rowCount","visibleRowCount"],GridRowCountRoot=(0,esm_styled.Z)("div",{name:"MuiDataGrid",slot:"RowCount",overridesResolver:(props,styles)=>styles.rowCount})((({theme})=>({alignItems:"center",display:"flex",margin:theme.spacing(0,2)}))),GridRowCount=react.forwardRef((function GridRowCount(props,ref){const{className,rowCount,visibleRowCount}=props,other=(0,objectWithoutPropertiesLoose.Z)(props,GridRowCount_excluded),apiRef=useGridApiContext_useGridApiContext(),ownerState=useGridRootProps(),classes=(ownerState=>{const{classes}=ownerState;return(0,composeClasses.Z)({root:["rowCount"]},getDataGridUtilityClass,classes)})(ownerState);if(0===rowCount)return null;const text=visibleRowCount<rowCount?apiRef.current.getLocaleText("footerTotalVisibleRows")(visibleRowCount,rowCount):rowCount.toLocaleString();return(0,jsx_runtime.jsxs)(GridRowCountRoot,(0,esm_extends.Z)({ref,className:(0,clsx_m.Z)(classes.root,className),ownerState},other,{children:[apiRef.current.getLocaleText("footerTotalRows")," ",text]}))})),GridSelectedRowCount_excluded=["className","selectedRowCount"],GridSelectedRowCountRoot=(0,esm_styled.Z)("div",{name:"MuiDataGrid",slot:"SelectedRowCount",overridesResolver:(props,styles)=>styles.selectedRowCount})((({theme})=>({alignItems:"center",display:"flex",margin:theme.spacing(0,2),visibility:"hidden",width:0,height:0,[theme.breakpoints.up("sm")]:{visibility:"visible",width:"auto",height:"auto"}}))),GridSelectedRowCount=react.forwardRef((function GridSelectedRowCount(props,ref){const{className,selectedRowCount}=props,other=(0,objectWithoutPropertiesLoose.Z)(props,GridSelectedRowCount_excluded),apiRef=useGridApiContext_useGridApiContext(),ownerState=useGridRootProps(),classes=(ownerState=>{const{classes}=ownerState;return(0,composeClasses.Z)({root:["selectedRowCount"]},getDataGridUtilityClass,classes)})(ownerState),rowSelectedText=apiRef.current.getLocaleText("footerRowSelected")(selectedRowCount);return(0,jsx_runtime.jsx)(GridSelectedRowCountRoot,(0,esm_extends.Z)({ref,className:(0,clsx_m.Z)(classes.root,className),ownerState},other,{children:rowSelectedText}))})),GridFooterContainer_excluded=["className"],GridFooterContainerRoot=(0,esm_styled.Z)("div",{name:"MuiDataGrid",slot:"FooterContainer",overridesResolver:(props,styles)=>styles.footerContainer})({display:"flex",justifyContent:"space-between",alignItems:"center",minHeight:52,borderTop:"1px solid"}),GridFooterContainer=react.forwardRef((function GridFooterContainer(props,ref){const{className}=props,other=(0,objectWithoutPropertiesLoose.Z)(props,GridFooterContainer_excluded),rootProps=useGridRootProps(),classes=(ownerState=>{const{classes}=ownerState;return(0,composeClasses.Z)({root:["footerContainer","withBorderColor"]},getDataGridUtilityClass,classes)})(rootProps);return(0,jsx_runtime.jsx)(GridFooterContainerRoot,(0,esm_extends.Z)({ref,className:(0,clsx_m.Z)(classes.root,className),ownerState:rootProps},other))})),GridFooter=react.forwardRef((function GridFooter(props,ref){var _rootProps$slotProps;const apiRef=useGridApiContext_useGridApiContext(),rootProps=useGridRootProps(),totalTopLevelRowCount=useGridSelector(apiRef,gridTopLevelRowCountSelector),selectedRowCount=useGridSelector(apiRef,selectedGridRowsCountSelector),visibleTopLevelRowCount=useGridSelector(apiRef,gridFilteredTopLevelRowCountSelector),selectedRowCountElement=!rootProps.hideFooterSelectedRowCount&&selectedRowCount>0?(0,jsx_runtime.jsx)(GridSelectedRowCount,{selectedRowCount}):(0,jsx_runtime.jsx)("div",{}),rowCountElement=rootProps.hideFooterRowCount||rootProps.pagination?null:(0,jsx_runtime.jsx)(GridRowCount,{rowCount:totalTopLevelRowCount,visibleRowCount:visibleTopLevelRowCount}),paginationElement=rootProps.pagination&&!rootProps.hideFooterPagination&&rootProps.slots.pagination&&(0,jsx_runtime.jsx)(rootProps.slots.pagination,(0,esm_extends.Z)({},null==(_rootProps$slotProps=rootProps.slotProps)?void 0:_rootProps$slotProps.pagination));return(0,jsx_runtime.jsxs)(GridFooterContainer,(0,esm_extends.Z)({ref},props,{children:[selectedRowCountElement,rowCountElement,paginationElement]}))})),GridPreferencesPanel=react.forwardRef((function GridPreferencesPanel(props,ref){var _preferencePanelState,_rootProps$slotProps,_rootProps$slotProps2;const apiRef=useGridApiContext_useGridApiContext(),columns=useGridSelector(apiRef,gridColumnDefinitionsSelector),rootProps=useGridRootProps(),preferencePanelState=useGridSelector(apiRef,gridPreferencePanelStateSelector),panelContent=apiRef.current.unstable_applyPipeProcessors("preferencePanel",null,null!=(_preferencePanelState=preferencePanelState.openedPanelValue)?_preferencePanelState:GridPreferencePanelsValue.filters);return(0,jsx_runtime.jsx)(rootProps.slots.panel,(0,esm_extends.Z)({ref,as:rootProps.slots.basePopper,open:columns.length>0&&preferencePanelState.open,id:preferencePanelState.panelId,"aria-labelledby":preferencePanelState.labelId},null==(_rootProps$slotProps=rootProps.slotProps)?void 0:_rootProps$slotProps.panel,props,null==(_rootProps$slotProps2=rootProps.slotProps)?void 0:_rootProps$slotProps2.basePopper,{children:panelContent}))}));var CircularProgress=__webpack_require__("./node_modules/@mui/material/CircularProgress/CircularProgress.js");const GridOverlay_excluded=["className"],GridOverlayRoot=(0,esm_styled.Z)("div",{name:"MuiDataGrid",slot:"Overlay",overridesResolver:(_,styles)=>styles.overlay})({width:"100%",height:"100%",display:"flex",alignSelf:"center",alignItems:"center",justifyContent:"center",backgroundColor:"var(--unstable_DataGrid-overlayBackground)"}),GridOverlay=react.forwardRef((function GridOverlay(props,ref){const{className}=props,other=(0,objectWithoutPropertiesLoose.Z)(props,GridOverlay_excluded),rootProps=useGridRootProps(),classes=(ownerState=>{const{classes}=ownerState;return(0,composeClasses.Z)({root:["overlay"]},getDataGridUtilityClass,classes)})(rootProps);return(0,jsx_runtime.jsx)(GridOverlayRoot,(0,esm_extends.Z)({ref,className:(0,clsx_m.Z)(classes.root,className),ownerState:rootProps},other))})),GridLoadingOverlay=react.forwardRef((function GridLoadingOverlay(props,ref){return(0,jsx_runtime.jsx)(GridOverlay,(0,esm_extends.Z)({ref},props,{children:(0,jsx_runtime.jsx)(CircularProgress.Z,{})}))})),GridNoRowsOverlay=react.forwardRef((function GridNoRowsOverlay(props,ref){const noRowsLabel=useGridApiContext_useGridApiContext().current.getLocaleText("noRowsLabel");return(0,jsx_runtime.jsx)(GridOverlay,(0,esm_extends.Z)({ref},props,{children:noRowsLabel}))}));var TablePagination=__webpack_require__("./node_modules/@mui/material/TablePagination/TablePagination.js"),tablePaginationClasses=__webpack_require__("./node_modules/@mui/material/TablePagination/tablePaginationClasses.js");const GridPaginationRoot=(0,styled.ZP)(TablePagination.Z)((({theme})=>({[`& .${tablePaginationClasses.Z.selectLabel}`]:{display:"none",[theme.breakpoints.up("sm")]:{display:"block"}},[`& .${tablePaginationClasses.Z.input}`]:{display:"none",[theme.breakpoints.up("sm")]:{display:"inline-flex"}}}))),GridPagination=react.forwardRef((function GridPagination(props,ref){var _rootProps$pageSizeOp;const apiRef=useGridApiContext_useGridApiContext(),rootProps=useGridRootProps(),paginationModel=useGridSelector(apiRef,gridPaginationModelSelector),visibleTopLevelRowCount=useGridSelector(apiRef,gridFilteredTopLevelRowCountSelector),rowCount=react.useMemo((()=>{var _ref,_rootProps$rowCount;return null!=(_ref=null!=(_rootProps$rowCount=rootProps.rowCount)?_rootProps$rowCount:visibleTopLevelRowCount)?_ref:0}),[rootProps.rowCount,visibleTopLevelRowCount]),lastPage=react.useMemo((()=>Math.floor(rowCount/(paginationModel.pageSize||1))),[rowCount,paginationModel.pageSize]),handlePageSizeChange=react.useCallback((event=>{const pageSize=Number(event.target.value);apiRef.current.setPageSize(pageSize)}),[apiRef]),handlePageChange=react.useCallback(((_,page)=>{apiRef.current.setPage(page)}),[apiRef]);return(0,jsx_runtime.jsx)(GridPaginationRoot,(0,esm_extends.Z)({ref,component:"div",count:rowCount,page:paginationModel.page<=lastPage?paginationModel.page:lastPage,rowsPerPageOptions:null!=(_rootProps$pageSizeOp=rootProps.pageSizeOptions)&&_rootProps$pageSizeOp.includes(paginationModel.pageSize)?rootProps.pageSizeOptions:[],rowsPerPage:paginationModel.pageSize,onPageChange:handlePageChange,onRowsPerPageChange:handlePageSizeChange},apiRef.current.getLocaleText("MuiTablePagination"),props))})),GridPanelContent_excluded=["className"],GridPanelContent_useUtilityClasses=ownerState=>{const{classes}=ownerState;return(0,composeClasses.Z)({root:["panelContent"]},getDataGridUtilityClass,classes)},GridPanelContentRoot=(0,esm_styled.Z)("div",{name:"MuiDataGrid",slot:"PanelContent",overridesResolver:(props,styles)=>styles.panelContent})({display:"flex",flexDirection:"column",overflow:"auto",flex:"1 1",maxHeight:400});function GridPanelContent(props){const{className}=props,other=(0,objectWithoutPropertiesLoose.Z)(props,GridPanelContent_excluded),rootProps=useGridRootProps(),classes=GridPanelContent_useUtilityClasses(rootProps);return(0,jsx_runtime.jsx)(GridPanelContentRoot,(0,esm_extends.Z)({className:(0,clsx_m.Z)(className,classes.root),ownerState:rootProps},other))}const GridPanelFooter_excluded=["className"],GridPanelFooter_useUtilityClasses=ownerState=>{const{classes}=ownerState;return(0,composeClasses.Z)({root:["panelFooter"]},getDataGridUtilityClass,classes)},GridPanelFooterRoot=(0,esm_styled.Z)("div",{name:"MuiDataGrid",slot:"PanelFooter",overridesResolver:(props,styles)=>styles.panelFooter})((({theme})=>({padding:theme.spacing(.5),display:"flex",justifyContent:"space-between"})));function GridPanelFooter(props){const{className}=props,other=(0,objectWithoutPropertiesLoose.Z)(props,GridPanelFooter_excluded),rootProps=useGridRootProps(),classes=GridPanelFooter_useUtilityClasses(rootProps);return(0,jsx_runtime.jsx)(GridPanelFooterRoot,(0,esm_extends.Z)({className:(0,clsx_m.Z)(className,classes.root),ownerState:rootProps},other))}var FocusTrap=__webpack_require__("./node_modules/@mui/base/FocusTrap/FocusTrap.js");const GridPanelWrapper_excluded=["className","slotProps"],GridPanelWrapperRoot=(0,styled.ZP)("div",{name:"MuiDataGrid",slot:"PanelWrapper",overridesResolver:(props,styles)=>styles.panelWrapper})({display:"flex",flexDirection:"column",flex:1,"&:focus":{outline:0}}),isEnabled=()=>!0,GridPanelWrapper=react.forwardRef((function GridPanelWrapper(props,ref){const{className,slotProps={}}=props,other=(0,objectWithoutPropertiesLoose.Z)(props,GridPanelWrapper_excluded),rootProps=useGridRootProps(),classes=(ownerState=>{const{classes}=ownerState;return(0,composeClasses.Z)({root:["panelWrapper"]},getDataGridUtilityClass,classes)})(rootProps);return(0,jsx_runtime.jsx)(FocusTrap.i,(0,esm_extends.Z)({open:!0,disableEnforceFocus:!0,isEnabled},slotProps.TrapFocus,{children:(0,jsx_runtime.jsx)(GridPanelWrapperRoot,(0,esm_extends.Z)({ref,tabIndex:-1,className:(0,clsx_m.Z)(className,classes.root),ownerState:rootProps},other))}))})),GridFilterForm_excluded=["item","hasMultipleFilters","deleteFilter","applyFilterChanges","multiFilterOperator","showMultiFilterOperators","disableMultiFilterOperator","applyMultiFilterOperatorChanges","focusElementRef","logicOperators","columnsSort","filterColumns","deleteIconProps","logicOperatorInputProps","operatorInputProps","columnInputProps","valueInputProps","children"],GridFilterForm_excluded2=["InputComponentProps"],GridFilterFormRoot=(0,styled.ZP)("div",{name:"MuiDataGrid",slot:"FilterForm",overridesResolver:(props,styles)=>styles.filterForm})((({theme})=>({display:"flex",padding:theme.spacing(1)}))),FilterFormDeleteIcon=(0,styled.ZP)("div",{name:"MuiDataGrid",slot:"FilterFormDeleteIcon",overridesResolver:(_,styles)=>styles.filterFormDeleteIcon})((({theme})=>({flexShrink:0,justifyContent:"flex-end",marginRight:theme.spacing(.5),marginBottom:theme.spacing(.2)}))),FilterFormLogicOperatorInput=(0,styled.ZP)("div",{name:"MuiDataGrid",slot:"FilterFormLogicOperatorInput",overridesResolver:(_,styles)=>styles.filterFormLogicOperatorInput})({minWidth:55,marginRight:5,justifyContent:"end"}),FilterFormColumnInput=(0,styled.ZP)("div",{name:"MuiDataGrid",slot:"FilterFormColumnInput",overridesResolver:(_,styles)=>styles.filterFormColumnInput})({width:150}),FilterFormOperatorInput=(0,styled.ZP)("div",{name:"MuiDataGrid",slot:"FilterFormOperatorInput",overridesResolver:(_,styles)=>styles.filterFormOperatorInput})({width:120}),FilterFormValueInput=(0,styled.ZP)("div",{name:"MuiDataGrid",slot:"FilterFormValueInput",overridesResolver:(_,styles)=>styles.filterFormValueInput})({width:190}),getColumnLabel=col=>col.headerName||col.field,GridFilterForm_collator=new Intl.Collator,GridFilterForm=react.forwardRef((function GridFilterForm(props,ref){var _rootProps$slotProps,_rootProps$slotProps2,_baseSelectProps$nati,_rootProps$slotProps3,_rootProps$slotProps4,_rootProps$slotProps5,_rootProps$slotProps6,_rootProps$slotProps7,_rootProps$slotProps8,_currentColumn$filter2;const{item,hasMultipleFilters,deleteFilter,applyFilterChanges,multiFilterOperator,showMultiFilterOperators,disableMultiFilterOperator,applyMultiFilterOperatorChanges,focusElementRef,logicOperators=[GridLogicOperator.And,GridLogicOperator.Or],columnsSort,filterColumns,deleteIconProps={},logicOperatorInputProps={},operatorInputProps={},columnInputProps={},valueInputProps={}}=props,other=(0,objectWithoutPropertiesLoose.Z)(props,GridFilterForm_excluded),apiRef=useGridApiContext_useGridApiContext(),filterableColumns=useGridSelector(apiRef,gridFilterableColumnDefinitionsSelector),filterModel=useGridSelector(apiRef,gridFilterModelSelector),columnSelectId=(0,useId.Z)(),columnSelectLabelId=(0,useId.Z)(),operatorSelectId=(0,useId.Z)(),operatorSelectLabelId=(0,useId.Z)(),rootProps=useGridRootProps(),classes=(ownerState=>{const{classes}=ownerState;return(0,composeClasses.Z)({root:["filterForm"],deleteIcon:["filterFormDeleteIcon"],logicOperatorInput:["filterFormLogicOperatorInput"],columnInput:["filterFormColumnInput"],operatorInput:["filterFormOperatorInput"],valueInput:["filterFormValueInput"]},getDataGridUtilityClass,classes)})(rootProps),valueRef=react.useRef(null),filterSelectorRef=react.useRef(null),hasLogicOperatorColumn=hasMultipleFilters&&logicOperators.length>0,baseFormControlProps=(null==(_rootProps$slotProps=rootProps.slotProps)?void 0:_rootProps$slotProps.baseFormControl)||{},isBaseSelectNative=null==(_baseSelectProps$nati=((null==(_rootProps$slotProps2=rootProps.slotProps)?void 0:_rootProps$slotProps2.baseSelect)||{}).native)||_baseSelectProps$nati,baseInputLabelProps=(null==(_rootProps$slotProps3=rootProps.slotProps)?void 0:_rootProps$slotProps3.baseInputLabel)||{},baseSelectOptionProps=(null==(_rootProps$slotProps4=rootProps.slotProps)?void 0:_rootProps$slotProps4.baseSelectOption)||{},{InputComponentProps}=valueInputProps,valueInputPropsOther=(0,objectWithoutPropertiesLoose.Z)(valueInputProps,GridFilterForm_excluded2),filteredColumns=react.useMemo((()=>{if(void 0===filterColumns||"function"!=typeof filterColumns)return filterableColumns;const filteredFields=filterColumns({field:item.field,columns:filterableColumns,currentFilters:(null==filterModel?void 0:filterModel.items)||[]});return filterableColumns.filter((column=>filteredFields.includes(column.field)))}),[filterColumns,null==filterModel?void 0:filterModel.items,filterableColumns,item.field]),sortedFilteredColumns=react.useMemo((()=>{switch(columnsSort){case"asc":return filteredColumns.sort(((a,b)=>GridFilterForm_collator.compare(getColumnLabel(a),getColumnLabel(b))));case"desc":return filteredColumns.sort(((a,b)=>-GridFilterForm_collator.compare(getColumnLabel(a),getColumnLabel(b))));default:return filteredColumns}}),[filteredColumns,columnsSort]),currentColumn=item.field?apiRef.current.getColumn(item.field):null,currentOperator=react.useMemo((()=>{var _currentColumn$filter;return item.operator&&currentColumn?null==(_currentColumn$filter=currentColumn.filterOperators)?void 0:_currentColumn$filter.find((operator=>operator.value===item.operator)):null}),[item,currentColumn]),changeColumn=react.useCallback((event=>{const field=event.target.value,column=apiRef.current.getColumn(field);if(column.field===currentColumn.field)return;const newOperator=column.filterOperators.find((operator=>operator.value===item.operator))||column.filterOperators[0],eraseItemValue=!newOperator.InputComponent||newOperator.InputComponent!==(null==currentOperator?void 0:currentOperator.InputComponent);applyFilterChanges((0,esm_extends.Z)({},item,{field,operator:newOperator.value,value:eraseItemValue?void 0:item.value}))}),[apiRef,applyFilterChanges,item,currentColumn,currentOperator]),changeOperator=react.useCallback((event=>{const operator=event.target.value,newOperator=null==currentColumn?void 0:currentColumn.filterOperators.find((op=>op.value===operator)),eraseItemValue=!(null!=newOperator&&newOperator.InputComponent)||(null==newOperator?void 0:newOperator.InputComponent)!==(null==currentOperator?void 0:currentOperator.InputComponent);applyFilterChanges((0,esm_extends.Z)({},item,{operator,value:eraseItemValue?void 0:item.value}))}),[applyFilterChanges,item,currentColumn,currentOperator]),changeLogicOperator=react.useCallback((event=>{const logicOperator=event.target.value===GridLogicOperator.And.toString()?GridLogicOperator.And:GridLogicOperator.Or;applyMultiFilterOperatorChanges(logicOperator)}),[applyMultiFilterOperatorChanges]);return react.useImperativeHandle(focusElementRef,(()=>({focus:()=>{var _valueRef$current;null!=currentOperator&&currentOperator.InputComponent?null==valueRef||null==(_valueRef$current=valueRef.current)||_valueRef$current.focus():filterSelectorRef.current.focus()}})),[currentOperator]),(0,jsx_runtime.jsxs)(GridFilterFormRoot,(0,esm_extends.Z)({ref,className:classes.root,"data-id":item.id,ownerState:rootProps},other,{children:[(0,jsx_runtime.jsx)(FilterFormDeleteIcon,(0,esm_extends.Z)({variant:"standard",as:rootProps.slots.baseFormControl},baseFormControlProps,deleteIconProps,{className:(0,clsx_m.Z)(classes.deleteIcon,baseFormControlProps.className,deleteIconProps.className),ownerState:rootProps,children:(0,jsx_runtime.jsx)(rootProps.slots.baseIconButton,(0,esm_extends.Z)({"aria-label":apiRef.current.getLocaleText("filterPanelDeleteIconLabel"),title:apiRef.current.getLocaleText("filterPanelDeleteIconLabel"),onClick:()=>{rootProps.disableMultipleColumnsFiltering?void 0===item.value?deleteFilter(item):applyFilterChanges((0,esm_extends.Z)({},item,{value:void 0})):deleteFilter(item)},size:"small"},null==(_rootProps$slotProps5=rootProps.slotProps)?void 0:_rootProps$slotProps5.baseIconButton,{children:(0,jsx_runtime.jsx)(rootProps.slots.filterPanelDeleteIcon,{fontSize:"small"})}))})),(0,jsx_runtime.jsx)(FilterFormLogicOperatorInput,(0,esm_extends.Z)({variant:"standard",as:rootProps.slots.baseFormControl},baseFormControlProps,logicOperatorInputProps,{sx:(0,esm_extends.Z)({display:hasLogicOperatorColumn?"flex":"none",visibility:showMultiFilterOperators?"visible":"hidden"},baseFormControlProps.sx||{},logicOperatorInputProps.sx||{}),className:(0,clsx_m.Z)(classes.logicOperatorInput,baseFormControlProps.className,logicOperatorInputProps.className),ownerState:rootProps,children:(0,jsx_runtime.jsx)(rootProps.slots.baseSelect,(0,esm_extends.Z)({inputProps:{"aria-label":apiRef.current.getLocaleText("filterPanelLogicOperator")},value:multiFilterOperator,onChange:changeLogicOperator,disabled:!!disableMultiFilterOperator||1===logicOperators.length,native:isBaseSelectNative},null==(_rootProps$slotProps6=rootProps.slotProps)?void 0:_rootProps$slotProps6.baseSelect,{children:logicOperators.map((logicOperator=>(0,react.createElement)(rootProps.slots.baseSelectOption,(0,esm_extends.Z)({},baseSelectOptionProps,{native:isBaseSelectNative,key:logicOperator.toString(),value:logicOperator.toString()}),apiRef.current.getLocaleText((logicOperator=>{switch(logicOperator){case GridLogicOperator.And:return"filterPanelOperatorAnd";case GridLogicOperator.Or:return"filterPanelOperatorOr";default:throw new Error("MUI: Invalid `logicOperator` property in the `GridFilterPanel`.")}})(logicOperator)))))}))})),(0,jsx_runtime.jsxs)(FilterFormColumnInput,(0,esm_extends.Z)({variant:"standard",as:rootProps.slots.baseFormControl},baseFormControlProps,columnInputProps,{className:(0,clsx_m.Z)(classes.columnInput,baseFormControlProps.className,columnInputProps.className),ownerState:rootProps,children:[(0,jsx_runtime.jsx)(rootProps.slots.baseInputLabel,(0,esm_extends.Z)({},baseInputLabelProps,{htmlFor:columnSelectId,id:columnSelectLabelId,children:apiRef.current.getLocaleText("filterPanelColumns")})),(0,jsx_runtime.jsx)(rootProps.slots.baseSelect,(0,esm_extends.Z)({labelId:columnSelectLabelId,id:columnSelectId,label:apiRef.current.getLocaleText("filterPanelColumns"),value:item.field||"",onChange:changeColumn,native:isBaseSelectNative},null==(_rootProps$slotProps7=rootProps.slotProps)?void 0:_rootProps$slotProps7.baseSelect,{children:sortedFilteredColumns.map((col=>(0,react.createElement)(rootProps.slots.baseSelectOption,(0,esm_extends.Z)({},baseSelectOptionProps,{native:isBaseSelectNative,key:col.field,value:col.field}),getColumnLabel(col))))}))]})),(0,jsx_runtime.jsxs)(FilterFormOperatorInput,(0,esm_extends.Z)({variant:"standard",as:rootProps.slots.baseFormControl},baseFormControlProps,operatorInputProps,{className:(0,clsx_m.Z)(classes.operatorInput,baseFormControlProps.className,operatorInputProps.className),ownerState:rootProps,children:[(0,jsx_runtime.jsx)(rootProps.slots.baseInputLabel,(0,esm_extends.Z)({},baseInputLabelProps,{htmlFor:operatorSelectId,id:operatorSelectLabelId,children:apiRef.current.getLocaleText("filterPanelOperator")})),(0,jsx_runtime.jsx)(rootProps.slots.baseSelect,(0,esm_extends.Z)({labelId:operatorSelectLabelId,label:apiRef.current.getLocaleText("filterPanelOperator"),id:operatorSelectId,value:item.operator,onChange:changeOperator,native:isBaseSelectNative,inputRef:filterSelectorRef},null==(_rootProps$slotProps8=rootProps.slotProps)?void 0:_rootProps$slotProps8.baseSelect,{children:null==currentColumn||null==(_currentColumn$filter2=currentColumn.filterOperators)?void 0:_currentColumn$filter2.map((operator=>(0,react.createElement)(rootProps.slots.baseSelectOption,(0,esm_extends.Z)({},baseSelectOptionProps,{native:isBaseSelectNative,key:operator.value,value:operator.value}),operator.label||apiRef.current.getLocaleText(`filterOperator${(0,capitalize.Z)(operator.value)}`))))}))]})),(0,jsx_runtime.jsx)(FilterFormValueInput,(0,esm_extends.Z)({variant:"standard",as:rootProps.slots.baseFormControl},baseFormControlProps,valueInputPropsOther,{className:(0,clsx_m.Z)(classes.valueInput,baseFormControlProps.className,valueInputPropsOther.className),ownerState:rootProps,children:null!=currentOperator&&currentOperator.InputComponent?(0,jsx_runtime.jsx)(currentOperator.InputComponent,(0,esm_extends.Z)({apiRef,item,applyValue:applyFilterChanges,focusElementRef:valueRef},currentOperator.InputComponentProps,InputComponentProps)):null}))]}))})),GridFilterPanel_excluded=["logicOperators","columnsSort","filterFormProps","getColumnForNewFilter","children","disableAddFilterButton","disableRemoveAllButton"],getGridFilter=col=>({field:col.field,operator:col.filterOperators[0].value,id:Math.round(1e5*Math.random())}),GridFilterPanel=react.forwardRef((function GridFilterPanel(props,ref){var _rootProps$slotProps,_rootProps$slotProps2;const apiRef=useGridApiContext_useGridApiContext(),rootProps=useGridRootProps(),filterModel=useGridSelector(apiRef,gridFilterModelSelector),filterableColumns=useGridSelector(apiRef,gridFilterableColumnDefinitionsSelector),lastFilterRef=react.useRef(null),placeholderFilter=react.useRef(null),{logicOperators=[GridLogicOperator.And,GridLogicOperator.Or],columnsSort,filterFormProps,getColumnForNewFilter,disableAddFilterButton=!1,disableRemoveAllButton=!1}=props,other=(0,objectWithoutPropertiesLoose.Z)(props,GridFilterPanel_excluded),applyFilter=react.useCallback((item=>{apiRef.current.upsertFilterItem(item)}),[apiRef]),applyFilterLogicOperator=react.useCallback((operator=>{apiRef.current.setFilterLogicOperator(operator)}),[apiRef]),getDefaultFilter=react.useCallback((()=>{let nextColumnWithOperator;if(getColumnForNewFilter&&"function"==typeof getColumnForNewFilter){const nextFieldName=getColumnForNewFilter({currentFilters:(null==filterModel?void 0:filterModel.items)||[],columns:filterableColumns});if(null===nextFieldName)return null;nextColumnWithOperator=filterableColumns.find((({field})=>field===nextFieldName))}else nextColumnWithOperator=filterableColumns.find((colDef=>{var _colDef$filterOperato;return null==(_colDef$filterOperato=colDef.filterOperators)?void 0:_colDef$filterOperato.length}));return nextColumnWithOperator?getGridFilter(nextColumnWithOperator):null}),[null==filterModel?void 0:filterModel.items,filterableColumns,getColumnForNewFilter]),getNewFilter=react.useCallback((()=>{if(void 0===getColumnForNewFilter||"function"!=typeof getColumnForNewFilter)return getDefaultFilter();const currentFilters=filterModel.items.length?filterModel.items:[getDefaultFilter()].filter(Boolean),nextColumnFieldName=getColumnForNewFilter({currentFilters,columns:filterableColumns});if(null===nextColumnFieldName)return null;const nextColumnWithOperator=filterableColumns.find((({field})=>field===nextColumnFieldName));return nextColumnWithOperator?getGridFilter(nextColumnWithOperator):null}),[filterModel.items,filterableColumns,getColumnForNewFilter,getDefaultFilter]),items=react.useMemo((()=>filterModel.items.length?filterModel.items:(placeholderFilter.current||(placeholderFilter.current=getDefaultFilter()),placeholderFilter.current?[placeholderFilter.current]:[])),[filterModel.items,getDefaultFilter]),hasMultipleFilters=items.length>1,deleteFilter=react.useCallback((item=>{const shouldCloseFilterPanel=1===items.length;apiRef.current.deleteFilterItem(item),shouldCloseFilterPanel&&apiRef.current.hideFilterPanel()}),[apiRef,items.length]);return react.useEffect((()=>{logicOperators.length>0&&filterModel.logicOperator&&!logicOperators.includes(filterModel.logicOperator)&&applyFilterLogicOperator(logicOperators[0])}),[logicOperators,applyFilterLogicOperator,filterModel.logicOperator]),react.useEffect((()=>{items.length>0&&lastFilterRef.current.focus()}),[items.length]),(0,jsx_runtime.jsxs)(GridPanelWrapper,(0,esm_extends.Z)({ref},other,{children:[(0,jsx_runtime.jsx)(GridPanelContent,{children:items.map(((item,index)=>(0,jsx_runtime.jsx)(GridFilterForm,(0,esm_extends.Z)({item,applyFilterChanges:applyFilter,deleteFilter,hasMultipleFilters,showMultiFilterOperators:index>0,multiFilterOperator:filterModel.logicOperator,disableMultiFilterOperator:1!==index,applyMultiFilterOperatorChanges:applyFilterLogicOperator,focusElementRef:index===items.length-1?lastFilterRef:null,logicOperators,columnsSort},filterFormProps),null==item.id?index:item.id)))}),rootProps.disableMultipleColumnsFiltering||disableAddFilterButton&&disableRemoveAllButton?null:(0,jsx_runtime.jsxs)(GridPanelFooter,{children:[disableAddFilterButton?(0,jsx_runtime.jsx)("span",{}):(0,jsx_runtime.jsx)(rootProps.slots.baseButton,(0,esm_extends.Z)({onClick:()=>{const newFilter=getNewFilter();newFilter&&apiRef.current.upsertFilterItems([...items,newFilter])},startIcon:(0,jsx_runtime.jsx)(rootProps.slots.filterPanelAddIcon,{})},null==(_rootProps$slotProps=rootProps.slotProps)?void 0:_rootProps$slotProps.baseButton,{children:apiRef.current.getLocaleText("filterPanelAddFilter")})),disableRemoveAllButton?null:(0,jsx_runtime.jsx)(rootProps.slots.baseButton,(0,esm_extends.Z)({onClick:()=>{1===items.length&&void 0===items[0].value&&(apiRef.current.deleteFilterItem(items[0]),apiRef.current.hideFilterPanel()),apiRef.current.setFilterModel((0,esm_extends.Z)({},filterModel,{items:[]}))},startIcon:(0,jsx_runtime.jsx)(rootProps.slots.filterPanelRemoveAllIcon,{})},null==(_rootProps$slotProps2=rootProps.slotProps)?void 0:_rootProps$slotProps2.baseButton,{children:apiRef.current.getLocaleText("filterPanelRemoveAll")}))]})]}))}));var IconButton=__webpack_require__("./node_modules/@mui/material/IconButton/IconButton.js"),switchClasses=__webpack_require__("./node_modules/@mui/material/Switch/switchClasses.js"),FormControlLabel=__webpack_require__("./node_modules/@mui/material/FormControlLabel/FormControlLabel.js");const GridPanelHeader_excluded=["className"],GridPanelHeader_useUtilityClasses=ownerState=>{const{classes}=ownerState;return(0,composeClasses.Z)({root:["panelHeader"]},getDataGridUtilityClass,classes)},GridPanelHeaderRoot=(0,esm_styled.Z)("div",{name:"MuiDataGrid",slot:"PanelHeader",overridesResolver:(props,styles)=>styles.panelHeader})((({theme})=>({padding:theme.spacing(1)})));function GridPanelHeader(props){const{className}=props,other=(0,objectWithoutPropertiesLoose.Z)(props,GridPanelHeader_excluded),rootProps=useGridRootProps(),classes=GridPanelHeader_useUtilityClasses(rootProps);return(0,jsx_runtime.jsx)(GridPanelHeaderRoot,(0,esm_extends.Z)({className:(0,clsx_m.Z)(className,classes.root),ownerState:rootProps},other))}const GridColumnsPanel_excluded=["sort","searchPredicate","autoFocusSearchField","disableHideAllButton","disableShowAllButton","getTogglableColumns"],GridColumnsPanelRoot=(0,styled.ZP)("div",{name:"MuiDataGrid",slot:"ColumnsPanel",overridesResolver:(props,styles)=>styles.columnsPanel})({padding:"8px 0px 8px 8px"}),GridColumnsPanelRowRoot=(0,styled.ZP)("div",{name:"MuiDataGrid",slot:"ColumnsPanelRow",overridesResolver:(props,styles)=>styles.columnsPanelRow})((({theme})=>({display:"flex",justifyContent:"space-between",padding:"1px 8px 1px 7px",[`& .${switchClasses.Z.root}`]:{marginRight:theme.spacing(.5)}}))),GridColumnsPanel_collator=((0,styled.ZP)(IconButton.Z)({justifyContent:"flex-end"}),new Intl.Collator),defaultSearchPredicate=(column,searchValue)=>(column.headerName||column.field).toLowerCase().indexOf(searchValue)>-1;const GridPanel_excluded=["children","className","classes"],gridPanelClasses=(0,generateUtilityClasses.Z)("MuiDataGrid",["panel","paper"]),GridPanelRoot=(0,styled.ZP)(Popper.Z,{name:"MuiDataGrid",slot:"Panel",overridesResolver:(props,styles)=>styles.panel})((({theme})=>({zIndex:theme.zIndex.modal}))),GridPaperRoot=(0,styled.ZP)(Paper.Z,{name:"MuiDataGrid",slot:"Paper",overridesResolver:(props,styles)=>styles.paper})((({theme})=>({backgroundColor:(theme.vars||theme).palette.background.paper,minWidth:300,maxHeight:450,display:"flex"}))),GridPanel=react.forwardRef(((props,ref)=>{const{children,className}=props,other=(0,objectWithoutPropertiesLoose.Z)(props,GridPanel_excluded),apiRef=useGridApiContext_useGridApiContext(),rootProps=useGridRootProps(),classes=gridPanelClasses,[isPlaced,setIsPlaced]=react.useState(!1),handleClickAway=react.useCallback((()=>{apiRef.current.hidePreferences()}),[apiRef]),handleKeyDown=react.useCallback((event=>{isEscapeKey(event.key)&&apiRef.current.hidePreferences()}),[apiRef]),modifiers=react.useMemo((()=>[{name:"flip",enabled:!1},{name:"isPlaced",enabled:!0,phase:"main",fn:()=>{setIsPlaced(!0)},effect:()=>()=>{setIsPlaced(!1)}}]),[]),[anchorEl,setAnchorEl]=react.useState(null);return react.useEffect((()=>{var _apiRef$current$rootE,_apiRef$current$rootE2;const columnHeadersElement=null==(_apiRef$current$rootE=apiRef.current.rootElementRef)||null==(_apiRef$current$rootE2=_apiRef$current$rootE.current)?void 0:_apiRef$current$rootE2.querySelector(`.${gridClasses_gridClasses.columnHeaders}`);columnHeadersElement&&setAnchorEl(columnHeadersElement)}),[apiRef]),anchorEl?(0,jsx_runtime.jsx)(GridPanelRoot,(0,esm_extends.Z)({ref,placement:"bottom-start",className:(0,clsx_m.Z)(className,classes.panel),ownerState:rootProps,anchorEl,modifiers},other,{children:(0,jsx_runtime.jsx)(ClickAwayListener.d,{mouseEvent:"onMouseUp",onClickAway:handleClickAway,children:(0,jsx_runtime.jsx)(GridPaperRoot,{className:classes.paper,ownerState:rootProps,elevation:8,onKeyDown:handleKeyDown,children:isPlaced&&children})})})):null}));function findParentElementFromClassName(elem,className){return elem.closest(`.${className}`)}function escapeOperandAttributeSelector(operand){return operand.replace(/["\\]/g,"\\$&")}function getGridRowElementSelector(id){return`.${gridClasses_gridClasses.row}[data-id="${escapeOperandAttributeSelector(String(id))}"]`}const GridRow_excluded=["selected","rowId","row","index","style","position","rowHeight","className","visibleColumns","renderedColumns","containerWidth","firstColumnToRender","lastColumnToRender","isLastVisible","focusedCell","tabbableCell","onClick","onDoubleClick","onMouseEnter","onMouseLeave"],GridRow_excluded2=["changeReason","unstable_updateValueOnRender"];function EmptyCell({width}){if(!width)return null;const style={width};return(0,jsx_runtime.jsx)("div",{className:`${gridClasses_gridClasses.cell} ${gridClasses_gridClasses.withBorderColor}`,style})}const GridRow=react.forwardRef((function GridRow(props,refProp){const{selected,rowId,row,index,style:styleProp,position,rowHeight,className,renderedColumns,containerWidth,firstColumnToRender,isLastVisible=!1,focusedCell,tabbableCell,onClick,onDoubleClick,onMouseEnter,onMouseLeave}=props,other=(0,objectWithoutPropertiesLoose.Z)(props,GridRow_excluded),apiRef=useGridApiContext_useGridApiContext(),ref=react.useRef(null),rootProps=useGridRootProps(),currentPage=useGridVisibleRows(apiRef,rootProps),columnsTotalWidth=useGridSelector(apiRef,gridColumnsTotalWidthSelector),sortModel=useGridSelector(apiRef,gridSortModelSelector),treeDepth=useGridSelector(apiRef,gridRowMaximumTreeDepthSelector),headerGroupingMaxDepth=useGridSelector(apiRef,gridColumnGroupsHeaderMaxDepthSelector),editRowsState=useGridSelector(apiRef,gridEditRowsStateSelector),handleRef=(0,useForkRef.Z)(ref,refProp),ariaRowIndex=index+headerGroupingMaxDepth+2,classes=(ownerState=>{const{editable,editing,selected,isLastVisible,rowHeight,classes}=ownerState,slots={root:["row",selected&&"selected",editable&&"row--editable",editing&&"row--editing",isLastVisible&&"row--lastVisible","auto"===rowHeight&&"row--dynamicHeight"]};return(0,composeClasses.Z)(slots,getDataGridUtilityClass,classes)})({selected,isLastVisible,classes:rootProps.classes,editing:apiRef.current.getRowMode(rowId)===GridRowModes.Edit,editable:rootProps.editMode===GridEditModes.Row,rowHeight});react.useLayoutEffect((()=>{"auto"===rowHeight&&ref.current&&"undefined"==typeof ResizeObserver&&apiRef.current.unstable_storeRowHeightMeasurement(rowId,ref.current.clientHeight,position)}),[apiRef,rowHeight,rowId,position]),react.useLayoutEffect((()=>{if(currentPage.range){const rowIndex=apiRef.current.getRowIndexRelativeToVisibleRows(rowId);null!=rowIndex&&apiRef.current.unstable_setLastMeasuredRowIndex(rowIndex)}const rootElement=ref.current;if(!rootElement||"auto"!==rowHeight||"undefined"==typeof ResizeObserver)return;const resizeObserver=new ResizeObserver((entries=>{const[entry]=entries,height=entry.borderBoxSize&&entry.borderBoxSize.length>0?entry.borderBoxSize[0].blockSize:entry.contentRect.height;apiRef.current.unstable_storeRowHeightMeasurement(rowId,height,position)}));return resizeObserver.observe(rootElement),()=>resizeObserver.disconnect()}),[apiRef,currentPage.range,index,rowHeight,rowId,position]);const publish=react.useCallback(((eventName,propHandler)=>event=>{(1!==event.target.nodeType||event.currentTarget.contains(event.target))&&apiRef.current.getRow(rowId)&&(apiRef.current.publishEvent(eventName,apiRef.current.getRowParams(rowId),event),propHandler&&propHandler(event))}),[apiRef,rowId]),publishClick=react.useCallback((event=>{const cell=findParentElementFromClassName(event.target,gridClasses_gridClasses.cell),field=null==cell?void 0:cell.getAttribute("data-field");if(field){if(field===GRID_CHECKBOX_SELECTION_COL_DEF.field)return;if("__detail_panel_toggle__"===field)return;if("__reorder__"===field)return;if(apiRef.current.getCellMode(rowId,field)===GridCellModes.Edit)return;if("actions"===apiRef.current.getColumn(field).type)return}publish("rowClick",onClick)(event)}),[apiRef,onClick,publish,rowId]),{slots,slotProps,classes:rootClasses,disableColumnReorder,getCellClassName}=rootProps,rowReordering=rootProps.rowReordering,CellComponent=slots.cell,getCell=react.useCallback(((column,cellProps)=>{const cellParams=apiRef.current.getCellParams(rowId,column.field),classNames=apiRef.current.unstable_applyPipeProcessors("cellClassName",[],{id:rowId,field:column.field}),disableDragEvents=disableColumnReorder&&column.disableReorder||!rowReordering&&!!sortModel.length&&treeDepth>1&&Object.keys(editRowsState).length>0;column.cellClassName&&classNames.push((0,clsx_m.Z)("function"==typeof column.cellClassName?column.cellClassName(cellParams):column.cellClassName));const editCellState=editRowsState[rowId]?editRowsState[rowId][column.field]:null;let content;if(null==editCellState&&column.renderCell&&(content=column.renderCell((0,esm_extends.Z)({},cellParams,{api:apiRef.current})),classNames.push((0,clsx_m.Z)(gridClasses_gridClasses["cell--withRenderer"],null==rootClasses?void 0:rootClasses["cell--withRenderer"]))),null!=editCellState&&column.renderEditCell){const updatedRow=apiRef.current.getRowWithUpdatedValues(rowId,column.field),editCellStateRest=(0,objectWithoutPropertiesLoose.Z)(editCellState,GridRow_excluded2),params=(0,esm_extends.Z)({},cellParams,{row:updatedRow},editCellStateRest,{api:apiRef.current});content=column.renderEditCell(params),classNames.push((0,clsx_m.Z)(gridClasses_gridClasses["cell--editing"],null==rootClasses?void 0:rootClasses["cell--editing"]))}getCellClassName&&classNames.push(getCellClassName(cellParams));const hasFocus=focusedCell===column.field,tabIndex=tabbableCell===column.field?0:-1,isSelected=apiRef.current.unstable_applyPipeProcessors("isCellSelected",!1,{id:rowId,field:column.field});return(0,jsx_runtime.jsx)(CellComponent,(0,esm_extends.Z)({value:cellParams.value,field:column.field,width:cellProps.width,rowId,height:rowHeight,showRightBorder:cellProps.showRightBorder,formattedValue:cellParams.formattedValue,align:column.align||"left",cellMode:cellParams.cellMode,colIndex:cellProps.indexRelativeToAllColumns,isEditable:cellParams.isEditable,isSelected,hasFocus,tabIndex,className:(0,clsx_m.Z)(classNames),colSpan:cellProps.colSpan,disableDragEvents},null==slotProps?void 0:slotProps.cell,{children:content}),column.field)}),[apiRef,rowId,disableColumnReorder,rowReordering,sortModel.length,treeDepth,editRowsState,getCellClassName,focusedCell,tabbableCell,CellComponent,rowHeight,null==slotProps?void 0:slotProps.cell,rootClasses]),sizes=apiRef.current.unstable_getRowInternalSizes(rowId);let minHeight=rowHeight;if("auto"===minHeight&&sizes){let numberOfBaseSizes=0;const maximumSize=Object.entries(sizes).reduce(((acc,[key,size])=>/^base[A-Z]/.test(key)?(numberOfBaseSizes+=1,size>acc?size:acc):acc),0);maximumSize>0&&numberOfBaseSizes>1&&(minHeight=maximumSize)}const style=(0,esm_extends.Z)({},styleProp,{maxHeight:"auto"===rowHeight?"none":rowHeight,minHeight});if(null!=sizes&&sizes.spacingTop){style["border"===rootProps.rowSpacingType?"borderTopWidth":"marginTop"]=sizes.spacingTop}if(null!=sizes&&sizes.spacingBottom){const property="border"===rootProps.rowSpacingType?"borderBottomWidth":"marginBottom";let propertyValue=style[property];"number"!=typeof propertyValue&&(propertyValue=parseInt(propertyValue||"0",10)),propertyValue+=sizes.spacingBottom,style[property]=propertyValue}const rowClassNames=apiRef.current.unstable_applyPipeProcessors("rowClassName",[],rowId);if("function"==typeof rootProps.getRowClassName){var _currentPage$range;const indexRelativeToCurrentPage=index-((null==(_currentPage$range=currentPage.range)?void 0:_currentPage$range.firstRowIndex)||0),rowParams=(0,esm_extends.Z)({},apiRef.current.getRowParams(rowId),{isFirstVisible:0===indexRelativeToCurrentPage,isLastVisible:indexRelativeToCurrentPage===currentPage.rows.length-1,indexRelativeToCurrentPage});rowClassNames.push(rootProps.getRowClassName(rowParams))}const randomNumber=randomNumberBetween(1e4,20,80),rowType=apiRef.current.getRowNode(rowId).type,cells=[];for(let i=0;i<renderedColumns.length;i+=1){const column=renderedColumns[i],indexRelativeToAllColumns=firstColumnToRender+i,cellColSpanInfo=apiRef.current.unstable_getCellColSpanInfo(rowId,indexRelativeToAllColumns);if(cellColSpanInfo&&!cellColSpanInfo.spannedByColSpan)if("skeletonRow"!==rowType){const{colSpan,width}=cellColSpanInfo.cellProps,cellProps={width,colSpan,showRightBorder:rootProps.showCellVerticalBorder,indexRelativeToAllColumns};cells.push(getCell(column,cellProps))}else{const{width}=cellColSpanInfo.cellProps,contentWidth=Math.round(randomNumber());cells.push((0,jsx_runtime.jsx)(rootProps.slots.skeletonCell,{width,contentWidth,field:column.field,align:column.align},column.field))}}const emptyCellWidth=containerWidth-columnsTotalWidth,eventHandlers=row?{onClick:publishClick,onDoubleClick:publish("rowDoubleClick",onDoubleClick),onMouseEnter:publish("rowMouseEnter",onMouseEnter),onMouseLeave:publish("rowMouseLeave",onMouseLeave)}:null;return(0,jsx_runtime.jsxs)("div",(0,esm_extends.Z)({ref:handleRef,"data-id":rowId,"data-rowindex":index,role:"row",className:(0,clsx_m.Z)(...rowClassNames,classes.root,className),"aria-rowindex":ariaRowIndex,"aria-selected":selected,style},eventHandlers,other,{children:[cells,emptyCellWidth>0&&(0,jsx_runtime.jsx)(EmptyCell,{width:emptyCellWidth})]}))}));var react_dom=__webpack_require__("./node_modules/react-dom/index.js"),esm_useTheme=__webpack_require__("./node_modules/@mui/system/esm/useTheme.js"),defaultMemoize=__webpack_require__("./node_modules/reselect/es/defaultMemoize.js");function GridColumnHeaderSortIconRaw(props){var _rootProps$slotProps;const{direction,index,sortingOrder}=props,apiRef=useGridApiContext_useGridApiContext(),rootProps=useGridRootProps(),classes=(ownerState=>{const{classes}=ownerState;return(0,composeClasses.Z)({icon:["sortIcon"]},getDataGridUtilityClass,classes)})((0,esm_extends.Z)({},props,{classes:rootProps.classes})),iconElement=function getIcon(icons,direction,className,sortingOrder){let Icon;const iconProps={};return"asc"===direction?Icon=icons.columnSortedAscendingIcon:"desc"===direction?Icon=icons.columnSortedDescendingIcon:(Icon=icons.columnUnsortedIcon,iconProps.sortingOrder=sortingOrder),Icon?(0,jsx_runtime.jsx)(Icon,(0,esm_extends.Z)({fontSize:"small",className},iconProps)):null}(rootProps.slots,direction,classes.icon,sortingOrder);if(!iconElement)return null;const iconButton=(0,jsx_runtime.jsx)(rootProps.slots.baseIconButton,(0,esm_extends.Z)({tabIndex:-1,"aria-label":apiRef.current.getLocaleText("columnHeaderSortIconLabel"),title:apiRef.current.getLocaleText("columnHeaderSortIconLabel"),size:"small"},null==(_rootProps$slotProps=rootProps.slotProps)?void 0:_rootProps$slotProps.baseIconButton,{children:iconElement}));return(0,jsx_runtime.jsxs)(GridIconButtonContainer,{children:[null!=index&&(0,jsx_runtime.jsx)(Badge.Z,{badgeContent:index,color:"default",children:iconButton}),null==index&&iconButton]})}const GridColumnHeaderSortIcon=react.memo(GridColumnHeaderSortIconRaw),ColumnHeaderMenuIcon=react.memo((props=>{var _rootProps$slotProps,_rootProps$slotProps2;const{colDef,open,columnMenuId,columnMenuButtonId,iconButtonRef}=props,apiRef=useGridApiContext_useGridApiContext(),rootProps=useGridRootProps(),classes=(ownerState=>{const{classes,open}=ownerState,slots={root:["menuIcon",open&&"menuOpen"],button:["menuIconButton"]};return(0,composeClasses.Z)(slots,getDataGridUtilityClass,classes)})((0,esm_extends.Z)({},props,{classes:rootProps.classes})),handleMenuIconClick=react.useCallback((event=>{event.preventDefault(),event.stopPropagation(),apiRef.current.toggleColumnMenu(colDef.field)}),[apiRef,colDef.field]);return(0,jsx_runtime.jsx)("div",{className:classes.root,children:(0,jsx_runtime.jsx)(rootProps.slots.baseTooltip,(0,esm_extends.Z)({title:apiRef.current.getLocaleText("columnMenuLabel"),enterDelay:1e3},null==(_rootProps$slotProps=rootProps.slotProps)?void 0:_rootProps$slotProps.baseTooltip,{children:(0,jsx_runtime.jsx)(rootProps.slots.baseIconButton,(0,esm_extends.Z)({ref:iconButtonRef,tabIndex:-1,className:classes.button,"aria-label":apiRef.current.getLocaleText("columnMenuLabel"),size:"small",onClick:handleMenuIconClick,"aria-haspopup":"menu","aria-expanded":open,"aria-controls":open?columnMenuId:void 0,id:columnMenuButtonId},null==(_rootProps$slotProps2=rootProps.slotProps)?void 0:_rootProps$slotProps2.baseIconButton,{children:(0,jsx_runtime.jsx)(rootProps.slots.columnMenuIcon,{fontSize:"small"})}))}))})}));function GridColumnHeaderMenu({columnMenuId,columnMenuButtonId,ContentComponent,contentComponentProps,field,open,target,onExited}){const apiRef=useGridApiContext_useGridApiContext(),colDef=apiRef.current.getColumn(field),hideMenu=react.useCallback((event=>{event.stopPropagation(),null!=target&&target.contains(event.target)||apiRef.current.hideColumnMenu()}),[apiRef,target]);return target?(0,jsx_runtime.jsx)(GridMenu,{placement:"bottom-"+("right"===colDef.align?"start":"end"),open,target,onClickAway:hideMenu,onExited,children:(0,jsx_runtime.jsx)(ContentComponent,(0,esm_extends.Z)({colDef,hideMenu,open,id:columnMenuId,labelledby:columnMenuButtonId},contentComponentProps))}):null}const GridColumnHeaderTitle_excluded=["className"],GridColumnHeaderTitleRoot=(0,esm_styled.Z)("div",{name:"MuiDataGrid",slot:"ColumnHeaderTitle",overridesResolver:(props,styles)=>styles.columnHeaderTitle})({textOverflow:"ellipsis",overflow:"hidden",whiteSpace:"nowrap",fontWeight:"var(--unstable_DataGrid-headWeight)"}),ColumnHeaderInnerTitle=react.forwardRef((function ColumnHeaderInnerTitle(props,ref){const{className}=props,other=(0,objectWithoutPropertiesLoose.Z)(props,GridColumnHeaderTitle_excluded),rootProps=useGridRootProps(),classes=(ownerState=>{const{classes}=ownerState;return(0,composeClasses.Z)({root:["columnHeaderTitle"]},getDataGridUtilityClass,classes)})(rootProps);return(0,jsx_runtime.jsx)(GridColumnHeaderTitleRoot,(0,esm_extends.Z)({ref,className:(0,clsx_m.Z)(classes.root,className),ownerState:rootProps},other))}));function GridColumnHeaderTitle(props){var _rootProps$slotProps;const{label,description}=props,rootProps=useGridRootProps(),titleRef=react.useRef(null),[tooltip,setTooltip]=react.useState(""),handleMouseOver=react.useCallback((()=>{if(!description&&null!=titleRef&&titleRef.current){const isOver=function isOverflown(element){return element.scrollHeight>element.clientHeight||element.scrollWidth>element.clientWidth}(titleRef.current);setTooltip(isOver?label:"")}}),[description,label]);return(0,jsx_runtime.jsx)(rootProps.slots.baseTooltip,(0,esm_extends.Z)({title:description||tooltip},null==(_rootProps$slotProps=rootProps.slotProps)?void 0:_rootProps$slotProps.baseTooltip,{children:(0,jsx_runtime.jsx)(ColumnHeaderInnerTitle,{onMouseOver:handleMouseOver,ref:titleRef,children:label})}))}const GridColumnHeaderSeparator_excluded=["resizable","resizing","height","side"];var GridColumnHeaderSeparatorSides=function(GridColumnHeaderSeparatorSides){return GridColumnHeaderSeparatorSides.Left="left",GridColumnHeaderSeparatorSides.Right="right",GridColumnHeaderSeparatorSides}(GridColumnHeaderSeparatorSides||{});function GridColumnHeaderSeparatorRaw(props){const{height,side=GridColumnHeaderSeparatorSides.Right}=props,other=(0,objectWithoutPropertiesLoose.Z)(props,GridColumnHeaderSeparator_excluded),rootProps=useGridRootProps(),classes=(ownerState=>{const{resizable,resizing,classes,side}=ownerState,slots={root:["columnSeparator",resizable&&"columnSeparator--resizable",resizing&&"columnSeparator--resizing",side&&`columnSeparator--side${(0,capitalize.Z)(side)}`],icon:["iconSeparator"]};return(0,composeClasses.Z)(slots,getDataGridUtilityClass,classes)})((0,esm_extends.Z)({},props,{side,classes:rootProps.classes})),stopClick=react.useCallback((event=>{event.preventDefault(),event.stopPropagation()}),[]);return(0,jsx_runtime.jsx)("div",(0,esm_extends.Z)({className:classes.root,style:{minHeight:height,opacity:rootProps.showColumnVerticalBorder?0:1}},other,{onClick:stopClick,children:(0,jsx_runtime.jsx)(rootProps.slots.columnResizeIcon,{className:classes.icon})}))}const GridColumnHeaderSeparator=react.memo(GridColumnHeaderSeparatorRaw),GridGenericColumnHeaderItem_excluded=["classes","columnMenuOpen","colIndex","height","isResizing","sortDirection","hasFocus","tabIndex","separatorSide","isDraggable","headerComponent","description","elementId","width","columnMenuIconButton","columnMenu","columnTitleIconButtons","headerClassName","label","resizable","draggableContainerProps","columnHeaderSeparatorProps"],GridGenericColumnHeaderItem=react.forwardRef((function GridGenericColumnHeaderItem(props,ref){const{classes,columnMenuOpen,colIndex,height,isResizing,sortDirection,hasFocus,tabIndex,separatorSide,isDraggable,headerComponent,description,width,columnMenuIconButton=null,columnMenu=null,columnTitleIconButtons=null,headerClassName,label,resizable,draggableContainerProps,columnHeaderSeparatorProps}=props,other=(0,objectWithoutPropertiesLoose.Z)(props,GridGenericColumnHeaderItem_excluded),apiRef=useGridPrivateApiContext(),rootProps=useGridRootProps(),headerCellRef=react.useRef(null),[showColumnMenuIcon,setShowColumnMenuIcon]=react.useState(columnMenuOpen),handleRef=(0,useForkRef.Z)(headerCellRef,ref);let ariaSort="none";return null!=sortDirection&&(ariaSort="asc"===sortDirection?"ascending":"descending"),react.useEffect((()=>{showColumnMenuIcon||setShowColumnMenuIcon(columnMenuOpen)}),[showColumnMenuIcon,columnMenuOpen]),react.useLayoutEffect((()=>{const columnMenuState=apiRef.current.state.columnMenu;if(hasFocus&&!columnMenuState.open){const elementToFocus=headerCellRef.current.querySelector('[tabindex="0"]')||headerCellRef.current;null==elementToFocus||elementToFocus.focus(),apiRef.current.columnHeadersContainerElementRef.current.scrollLeft=0}}),[apiRef,hasFocus]),(0,jsx_runtime.jsxs)("div",(0,esm_extends.Z)({ref:handleRef,className:(0,clsx_m.Z)(classes.root,headerClassName),style:{height,width,minWidth:width,maxWidth:width},role:"columnheader",tabIndex,"aria-colindex":colIndex+1,"aria-sort":ariaSort,"aria-label":null==headerComponent?label:void 0},other,{children:[(0,jsx_runtime.jsxs)("div",(0,esm_extends.Z)({className:classes.draggableContainer,draggable:isDraggable},draggableContainerProps,{children:[(0,jsx_runtime.jsxs)("div",{className:classes.titleContainer,children:[(0,jsx_runtime.jsx)("div",{className:classes.titleContainerContent,children:void 0!==headerComponent?headerComponent:(0,jsx_runtime.jsx)(GridColumnHeaderTitle,{label,description,columnWidth:width})}),columnTitleIconButtons]}),columnMenuIconButton]})),(0,jsx_runtime.jsx)(GridColumnHeaderSeparator,(0,esm_extends.Z)({resizable:!rootProps.disableColumnResize&&!!resizable,resizing:isResizing,height,side:separatorSide},columnHeaderSeparatorProps)),columnMenu]}))}));function GridColumnHeaderItem(props){var _rootProps$slotProps,_colDef$sortingOrder,_rootProps$slotProps2,_colDef$headerName;const{colDef,columnMenuOpen,colIndex,headerHeight,isResizing,sortDirection,sortIndex,filterItemsCounter,hasFocus,tabIndex,disableReorder,separatorSide}=props,apiRef=useGridPrivateApiContext(),rootProps=useGridRootProps(),headerCellRef=react.useRef(null),columnMenuId=(0,useId.Z)(),columnMenuButtonId=(0,useId.Z)(),iconButtonRef=react.useRef(null),[showColumnMenuIcon,setShowColumnMenuIcon]=react.useState(columnMenuOpen),isDraggable=react.useMemo((()=>!rootProps.disableColumnReorder&&!disableReorder&&!colDef.disableReorder),[rootProps.disableColumnReorder,disableReorder,colDef.disableReorder]);let headerComponent;colDef.renderHeader&&(headerComponent=colDef.renderHeader(apiRef.current.getColumnHeaderParams(colDef.field)));const classes=(ownerState=>{const{colDef,classes,isDragging,sortDirection,showRightBorder,filterItemsCounter}=ownerState,isColumnSorted=null!=sortDirection,isColumnFiltered=null!=filterItemsCounter&&filterItemsCounter>0,isColumnNumeric="number"===colDef.type,slots={root:["columnHeader","left"===colDef.headerAlign&&"columnHeader--alignLeft","center"===colDef.headerAlign&&"columnHeader--alignCenter","right"===colDef.headerAlign&&"columnHeader--alignRight",colDef.sortable&&"columnHeader--sortable",isDragging&&"columnHeader--moving",isColumnSorted&&"columnHeader--sorted",isColumnFiltered&&"columnHeader--filtered",isColumnNumeric&&"columnHeader--numeric","withBorderColor",showRightBorder&&"columnHeader--withRightBorder"],draggableContainer:["columnHeaderDraggableContainer"],titleContainer:["columnHeaderTitleContainer"],titleContainerContent:["columnHeaderTitleContainerContent"]};return(0,composeClasses.Z)(slots,getDataGridUtilityClass,classes)})((0,esm_extends.Z)({},props,{classes:rootProps.classes,showRightBorder:rootProps.showColumnVerticalBorder})),publish=react.useCallback((eventName=>event=>{event.currentTarget.contains(event.target)&&apiRef.current.publishEvent(eventName,apiRef.current.getColumnHeaderParams(colDef.field),event)}),[apiRef,colDef.field]),mouseEventsHandlers=react.useMemo((()=>({onClick:publish("columnHeaderClick"),onDoubleClick:publish("columnHeaderDoubleClick"),onMouseOver:publish("columnHeaderOver"),onMouseOut:publish("columnHeaderOut"),onMouseEnter:publish("columnHeaderEnter"),onMouseLeave:publish("columnHeaderLeave"),onKeyDown:publish("columnHeaderKeyDown"),onFocus:publish("columnHeaderFocus"),onBlur:publish("columnHeaderBlur")})),[publish]),draggableEventHandlers=react.useMemo((()=>isDraggable?{onDragStart:publish("columnHeaderDragStart"),onDragEnter:publish("columnHeaderDragEnter"),onDragOver:publish("columnHeaderDragOver"),onDragEnd:publish("columnHeaderDragEnd")}:{}),[isDraggable,publish]),columnHeaderSeparatorProps=react.useMemo((()=>({onMouseDown:publish("columnSeparatorMouseDown")})),[publish]);react.useEffect((()=>{showColumnMenuIcon||setShowColumnMenuIcon(columnMenuOpen)}),[showColumnMenuIcon,columnMenuOpen]);const handleExited=react.useCallback((()=>{setShowColumnMenuIcon(!1)}),[]),columnMenuIconButton=!rootProps.disableColumnMenu&&!colDef.disableColumnMenu&&(0,jsx_runtime.jsx)(ColumnHeaderMenuIcon,{colDef,columnMenuId,columnMenuButtonId,open:showColumnMenuIcon,iconButtonRef}),columnMenu=(0,jsx_runtime.jsx)(GridColumnHeaderMenu,{columnMenuId,columnMenuButtonId,field:colDef.field,open:columnMenuOpen,target:iconButtonRef.current,ContentComponent:rootProps.slots.columnMenu,contentComponentProps:null==(_rootProps$slotProps=rootProps.slotProps)?void 0:_rootProps$slotProps.columnMenu,onExited:handleExited}),sortingOrder=null!=(_colDef$sortingOrder=colDef.sortingOrder)?_colDef$sortingOrder:rootProps.sortingOrder,columnTitleIconButtons=(0,jsx_runtime.jsxs)(react.Fragment,{children:[!rootProps.disableColumnFilter&&(0,jsx_runtime.jsx)(rootProps.slots.columnHeaderFilterIconButton,(0,esm_extends.Z)({field:colDef.field,counter:filterItemsCounter},null==(_rootProps$slotProps2=rootProps.slotProps)?void 0:_rootProps$slotProps2.columnHeaderFilterIconButton)),colDef.sortable&&!colDef.hideSortIcons&&(0,jsx_runtime.jsx)(GridColumnHeaderSortIcon,{direction:sortDirection,index:sortIndex,sortingOrder})]});react.useLayoutEffect((()=>{const columnMenuState=apiRef.current.state.columnMenu;if(hasFocus&&!columnMenuState.open){const elementToFocus=headerCellRef.current.querySelector('[tabindex="0"]')||headerCellRef.current;null==elementToFocus||elementToFocus.focus(),apiRef.current.columnHeadersContainerElementRef.current.scrollLeft=0}}),[apiRef,hasFocus]);const headerClassName="function"==typeof colDef.headerClassName?colDef.headerClassName({field:colDef.field,colDef}):colDef.headerClassName,label=null!=(_colDef$headerName=colDef.headerName)?_colDef$headerName:colDef.field;return(0,jsx_runtime.jsx)(GridGenericColumnHeaderItem,(0,esm_extends.Z)({ref:headerCellRef,classes,columnMenuOpen,colIndex,height:headerHeight,isResizing,sortDirection,hasFocus,tabIndex,separatorSide,isDraggable,headerComponent,description:colDef.description,elementId:colDef.field,width:colDef.computedWidth,columnMenuIconButton,columnTitleIconButtons,headerClassName,label,resizable:!rootProps.disableColumnResize&&!!colDef.resizable,"data-field":colDef.field,columnMenu,draggableContainerProps:draggableEventHandlers,columnHeaderSeparatorProps},mouseEventsHandlers))}const gridRowsMetaSelector=state=>state.rowsMeta,useGridVirtualScroller_excluded=["style"],useGridVirtualScroller_excluded2=["style"],_excluded3=["style"];function binarySearch(offset,positions,sliceStart=0,sliceEnd=positions.length){if(positions.length<=0)return-1;if(sliceStart>=sliceEnd)return sliceStart;const pivot=sliceStart+Math.floor((sliceEnd-sliceStart)/2);return offset<=positions[pivot]?binarySearch(offset,positions,sliceStart,pivot):binarySearch(offset,positions,pivot+1,sliceEnd)}const getRenderableIndexes=({firstIndex,lastIndex,buffer,minFirstIndex,maxLastIndex})=>[clamp(firstIndex-buffer,minFirstIndex,maxLastIndex),clamp(lastIndex+buffer,minFirstIndex,maxLastIndex)],useGridVirtualScroller=props=>{var _currentPage$range3,_currentPage$range4;const apiRef=useGridPrivateApiContext(),rootProps=useGridRootProps(),visibleColumns=useGridSelector(apiRef,gridVisibleColumnDefinitionsSelector),{ref,disableVirtualization,onRenderZonePositioning,renderZoneMinColumnIndex=0,renderZoneMaxColumnIndex=visibleColumns.length,getRowProps}=props,theme=(0,useTheme.Z)(),columnPositions=useGridSelector(apiRef,gridColumnPositionsSelector),columnsTotalWidth=useGridSelector(apiRef,gridColumnsTotalWidthSelector),cellFocus=useGridSelector(apiRef,gridFocusCellSelector),cellTabIndex=useGridSelector(apiRef,gridTabIndexCellSelector),rowsMeta=useGridSelector(apiRef,gridRowsMetaSelector),selectedRowsLookup=useGridSelector(apiRef,selectedIdsLookupSelector),currentPage=useGridVisibleRows(apiRef,rootProps),renderZoneRef=react.useRef(null),rootRef=react.useRef(null),handleRef=(0,useForkRef.Z)(ref,rootRef),[renderContext,setRenderContext]=react.useState(null),prevRenderContext=react.useRef(renderContext),scrollPosition=react.useRef({top:0,left:0}),[containerDimensions,setContainerDimensions]=react.useState({width:null,height:null}),prevTotalWidth=react.useRef(columnsTotalWidth),rowStyleCache=react.useRef(Object.create(null)),prevGetRowProps=react.useRef(),prevRootRowStyle=react.useRef(),getRenderedColumnsRef=react.useRef((0,defaultMemoize.PW)(((columns,firstColumnToRender,lastColumnToRender)=>columns.slice(firstColumnToRender,lastColumnToRender)))),getNearestIndexToRender=react.useCallback((offset=>{var _currentPage$range,_currentPage$range2;const lastMeasuredIndexRelativeToAllRows=apiRef.current.getLastMeasuredRowIndex();let allRowsMeasured=lastMeasuredIndexRelativeToAllRows===1/0;null!=(_currentPage$range=currentPage.range)&&_currentPage$range.lastRowIndex&&!allRowsMeasured&&(allRowsMeasured=lastMeasuredIndexRelativeToAllRows>=currentPage.range.lastRowIndex);const lastMeasuredIndexRelativeToCurrentPage=clamp(lastMeasuredIndexRelativeToAllRows-((null==(_currentPage$range2=currentPage.range)?void 0:_currentPage$range2.firstRowIndex)||0),0,rowsMeta.positions.length);return allRowsMeasured||rowsMeta.positions[lastMeasuredIndexRelativeToCurrentPage]>=offset?binarySearch(offset,rowsMeta.positions):function exponentialSearch(offset,positions,index){let interval=1;for(;index<positions.length&&Math.abs(positions[index])<offset;)index+=interval,interval*=2;return binarySearch(offset,positions,Math.floor(index/2),Math.min(index,positions.length))}(offset,rowsMeta.positions,lastMeasuredIndexRelativeToCurrentPage)}),[apiRef,null==(_currentPage$range3=currentPage.range)?void 0:_currentPage$range3.firstRowIndex,null==(_currentPage$range4=currentPage.range)?void 0:_currentPage$range4.lastRowIndex,rowsMeta.positions]),computeRenderContext=react.useCallback((()=>{if(disableVirtualization)return{firstRowIndex:0,lastRowIndex:currentPage.rows.length,firstColumnIndex:0,lastColumnIndex:visibleColumns.length};const{top,left}=scrollPosition.current,firstRowIndex=Math.min(getNearestIndexToRender(top),rowsMeta.positions.length-1),lastRowIndex=rootProps.autoHeight?firstRowIndex+currentPage.rows.length:getNearestIndexToRender(top+containerDimensions.height);let hasRowWithAutoHeight=!1,firstColumnIndex=0,lastColumnIndex=columnPositions.length;const[firstRowToRender,lastRowToRender]=getRenderableIndexes({firstIndex:firstRowIndex,lastIndex:lastRowIndex,minFirstIndex:0,maxLastIndex:currentPage.rows.length,buffer:rootProps.rowBuffer});for(let i=firstRowToRender;i<lastRowToRender&&!hasRowWithAutoHeight;i+=1){const row=currentPage.rows[i];hasRowWithAutoHeight=apiRef.current.rowHasAutoHeight(row.id)}return hasRowWithAutoHeight||(firstColumnIndex=binarySearch(Math.abs(left),columnPositions),lastColumnIndex=binarySearch(Math.abs(left)+containerDimensions.width,columnPositions)),{firstRowIndex,lastRowIndex,firstColumnIndex,lastColumnIndex}}),[disableVirtualization,getNearestIndexToRender,rowsMeta.positions.length,rootProps.autoHeight,rootProps.rowBuffer,currentPage.rows,columnPositions,visibleColumns.length,apiRef,containerDimensions]);(0,useEnhancedEffect.Z)((()=>{disableVirtualization?renderZoneRef.current.style.transform="translate3d(0px, 0px, 0px)":(rootRef.current.scrollLeft=0,rootRef.current.scrollTop=0)}),[disableVirtualization]),(0,useEnhancedEffect.Z)((()=>{setContainerDimensions({width:rootRef.current.clientWidth,height:rootRef.current.clientHeight})}),[rowsMeta.currentPageTotalHeight]);const handleResize=react.useCallback((()=>{rootRef.current&&setContainerDimensions({width:rootRef.current.clientWidth,height:rootRef.current.clientHeight})}),[]);useGridApiEventHandler(apiRef,"debouncedResize",handleResize);const updateRenderZonePosition=react.useCallback((nextRenderContext=>{const[firstRowToRender,lastRowToRender]=getRenderableIndexes({firstIndex:nextRenderContext.firstRowIndex,lastIndex:nextRenderContext.lastRowIndex,minFirstIndex:0,maxLastIndex:currentPage.rows.length,buffer:rootProps.rowBuffer}),[initialFirstColumnToRender]=getRenderableIndexes({firstIndex:nextRenderContext.firstColumnIndex,lastIndex:nextRenderContext.lastColumnIndex,minFirstIndex:renderZoneMinColumnIndex,maxLastIndex:renderZoneMaxColumnIndex,buffer:rootProps.columnBuffer}),firstColumnToRender=getFirstNonSpannedColumnToRender({firstColumnToRender:initialFirstColumnToRender,apiRef,firstRowToRender,lastRowToRender,visibleRows:currentPage.rows}),direction="ltr"===theme.direction?1:-1,top=gridRowsMetaSelector(apiRef.current.state).positions[firstRowToRender],left=direction*gridColumnPositionsSelector(apiRef)[firstColumnToRender];renderZoneRef.current.style.transform=`translate3d(${left}px, ${top}px, 0px)`,"function"==typeof onRenderZonePositioning&&onRenderZonePositioning({top,left})}),[apiRef,currentPage.rows,onRenderZonePositioning,renderZoneMinColumnIndex,renderZoneMaxColumnIndex,rootProps.columnBuffer,rootProps.rowBuffer,theme.direction]),updateRenderContext=react.useCallback((nextRenderContext=>{if(prevRenderContext.current&&(context1=nextRenderContext,context2=prevRenderContext.current,context1===context2||context1.firstRowIndex===context2.firstRowIndex&&context1.lastRowIndex===context2.lastRowIndex&&context1.firstColumnIndex===context2.firstColumnIndex&&context1.lastColumnIndex===context2.lastColumnIndex))return void updateRenderZonePosition(nextRenderContext);var context1,context2;setRenderContext(nextRenderContext),updateRenderZonePosition(nextRenderContext);const[firstRowToRender,lastRowToRender]=getRenderableIndexes({firstIndex:nextRenderContext.firstRowIndex,lastIndex:nextRenderContext.lastRowIndex,minFirstIndex:0,maxLastIndex:currentPage.rows.length,buffer:rootProps.rowBuffer});apiRef.current.publishEvent("renderedRowsIntervalChange",{firstRowToRender,lastRowToRender}),prevRenderContext.current=nextRenderContext}),[apiRef,setRenderContext,prevRenderContext,currentPage.rows.length,rootProps.rowBuffer,updateRenderZonePosition]);(0,useEnhancedEffect.Z)((()=>{if(null==containerDimensions.width)return;const initialRenderContext=computeRenderContext();updateRenderContext(initialRenderContext);const{top,left}=scrollPosition.current,params={top,left,renderContext:initialRenderContext};apiRef.current.publishEvent("scrollPositionChange",params)}),[apiRef,computeRenderContext,containerDimensions.width,updateRenderContext]);const handleScroll=event=>{const{scrollTop,scrollLeft}=event.currentTarget;if(scrollPosition.current.top=scrollTop,scrollPosition.current.left=scrollLeft,!prevRenderContext.current||scrollTop<0)return;if("ltr"===theme.direction&&scrollLeft<0)return;if("rtl"===theme.direction&&scrollLeft>0)return;const nextRenderContext=disableVirtualization?prevRenderContext.current:computeRenderContext(),topRowsScrolledSincePreviousRender=Math.abs(nextRenderContext.firstRowIndex-prevRenderContext.current.firstRowIndex),bottomRowsScrolledSincePreviousRender=Math.abs(nextRenderContext.lastRowIndex-prevRenderContext.current.lastRowIndex),topColumnsScrolledSincePreviousRender=Math.abs(nextRenderContext.firstColumnIndex-prevRenderContext.current.firstColumnIndex),bottomColumnsScrolledSincePreviousRender=Math.abs(nextRenderContext.lastColumnIndex-prevRenderContext.current.lastColumnIndex),shouldSetState=topRowsScrolledSincePreviousRender>=rootProps.rowThreshold||bottomRowsScrolledSincePreviousRender>=rootProps.rowThreshold||topColumnsScrolledSincePreviousRender>=rootProps.columnThreshold||bottomColumnsScrolledSincePreviousRender>=rootProps.columnThreshold||prevTotalWidth.current!==columnsTotalWidth;apiRef.current.publishEvent("scrollPositionChange",{top:scrollTop,left:scrollLeft,renderContext:shouldSetState?nextRenderContext:prevRenderContext.current},event),shouldSetState&&(react_dom.flushSync((()=>{updateRenderContext(nextRenderContext)})),prevTotalWidth.current=columnsTotalWidth)},handleWheel=event=>{apiRef.current.publishEvent("virtualScrollerWheel",{},event)},handleTouchMove=event=>{apiRef.current.publishEvent("virtualScrollerTouchMove",{},event)},needsHorizontalScrollbar=containerDimensions.width&&columnsTotalWidth>=containerDimensions.width,contentSize=react.useMemo((()=>{const height=Math.max(rowsMeta.currentPageTotalHeight,1);let shouldExtendContent=!1;null!=rootRef&&rootRef.current&&height<=(null==rootRef?void 0:rootRef.current.clientHeight)&&(shouldExtendContent=!0);return{width:needsHorizontalScrollbar?columnsTotalWidth:"auto",height,minHeight:shouldExtendContent?"100%":"auto"}}),[rootRef,columnsTotalWidth,rowsMeta.currentPageTotalHeight,needsHorizontalScrollbar]);react.useEffect((()=>{apiRef.current.publishEvent("virtualScrollerContentSizeChange")}),[apiRef,contentSize]),rootProps.autoHeight&&0===currentPage.rows.length&&(contentSize.height=getMinimalContentHeight(apiRef,rootProps.rowHeight));const rootStyle={};needsHorizontalScrollbar||(rootStyle.overflowX="hidden"),rootProps.autoHeight&&(rootStyle.overflowY="hidden");const getRenderContext=react.useCallback((()=>prevRenderContext.current),[]);return apiRef.current.register("private",{getRenderContext}),{renderContext,updateRenderZonePosition,getRows:(params={renderContext})=>{var _rootProps$slotProps;const{onRowRender,renderContext:nextRenderContext,minFirstColumn=renderZoneMinColumnIndex,maxLastColumn=renderZoneMaxColumnIndex,availableSpace=containerDimensions.width,rowIndexOffset=0,position="center"}=params;if(!nextRenderContext||null==availableSpace)return null;const rowBuffer=disableVirtualization?0:rootProps.rowBuffer,columnBuffer=disableVirtualization?0:rootProps.columnBuffer,[firstRowToRender,lastRowToRender]=getRenderableIndexes({firstIndex:nextRenderContext.firstRowIndex,lastIndex:nextRenderContext.lastRowIndex,minFirstIndex:0,maxLastIndex:currentPage.rows.length,buffer:rowBuffer}),renderedRows=[];if(params.rows)params.rows.forEach((row=>{renderedRows.push(row),apiRef.current.calculateColSpan({rowId:row.id,minFirstColumn,maxLastColumn,columns:visibleColumns})}));else{if(!currentPage.range)return null;for(let i=firstRowToRender;i<lastRowToRender;i+=1){const row=currentPage.rows[i];renderedRows.push(row),apiRef.current.calculateColSpan({rowId:row.id,minFirstColumn,maxLastColumn,columns:visibleColumns})}}const[initialFirstColumnToRender,lastColumnToRender]=getRenderableIndexes({firstIndex:nextRenderContext.firstColumnIndex,lastIndex:nextRenderContext.lastColumnIndex,minFirstIndex:minFirstColumn,maxLastIndex:maxLastColumn,buffer:columnBuffer}),firstColumnToRender=getFirstNonSpannedColumnToRender({firstColumnToRender:initialFirstColumnToRender,apiRef,firstRowToRender,lastRowToRender,visibleRows:currentPage.rows}),renderedColumns=getRenderedColumnsRef.current(visibleColumns,firstColumnToRender,lastColumnToRender),_ref=(null==(_rootProps$slotProps=rootProps.slotProps)?void 0:_rootProps$slotProps.row)||{},{style:rootRowStyle}=_ref,rootRowProps=(0,objectWithoutPropertiesLoose.Z)(_ref,useGridVirtualScroller_excluded);(prevGetRowProps.current!==getRowProps||prevRootRowStyle.current!==rootRowStyle)&&(rowStyleCache.current=Object.create(null));const rows=[];for(let i=0;i<renderedRows.length;i+=1){var _currentPage$range5;const{id,model}=renderedRows[i],lastVisibleRowIndex=firstRowToRender+i===currentPage.rows.length-1,baseRowHeight=apiRef.current.rowHasAutoHeight(id)?"auto":apiRef.current.unstable_getRowHeight(id);let isSelected;isSelected=null!=selectedRowsLookup[id]&&apiRef.current.isRowSelectable(id),onRowRender&&onRowRender(id);const focusedCell=null!==cellFocus&&cellFocus.id===id?cellFocus.field:null;let tabbableCell=null;if(null!==cellTabIndex&&cellTabIndex.id===id){tabbableCell="view"===apiRef.current.getCellParams(id,cellTabIndex.field).cellMode?cellTabIndex.field:null}const _ref2="function"==typeof getRowProps&&getRowProps(id,model)||{},{style:rowStyle}=_ref2,rowProps=(0,objectWithoutPropertiesLoose.Z)(_ref2,useGridVirtualScroller_excluded2);if(!rowStyleCache.current[id]){const style=(0,esm_extends.Z)({},rowStyle,rootRowStyle);rowStyleCache.current[id]=style}rows.push((0,jsx_runtime.jsx)(rootProps.slots.row,(0,esm_extends.Z)({row:model,rowId:id,rowHeight:baseRowHeight,focusedCell,tabbableCell,renderedColumns,visibleColumns,firstColumnToRender,lastColumnToRender,selected:isSelected,index:rowIndexOffset+((null==currentPage||null==(_currentPage$range5=currentPage.range)?void 0:_currentPage$range5.firstRowIndex)||0)+firstRowToRender+i,containerWidth:availableSpace,isLastVisible:lastVisibleRowIndex,position},rowProps,rootRowProps,{style:rowStyleCache.current[id]}),id))}return prevGetRowProps.current=getRowProps,prevRootRowStyle.current=rootRowStyle,rows},getRootProps:(_ref3={})=>{let{style={}}=_ref3,other=(0,objectWithoutPropertiesLoose.Z)(_ref3,_excluded3);return(0,esm_extends.Z)({ref:handleRef,onScroll:handleScroll,onWheel:handleWheel,onTouchMove:handleTouchMove,style:(0,esm_extends.Z)({},style,rootStyle)},other)},getContentProps:({style={}}={})=>({style:(0,esm_extends.Z)({},style,contentSize)}),getRenderZoneProps:()=>({ref:renderZoneRef})}};function GridColumnGroupHeader(props){var _columnGroupsLookup$g;const{groupId,width,depth,maxDepth,fields,height,colIndex,hasFocus,tabIndex,isLastColumn}=props,rootProps=useGridRootProps(),headerCellRef=react.useRef(null),apiRef=useGridApiContext_useGridApiContext(),columnGroupsLookup=useGridSelector(apiRef,gridColumnGroupsLookupSelector),group=groupId?columnGroupsLookup[groupId]:{},{headerName=null!=groupId?groupId:"",description="",headerAlign}=group;let headerComponent;const render=groupId&&(null==(_columnGroupsLookup$g=columnGroupsLookup[groupId])?void 0:_columnGroupsLookup$g.renderHeaderGroup),renderParams=react.useMemo((()=>({groupId,headerName,description,depth,maxDepth,fields,colIndex,isLastColumn})),[groupId,headerName,description,depth,maxDepth,fields,colIndex,isLastColumn]);groupId&&render&&(headerComponent=render(renderParams));const showColumnBorder=rootProps.showColumnVerticalBorder,ownerState=(0,esm_extends.Z)({},props,{classes:rootProps.classes,showColumnBorder,headerAlign,depth,isDragging:!1}),label=null!=headerName?headerName:groupId,id=(0,useId.Z)(),elementId=null===groupId?`empty-group-cell-${id}`:groupId,classes=(ownerState=>{const{classes,headerAlign,isDragging,showColumnBorder,groupId}=ownerState,slots={root:["columnHeader","left"===headerAlign&&"columnHeader--alignLeft","center"===headerAlign&&"columnHeader--alignCenter","right"===headerAlign&&"columnHeader--alignRight",isDragging&&"columnHeader--moving",showColumnBorder&&"columnHeader--showColumnBorder",showColumnBorder&&"columnHeader--withRightBorder","withBorderColor",null===groupId?"columnHeader--emptyGroup":"columnHeader--filledGroup"],draggableContainer:["columnHeaderDraggableContainer"],titleContainer:["columnHeaderTitleContainer","withBorderColor"],titleContainerContent:["columnHeaderTitleContainerContent"]};return(0,composeClasses.Z)(slots,getDataGridUtilityClass,classes)})(ownerState);react.useLayoutEffect((()=>{if(hasFocus){const elementToFocus=headerCellRef.current.querySelector('[tabindex="0"]')||headerCellRef.current;null==elementToFocus||elementToFocus.focus()}}),[apiRef,hasFocus]);const publish=react.useCallback((eventName=>event=>{event.currentTarget.contains(event.target)&&apiRef.current.publishEvent(eventName,renderParams,event)}),[apiRef,renderParams]),mouseEventsHandlers=react.useMemo((()=>({onKeyDown:publish("columnGroupHeaderKeyDown"),onFocus:publish("columnGroupHeaderFocus"),onBlur:publish("columnGroupHeaderBlur")})),[publish]),headerClassName="function"==typeof group.headerClassName?group.headerClassName(renderParams):group.headerClassName;return(0,jsx_runtime.jsx)(GridGenericColumnHeaderItem,(0,esm_extends.Z)({ref:headerCellRef,classes,columnMenuOpen:!1,colIndex,height,isResizing:!1,sortDirection:null,hasFocus:!1,tabIndex,isDraggable:!1,headerComponent,headerClassName,description,elementId,width,columnMenuIconButton:null,columnTitleIconButtons:null,resizable:!1,label,"aria-colspan":fields.length,"data-fields":`|-${fields.join("-|-")}-|`},mouseEventsHandlers))}const GridColumnHeaderRow=(0,esm_styled.Z)("div",{name:"MuiDataGrid",slot:"ColumnHeaderRow",overridesResolver:(props,styles)=>styles.columnHeaderRow})((()=>({display:"flex"})));const useGridColumnHeaders=props=>{const{innerRef:innerRefProp,minColumnIndex=0,visibleColumns,sortColumnLookup,filterColumnLookup,columnPositions,columnHeaderTabIndexState,columnGroupHeaderTabIndexState,columnHeaderFocus,columnGroupHeaderFocus,densityFactor,headerGroupingMaxDepth,columnMenuState,columnVisibility,columnGroupsHeaderStructure,hasOtherElementInTabSequence}=props,theme=(0,esm_useTheme.Z)(),[dragCol,setDragCol]=react.useState(""),[resizeCol,setResizeCol]=react.useState(""),apiRef=useGridPrivateApiContext(),rootProps=useGridRootProps(),innerRef=react.useRef(null),handleInnerRef=(0,useForkRef.Z)(innerRefProp,innerRef),[renderContext,setRenderContext]=react.useState(null),prevRenderContext=react.useRef(renderContext),prevScrollLeft=react.useRef(0),currentPage=useGridVisibleRows(apiRef,rootProps),totalHeaderHeight=getTotalHeaderHeight(apiRef,rootProps.columnHeaderHeight),headerHeight=Math.floor(rootProps.columnHeaderHeight*densityFactor);react.useEffect((()=>{apiRef.current.columnHeadersContainerElementRef.current.scrollLeft=0}),[apiRef]);const getFirstColumnIndexToRenderRef=react.useRef((0,defaultMemoize.PW)(getFirstColumnIndexToRender,{equalityCheck:(a,b)=>["firstColumnIndex","minColumnIndex","columnBuffer"].every((key=>a[key]===b[key]))})),updateInnerPosition=react.useCallback((nextRenderContext=>{const[firstRowToRender,lastRowToRender]=getRenderableIndexes({firstIndex:nextRenderContext.firstRowIndex,lastIndex:nextRenderContext.lastRowIndex,minFirstIndex:0,maxLastIndex:currentPage.rows.length,buffer:rootProps.rowBuffer}),firstColumnToRender=getFirstColumnIndexToRenderRef.current({firstColumnIndex:nextRenderContext.firstColumnIndex,minColumnIndex,columnBuffer:rootProps.columnBuffer,firstRowToRender,lastRowToRender,apiRef,visibleRows:currentPage.rows}),direction="ltr"===theme.direction?1:-1,offset=firstColumnToRender>0?prevScrollLeft.current-direction*columnPositions[firstColumnToRender]:prevScrollLeft.current;innerRef.current.style.transform=`translate3d(${-offset}px, 0px, 0px)`}),[columnPositions,minColumnIndex,rootProps.columnBuffer,apiRef,currentPage.rows,rootProps.rowBuffer,theme.direction]);react.useLayoutEffect((()=>{renderContext&&updateInnerPosition(renderContext)}),[renderContext,updateInnerPosition]);const handleScroll=react.useCallback((({left,renderContext:nextRenderContext=null},event)=>{var _prevRenderContext$cu,_prevRenderContext$cu2;if(!innerRef.current)return;if(prevScrollLeft.current===left&&(null==(_prevRenderContext$cu=prevRenderContext.current)?void 0:_prevRenderContext$cu.firstColumnIndex)===(null==nextRenderContext?void 0:nextRenderContext.firstColumnIndex)&&(null==(_prevRenderContext$cu2=prevRenderContext.current)?void 0:_prevRenderContext$cu2.lastColumnIndex)===(null==nextRenderContext?void 0:nextRenderContext.lastColumnIndex))return;prevScrollLeft.current=left;let canUpdateInnerPosition=!1;nextRenderContext===prevRenderContext.current&&prevRenderContext.current?canUpdateInnerPosition=!0:(!function isUIEvent(event){return!!event.target}(event)?setRenderContext(nextRenderContext):(react_dom.flushSync((()=>{setRenderContext(nextRenderContext)})),canUpdateInnerPosition=!0),prevRenderContext.current=nextRenderContext),nextRenderContext&&canUpdateInnerPosition&&updateInnerPosition(nextRenderContext)}),[updateInnerPosition]),handleColumnResizeStart=react.useCallback((params=>setResizeCol(params.field)),[]),handleColumnResizeStop=react.useCallback((()=>setResizeCol("")),[]),handleColumnReorderStart=react.useCallback((params=>setDragCol(params.field)),[]),handleColumnReorderStop=react.useCallback((()=>setDragCol("")),[]);useGridApiEventHandler(apiRef,"columnResizeStart",handleColumnResizeStart),useGridApiEventHandler(apiRef,"columnResizeStop",handleColumnResizeStop),useGridApiEventHandler(apiRef,"columnHeaderDragStart",handleColumnReorderStart),useGridApiEventHandler(apiRef,"columnHeaderDragEnd",handleColumnReorderStop),useGridApiEventHandler(apiRef,"scrollPositionChange",handleScroll);const getColumnsToRender=params=>{const{renderContext:nextRenderContext=renderContext,minFirstColumn=minColumnIndex,maxLastColumn=visibleColumns.length}=params||{};if(!nextRenderContext)return null;const[firstRowToRender,lastRowToRender]=getRenderableIndexes({firstIndex:nextRenderContext.firstRowIndex,lastIndex:nextRenderContext.lastRowIndex,minFirstIndex:0,maxLastIndex:currentPage.rows.length,buffer:rootProps.rowBuffer}),firstColumnToRender=getFirstColumnIndexToRenderRef.current({firstColumnIndex:nextRenderContext.firstColumnIndex,minColumnIndex:minFirstColumn,columnBuffer:rootProps.columnBuffer,apiRef,firstRowToRender,lastRowToRender,visibleRows:currentPage.rows}),lastColumnToRender=Math.min(nextRenderContext.lastColumnIndex+rootProps.columnBuffer,maxLastColumn);return{renderedColumns:visibleColumns.slice(firstColumnToRender,lastColumnToRender),firstColumnToRender,lastColumnToRender,minFirstColumn,maxLastColumn}},rootStyle={minHeight:totalHeaderHeight,maxHeight:totalHeaderHeight,lineHeight:`${headerHeight}px`};return{renderContext,getColumnHeaders:(params,other={})=>{const columnsToRender=getColumnsToRender(params);if(null==columnsToRender)return null;const{renderedColumns,firstColumnToRender}=columnsToRender,columns=[];for(let i=0;i<renderedColumns.length;i+=1){const colDef=renderedColumns[i],columnIndex=firstColumnToRender+i,isFirstColumn=0===columnIndex,tabIndex=null!==columnHeaderTabIndexState&&columnHeaderTabIndexState.field===colDef.field||isFirstColumn&&!hasOtherElementInTabSequence?0:-1,hasFocus=null!==columnHeaderFocus&&columnHeaderFocus.field===colDef.field,open=columnMenuState.open&&columnMenuState.field===colDef.field;columns.push((0,jsx_runtime.jsx)(GridColumnHeaderItem,(0,esm_extends.Z)({},sortColumnLookup[colDef.field],{columnMenuOpen:open,filterItemsCounter:filterColumnLookup[colDef.field]&&filterColumnLookup[colDef.field].length,headerHeight,isDragging:colDef.field===dragCol,colDef,colIndex:columnIndex,isResizing:resizeCol===colDef.field,hasFocus,tabIndex},other),colDef.field))}return(0,jsx_runtime.jsx)(GridColumnHeaderRow,{role:"row","aria-rowindex":headerGroupingMaxDepth+1,ownerState:rootProps,children:columns})},getColumnsToRender,getColumnGroupHeaders:params=>{if(0===headerGroupingMaxDepth)return null;const columnsToRender=getColumnsToRender(params);if(null==columnsToRender||0===columnsToRender.renderedColumns.length)return null;const{firstColumnToRender,lastColumnToRender}=columnsToRender,columns=[],headerToRender=[];for(let depth=0;depth<headerGroupingMaxDepth;depth+=1){var _apiRef$current$unsta,_apiRef$current$unsta2;const rowStructure=columnGroupsHeaderStructure[depth],firstColumnFieldToRender=visibleColumns[firstColumnToRender].field,firstGroupToRender=null!=(_apiRef$current$unsta=apiRef.current.unstable_getColumnGroupPath(firstColumnFieldToRender)[depth])?_apiRef$current$unsta:null,firstGroupIndex=rowStructure.findIndex((({groupId,columnFields})=>groupId===firstGroupToRender&&columnFields.includes(firstColumnFieldToRender))),lastColumnFieldToRender=visibleColumns[lastColumnToRender-1].field,lastGroupToRender=null!=(_apiRef$current$unsta2=apiRef.current.unstable_getColumnGroupPath(lastColumnFieldToRender)[depth])?_apiRef$current$unsta2:null,lastGroupIndex=rowStructure.findIndex((({groupId,columnFields})=>groupId===lastGroupToRender&&columnFields.includes(lastColumnFieldToRender))),visibleColumnGroupHeader=rowStructure.slice(firstGroupIndex,lastGroupIndex+1).map((groupStructure=>(0,esm_extends.Z)({},groupStructure,{columnFields:groupStructure.columnFields.filter((field=>!1!==columnVisibility[field]))}))).filter((groupStructure=>groupStructure.columnFields.length>0)),firstVisibleColumnIndex=visibleColumnGroupHeader[0].columnFields.indexOf(firstColumnFieldToRender),leftOverflow=visibleColumnGroupHeader[0].columnFields.slice(0,firstVisibleColumnIndex).reduce(((acc,field)=>{var _column$computedWidth;return acc+(null!=(_column$computedWidth=apiRef.current.getColumn(field).computedWidth)?_column$computedWidth:0)}),0);let columnIndex=firstColumnToRender;const elements=visibleColumnGroupHeader.map((({groupId,columnFields})=>{const hasFocus=null!==columnGroupHeaderFocus&&columnGroupHeaderFocus.depth===depth&&columnFields.includes(columnGroupHeaderFocus.field),tabIndex=null!==columnGroupHeaderTabIndexState&&columnGroupHeaderTabIndexState.depth===depth&&columnFields.includes(columnGroupHeaderTabIndexState.field)?0:-1,headerInfo={groupId,width:columnFields.reduce(((acc,field)=>acc+apiRef.current.getColumn(field).computedWidth),0),fields:columnFields,colIndex:columnIndex,hasFocus,tabIndex};return columnIndex+=columnFields.length,headerInfo}));headerToRender.push({leftOverflow,elements})}return headerToRender.forEach(((depthInfo,depthIndex)=>{columns.push((0,jsx_runtime.jsx)(GridColumnHeaderRow,{style:{height:`${headerHeight}px`,transform:`translateX(-${depthInfo.leftOverflow}px)`},role:"row","aria-rowindex":depthIndex+1,ownerState:rootProps,children:depthInfo.elements.map((({groupId,width,fields,colIndex,hasFocus,tabIndex},groupIndex)=>(0,jsx_runtime.jsx)(GridColumnGroupHeader,{groupId,width,fields,colIndex,depth:depthIndex,isLastColumn:colIndex===visibleColumns.length-fields.length,maxDepth:headerToRender.length,height:headerHeight,hasFocus,tabIndex},groupIndex)))},depthIndex))})),columns},isDragging:!!dragCol,getRootProps:(other={})=>(0,esm_extends.Z)({style:rootStyle},other),getInnerProps:()=>({ref:handleInnerRef,role:"rowgroup"}),headerHeight}},GridBaseColumnHeaders_excluded=["className"],GridColumnHeadersRoot=(0,esm_styled.Z)("div",{name:"MuiDataGrid",slot:"ColumnHeaders",overridesResolver:(props,styles)=>styles.columnHeaders})({position:"relative",overflow:"hidden",display:"flex",alignItems:"center",boxSizing:"border-box",borderBottom:"1px solid",borderTopLeftRadius:"var(--unstable_DataGrid-radius)",borderTopRightRadius:"var(--unstable_DataGrid-radius)"}),GridBaseColumnHeaders=react.forwardRef((function GridColumnHeaders(props,ref){const{className}=props,other=(0,objectWithoutPropertiesLoose.Z)(props,GridBaseColumnHeaders_excluded),rootProps=useGridRootProps(),classes=(ownerState=>{const{classes}=ownerState;return(0,composeClasses.Z)({root:["columnHeaders","withBorderColor"]},getDataGridUtilityClass,classes)})(rootProps);return(0,jsx_runtime.jsx)(GridColumnHeadersRoot,(0,esm_extends.Z)({ref,className:(0,clsx_m.Z)(className,classes.root),ownerState:rootProps},other))})),GridColumnHeadersInner_excluded=["isDragging","className"],GridColumnHeadersInnerRoot=(0,esm_styled.Z)("div",{name:"MuiDataGrid",slot:"columnHeadersInner",overridesResolver:(props,styles)=>[{[`&.${gridClasses_gridClasses.columnHeaderDropZone}`]:styles.columnHeaderDropZone},styles.columnHeadersInner]})((()=>({display:"flex",alignItems:"flex-start",flexDirection:"column",[`&.${gridClasses_gridClasses.columnHeaderDropZone} .${gridClasses_gridClasses.columnHeaderDraggableContainer}`]:{cursor:"move"},[`&.${gridClasses_gridClasses["columnHeadersInner--scrollable"]} .${gridClasses_gridClasses.columnHeader}:last-child`]:{borderRight:"none"}}))),GridColumnHeadersInner=react.forwardRef((function GridColumnHeadersInner(props,ref){var _apiRef$current$getRo,_apiRef$current$getRo2;const{isDragging,className}=props,other=(0,objectWithoutPropertiesLoose.Z)(props,GridColumnHeadersInner_excluded),apiRef=useGridApiContext_useGridApiContext(),rootProps=useGridRootProps(),ownerState=(0,esm_extends.Z)({},rootProps,{isDragging,hasScrollX:null!=(_apiRef$current$getRo=null==(_apiRef$current$getRo2=apiRef.current.getRootDimensions())?void 0:_apiRef$current$getRo2.hasScrollX)&&_apiRef$current$getRo}),classes=(ownerState=>{const{isDragging,hasScrollX,classes}=ownerState,slots={root:["columnHeadersInner",isDragging&&"columnHeaderDropZone",hasScrollX&&"columnHeadersInner--scrollable"]};return(0,composeClasses.Z)(slots,getDataGridUtilityClass,classes)})(ownerState);return(0,jsx_runtime.jsx)(GridColumnHeadersInnerRoot,(0,esm_extends.Z)({ref,className:(0,clsx_m.Z)(className,classes.root),ownerState},other))})),GridColumnHeaders_excluded=["innerRef","className","visibleColumns","sortColumnLookup","filterColumnLookup","columnPositions","columnHeaderTabIndexState","columnGroupHeaderTabIndexState","columnHeaderFocus","columnGroupHeaderFocus","densityFactor","headerGroupingMaxDepth","columnMenuState","columnVisibility","columnGroupsHeaderStructure","hasOtherElementInTabSequence"],GridColumnHeaders=react.forwardRef((function GridColumnsHeaders(props,ref){const{innerRef,visibleColumns,sortColumnLookup,filterColumnLookup,columnPositions,columnHeaderTabIndexState,columnGroupHeaderTabIndexState,columnHeaderFocus,columnGroupHeaderFocus,densityFactor,headerGroupingMaxDepth,columnMenuState,columnVisibility,columnGroupsHeaderStructure,hasOtherElementInTabSequence}=props,other=(0,objectWithoutPropertiesLoose.Z)(props,GridColumnHeaders_excluded),{isDragging,getRootProps,getInnerProps,getColumnHeaders,getColumnGroupHeaders}=useGridColumnHeaders({innerRef,visibleColumns,sortColumnLookup,filterColumnLookup,columnPositions,columnHeaderTabIndexState,columnGroupHeaderTabIndexState,columnHeaderFocus,columnGroupHeaderFocus,densityFactor,headerGroupingMaxDepth,columnMenuState,columnVisibility,columnGroupsHeaderStructure,hasOtherElementInTabSequence});return(0,jsx_runtime.jsx)(GridBaseColumnHeaders,(0,esm_extends.Z)({ref},getRootProps(other),{children:(0,jsx_runtime.jsxs)(GridColumnHeadersInner,(0,esm_extends.Z)({isDragging},getInnerProps(),{children:[getColumnGroupHeaders(),getColumnHeaders()]}))}))}));var Divider=__webpack_require__("./node_modules/@mui/material/Divider/Divider.js");const useGridColumnMenuSlots_excluded=["displayOrder"],GridColumnMenuContainer_excluded=["hideMenu","colDef","id","labelledby","className","children","open"],StyledMenuList=(0,styled.ZP)(MenuList.Z)((()=>({minWidth:248}))),GridColumnMenuContainer=react.forwardRef((function GridColumnMenuContainer(props,ref){const{hideMenu,id,labelledby,className,children,open}=props,other=(0,objectWithoutPropertiesLoose.Z)(props,GridColumnMenuContainer_excluded),handleListKeyDown=react.useCallback((event=>{var key;isTabKey(event.key)&&event.preventDefault(),key=event.key,(isTabKey(key)||isEscapeKey(key))&&hideMenu(event)}),[hideMenu]);return(0,jsx_runtime.jsx)(StyledMenuList,(0,esm_extends.Z)({id,ref,className:(0,clsx_m.Z)(gridClasses_gridClasses.menuList,className),"aria-labelledby":labelledby,onKeyDown:handleListKeyDown,autoFocus:open},other,{children}))}));var MenuItem=__webpack_require__("./node_modules/@mui/material/MenuItem/MenuItem.js"),ListItemIcon=__webpack_require__("./node_modules/@mui/material/ListItemIcon/ListItemIcon.js"),ListItemText=__webpack_require__("./node_modules/@mui/material/ListItemText/ListItemText.js");function GridColumnMenuHideItem(props){const{colDef,onClick}=props,apiRef=useGridApiContext_useGridApiContext(),rootProps=useGridRootProps(),disabled=1===gridVisibleColumnDefinitionsSelector(apiRef).filter((col=>!0!==col.disableColumnMenu)).length,toggleColumn=react.useCallback((event=>{disabled||(apiRef.current.setColumnVisibility(colDef.field,!1),onClick(event))}),[apiRef,colDef.field,onClick,disabled]);return rootProps.disableColumnSelector||!1===colDef.hideable?null:(0,jsx_runtime.jsxs)(MenuItem.Z,{onClick:toggleColumn,disabled,children:[(0,jsx_runtime.jsx)(ListItemIcon.Z,{children:(0,jsx_runtime.jsx)(rootProps.slots.columnMenuHideIcon,{fontSize:"small"})}),(0,jsx_runtime.jsx)(ListItemText.Z,{children:apiRef.current.getLocaleText("columnMenuHideColumn")})]})}function GridColumnMenuManageItem(props){const{onClick}=props,apiRef=useGridApiContext_useGridApiContext(),rootProps=useGridRootProps(),showColumns=react.useCallback((event=>{onClick(event),apiRef.current.showPreferences(GridPreferencePanelsValue.columns)}),[apiRef,onClick]);return rootProps.disableColumnSelector?null:(0,jsx_runtime.jsxs)(MenuItem.Z,{onClick:showColumns,children:[(0,jsx_runtime.jsx)(ListItemIcon.Z,{children:(0,jsx_runtime.jsx)(rootProps.slots.columnMenuManageColumnsIcon,{fontSize:"small"})}),(0,jsx_runtime.jsx)(ListItemText.Z,{children:apiRef.current.getLocaleText("columnMenuManageColumns")})]})}const GridColumnMenu_excluded=["defaultSlots","defaultSlotProps","slots","slotProps"],GRID_COLUMN_MENU_SLOTS={columnMenuSortItem:function GridColumnMenuSortItem(props){var _colDef$sortingOrder;const{colDef,onClick}=props,apiRef=useGridApiContext_useGridApiContext(),sortModel=useGridSelector(apiRef,gridSortModelSelector),rootProps=useGridRootProps(),sortDirection=react.useMemo((()=>{if(!colDef)return null;const sortItem=sortModel.find((item=>item.field===colDef.field));return null==sortItem?void 0:sortItem.sort}),[colDef,sortModel]),sortingOrder=null!=(_colDef$sortingOrder=colDef.sortingOrder)?_colDef$sortingOrder:rootProps.sortingOrder,onSortMenuItemClick=react.useCallback((event=>{onClick(event);const direction=event.currentTarget.getAttribute("data-value")||null;apiRef.current.sortColumn(colDef,direction===sortDirection?null:direction)}),[apiRef,colDef,onClick,sortDirection]);return colDef&&colDef.sortable&&sortingOrder.some((item=>!!item))?(0,jsx_runtime.jsxs)(react.Fragment,{children:[sortingOrder.includes("asc")&&"asc"!==sortDirection?(0,jsx_runtime.jsxs)(MenuItem.Z,{onClick:onSortMenuItemClick,"data-value":"asc",children:[(0,jsx_runtime.jsx)(ListItemIcon.Z,{children:(0,jsx_runtime.jsx)(rootProps.slots.columnMenuSortAscendingIcon,{fontSize:"small"})}),(0,jsx_runtime.jsx)(ListItemText.Z,{children:apiRef.current.getLocaleText("columnMenuSortAsc")})]}):null,sortingOrder.includes("desc")&&"desc"!==sortDirection?(0,jsx_runtime.jsxs)(MenuItem.Z,{onClick:onSortMenuItemClick,"data-value":"desc",children:[(0,jsx_runtime.jsx)(ListItemIcon.Z,{children:(0,jsx_runtime.jsx)(rootProps.slots.columnMenuSortDescendingIcon,{fontSize:"small"})}),(0,jsx_runtime.jsx)(ListItemText.Z,{children:apiRef.current.getLocaleText("columnMenuSortDesc")})]}):null,sortingOrder.includes(null)&&null!=sortDirection?(0,jsx_runtime.jsxs)(MenuItem.Z,{onClick:onSortMenuItemClick,children:[(0,jsx_runtime.jsx)(ListItemIcon.Z,{}),(0,jsx_runtime.jsx)(ListItemText.Z,{children:apiRef.current.getLocaleText("columnMenuUnsort")})]}):null]}):null},columnMenuFilterItem:function GridColumnMenuFilterItem(props){const{colDef,onClick}=props,apiRef=useGridApiContext_useGridApiContext(),rootProps=useGridRootProps(),showFilter=react.useCallback((event=>{onClick(event),apiRef.current.showFilterPanel(colDef.field)}),[apiRef,colDef.field,onClick]);return rootProps.disableColumnFilter||!colDef.filterable?null:(0,jsx_runtime.jsxs)(MenuItem.Z,{onClick:showFilter,children:[(0,jsx_runtime.jsx)(ListItemIcon.Z,{children:(0,jsx_runtime.jsx)(rootProps.slots.columnMenuFilterIcon,{fontSize:"small"})}),(0,jsx_runtime.jsx)(ListItemText.Z,{children:apiRef.current.getLocaleText("columnMenuFilter")})]})},columnMenuColumnsItem:function GridColumnMenuColumnsItem(props){return(0,jsx_runtime.jsxs)(react.Fragment,{children:[(0,jsx_runtime.jsx)(GridColumnMenuHideItem,(0,esm_extends.Z)({},props)),(0,jsx_runtime.jsx)(GridColumnMenuManageItem,(0,esm_extends.Z)({},props))]})}},GRID_COLUMN_MENU_SLOT_PROPS={columnMenuSortItem:{displayOrder:10},columnMenuFilterItem:{displayOrder:20},columnMenuColumnsItem:{displayOrder:30}},GridGenericColumnMenu=react.forwardRef((function GridGenericColumnMenu(props,ref){const{defaultSlots,defaultSlotProps,slots,slotProps}=props,other=(0,objectWithoutPropertiesLoose.Z)(props,GridColumnMenu_excluded),orderedSlots=(props=>{const apiRef=useGridPrivateApiContext(),{defaultSlots,defaultSlotProps,slots={},slotProps={},hideMenu,colDef,addDividers=!0}=props,processedComponents=react.useMemo((()=>(0,esm_extends.Z)({},defaultSlots,slots)),[defaultSlots,slots]),processedSlotProps=react.useMemo((()=>{if(!slotProps||0===Object.keys(slotProps).length)return defaultSlotProps;const mergedProps=(0,esm_extends.Z)({},slotProps);return Object.entries(defaultSlotProps).forEach((([key,currentSlotProps])=>{mergedProps[key]=(0,esm_extends.Z)({},currentSlotProps,slotProps[key]||{})})),mergedProps}),[defaultSlotProps,slotProps]),defaultItems=apiRef.current.unstable_applyPipeProcessors("columnMenu",[],props.colDef),userItems=react.useMemo((()=>{const defaultComponentKeys=Object.keys(defaultSlots);return Object.keys(slots).filter((key=>!defaultComponentKeys.includes(key)))}),[slots,defaultSlots]);return react.useMemo((()=>{const sorted=Array.from(new Set([...defaultItems,...userItems])).filter((key=>null!=processedComponents[key])).sort(((a,b)=>{const leftItemProps=processedSlotProps[a],rightItemProps=processedSlotProps[b];return(Number.isFinite(null==leftItemProps?void 0:leftItemProps.displayOrder)?leftItemProps.displayOrder:100)-(Number.isFinite(null==rightItemProps?void 0:rightItemProps.displayOrder)?rightItemProps.displayOrder:100)}));return sorted.reduce(((acc,key,index)=>{let itemProps={colDef,onClick:hideMenu};const processedComponentProps=processedSlotProps[key];if(processedComponentProps){const customProps=(0,objectWithoutPropertiesLoose.Z)(processedComponentProps,useGridColumnMenuSlots_excluded);itemProps=(0,esm_extends.Z)({},itemProps,customProps)}return addDividers&&index!==sorted.length-1?[...acc,[processedComponents[key],itemProps],[Divider.Z,{}]]:[...acc,[processedComponents[key],itemProps]]}),[])}),[addDividers,colDef,defaultItems,hideMenu,processedComponents,processedSlotProps,userItems])})((0,esm_extends.Z)({},other,{defaultSlots,defaultSlotProps,slots,slotProps}));return(0,jsx_runtime.jsx)(GridColumnMenuContainer,(0,esm_extends.Z)({ref},other,{children:orderedSlots.map((([Component,otherProps],index)=>(0,jsx_runtime.jsx)(Component,(0,esm_extends.Z)({},otherProps),index)))}))})),GridColumnMenu=react.forwardRef((function GridColumnMenu(props,ref){return(0,jsx_runtime.jsx)(GridGenericColumnMenu,(0,esm_extends.Z)({},props,{ref,defaultSlots:GRID_COLUMN_MENU_SLOTS,defaultSlotProps:GRID_COLUMN_MENU_SLOT_PROPS}))})),GridNoResultsOverlay=react.forwardRef((function GridNoResultsOverlay(props,ref){const noResultsOverlayLabel=useGridApiContext_useGridApiContext().current.getLocaleText("noResultsOverlayLabel");return(0,jsx_runtime.jsx)(GridOverlay,(0,esm_extends.Z)({ref},props,{children:noResultsOverlayLabel}))}));var Checkbox=__webpack_require__("./node_modules/@mui/material/Checkbox/Checkbox.js"),TextField=__webpack_require__("./node_modules/@mui/material/TextField/TextField.js"),FormControl=__webpack_require__("./node_modules/@mui/material/FormControl/FormControl.js"),Select=__webpack_require__("./node_modules/@mui/material/Select/Select.js"),Switch=__webpack_require__("./node_modules/@mui/material/Switch/Switch.js"),Button=__webpack_require__("./node_modules/@mui/material/Button/Button.js"),InputAdornment=__webpack_require__("./node_modules/@mui/material/InputAdornment/InputAdornment.js"),Tooltip=__webpack_require__("./node_modules/@mui/material/Tooltip/Tooltip.js"),InputLabel=__webpack_require__("./node_modules/@mui/material/InputLabel/InputLabel.js"),Chip=__webpack_require__("./node_modules/@mui/material/Chip/Chip.js");const GridColumnUnsortedIcon_excluded=["sortingOrder"],GridColumnUnsortedIcon=react.memo((function GridColumnHeaderSortIcon(props){const{sortingOrder}=props,other=(0,objectWithoutPropertiesLoose.Z)(props,GridColumnUnsortedIcon_excluded),rootProps=useGridRootProps(),[nextSortDirection]=sortingOrder,Icon="asc"===nextSortDirection?rootProps.slots.columnSortedAscendingIcon:rootProps.slots.columnSortedDescendingIcon;return Icon?(0,jsx_runtime.jsx)(Icon,(0,esm_extends.Z)({},other)):null}));var createSvgIcon=__webpack_require__("./node_modules/@mui/material/utils/createSvgIcon.js");const GridArrowUpwardIcon=(0,createSvgIcon.Z)((0,jsx_runtime.jsx)("path",{d:"M4 12l1.41 1.41L11 7.83V20h2V7.83l5.58 5.59L20 12l-8-8-8 8z"}),"ArrowUpward"),GridArrowDownwardIcon=(0,createSvgIcon.Z)((0,jsx_runtime.jsx)("path",{d:"M20 12l-1.41-1.41L13 16.17V4h-2v12.17l-5.58-5.59L4 12l8 8 8-8z"}),"ArrowDownward"),GridKeyboardArrowRight=(0,createSvgIcon.Z)((0,jsx_runtime.jsx)("path",{d:"M8.59 16.59 13.17 12 8.59 7.41 10 6l6 6-6 6-1.41-1.41z"}),"KeyboardArrowRight"),GridExpandMoreIcon=(0,createSvgIcon.Z)((0,jsx_runtime.jsx)("path",{d:"M16.59 8.59 12 13.17 7.41 8.59 6 10l6 6 6-6z"}),"ExpandMore"),GridFilterListIcon=(0,createSvgIcon.Z)((0,jsx_runtime.jsx)("path",{d:"M10 18h4v-2h-4v2zM3 6v2h18V6H3zm3 7h12v-2H6v2z"}),"FilterList"),GridFilterAltIcon=(0,createSvgIcon.Z)((0,jsx_runtime.jsx)("path",{d:"M4.25 5.61C6.27 8.2 10 13 10 13v6c0 .55.45 1 1 1h2c.55 0 1-.45 1-1v-6s3.72-4.8 5.74-7.39c.51-.66.04-1.61-.79-1.61H5.04c-.83 0-1.3.95-.79 1.61z"}),"FilterAlt"),GridSearchIcon=(0,createSvgIcon.Z)((0,jsx_runtime.jsx)("path",{d:"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"}),"Search"),GridColumnIcon=((0,createSvgIcon.Z)((0,jsx_runtime.jsx)("path",{d:"M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z"}),"Menu"),(0,createSvgIcon.Z)((0,jsx_runtime.jsx)("path",{d:"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"}),"CheckCircle"),(0,createSvgIcon.Z)((0,jsx_runtime.jsx)("path",{d:"M6 5H3c-.55 0-1 .45-1 1v12c0 .55.45 1 1 1h3c.55 0 1-.45 1-1V6c0-.55-.45-1-1-1zm14 0h-3c-.55 0-1 .45-1 1v12c0 .55.45 1 1 1h3c.55 0 1-.45 1-1V6c0-.55-.45-1-1-1zm-7 0h-3c-.55 0-1 .45-1 1v12c0 .55.45 1 1 1h3c.55 0 1-.45 1-1V6c0-.55-.45-1-1-1z"}),"ColumnIcon")),GridSeparatorIcon=(0,createSvgIcon.Z)((0,jsx_runtime.jsx)("path",{d:"M11 19V5h2v14z"}),"Separator"),GridViewHeadlineIcon=(0,createSvgIcon.Z)((0,jsx_runtime.jsx)("path",{d:"M4 15h16v-2H4v2zm0 4h16v-2H4v2zm0-8h16V9H4v2zm0-6v2h16V5H4z"}),"ViewHeadline"),GridTableRowsIcon=(0,createSvgIcon.Z)((0,jsx_runtime.jsx)("path",{d:"M21,8H3V4h18V8z M21,10H3v4h18V10z M21,16H3v4h18V16z"}),"TableRows"),GridViewStreamIcon=(0,createSvgIcon.Z)((0,jsx_runtime.jsx)("path",{d:"M4 18h17v-6H4v6zM4 5v6h17V5H4z"}),"ViewStream"),GridTripleDotsVerticalIcon=(0,createSvgIcon.Z)((0,jsx_runtime.jsx)("path",{d:"M12 8c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"}),"TripleDotsVertical"),GridCloseIcon=(0,createSvgIcon.Z)((0,jsx_runtime.jsx)("path",{d:"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"}),"Close"),GridAddIcon=(0,createSvgIcon.Z)((0,jsx_runtime.jsx)("path",{d:"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"}),"Add"),GridRemoveIcon=(0,createSvgIcon.Z)((0,jsx_runtime.jsx)("path",{d:"M19 13H5v-2h14v2z"}),"Remove"),GridLoadIcon=(0,createSvgIcon.Z)((0,jsx_runtime.jsx)("path",{d:"M12 4V1L8 5l4 4V6c3.31 0 6 2.69 6 6 0 1.01-.25 1.97-.7 2.8l1.46 1.46C19.54 15.03 20 13.57 20 12c0-4.42-3.58-8-8-8zm0 14c-3.31 0-6-2.69-6-6 0-1.01.25-1.97.7-2.8L5.24 7.74C4.46 8.97 4 10.43 4 12c0 4.42 3.58 8 8 8v3l4-4-4-4v3z"}),"Load"),GridDragIcon=(0,createSvgIcon.Z)((0,jsx_runtime.jsx)("path",{d:"M11 18c0 1.1-.9 2-2 2s-2-.9-2-2 .9-2 2-2 2 .9 2 2zm-2-8c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0-6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm6 4c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"}),"Drag"),GridSaveAltIcon=(0,createSvgIcon.Z)((0,jsx_runtime.jsx)("path",{d:"M19 12v7H5v-7H3v7c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2v-7h-2zm-6 .67l2.59-2.58L17 11.5l-5 5-5-5 1.41-1.41L11 12.67V3h2z"}),"SaveAlt"),GridCheckIcon=(0,createSvgIcon.Z)((0,jsx_runtime.jsx)("path",{d:"M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z"}),"Check"),GridMoreVertIcon=(0,createSvgIcon.Z)((0,jsx_runtime.jsx)("path",{d:"M12 8c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"}),"MoreVert"),GridVisibilityOffIcon=(0,createSvgIcon.Z)((0,jsx_runtime.jsx)("path",{d:"M12 7c2.76 0 5 2.24 5 5 0 .65-.13 1.26-.36 1.83l2.92 2.92c1.51-1.26 2.7-2.89 3.43-4.75-1.73-4.39-6-7.5-11-7.5-1.4 0-2.74.25-3.98.7l2.16 2.16C10.74 7.13 11.35 7 12 7zM2 4.27l2.28 2.28.46.46C3.08 8.3 1.78 10.02 1 12c1.73 4.39 6 7.5 11 7.5 1.55 0 3.03-.3 4.38-.84l.42.42L19.73 22 21 20.73 3.27 3 2 4.27zM7.53 9.8l1.55 1.55c-.05.21-.08.43-.08.65 0 1.66 1.34 3 3 3 .22 0 .44-.03.65-.08l1.55 1.55c-.67.33-1.41.53-2.2.53-2.76 0-5-2.24-5-5 0-.79.2-1.53.53-2.2zm4.31-.78l3.15 3.15.02-.16c0-1.66-1.34-3-3-3l-.17.01z"}),"VisibilityOff"),GridViewColumnIcon=(0,createSvgIcon.Z)((0,jsx_runtime.jsx)("g",{children:(0,jsx_runtime.jsx)("path",{d:"M14.67,5v14H9.33V5H14.67z M15.67,19H21V5h-5.33V19z M8.33,19V5H3v14H8.33z"})}),"ViewColumn"),GridClearIcon=(0,createSvgIcon.Z)((0,jsx_runtime.jsx)("path",{d:"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"}),"Clear"),GridDeleteForeverIcon=((0,createSvgIcon.Z)((0,jsx_runtime.jsx)("path",{d:"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z"}),"Delete"),(0,createSvgIcon.Z)((0,jsx_runtime.jsx)("path",{d:"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zm2.46-7.12l1.41-1.41L12 12.59l2.12-2.12 1.41 1.41L13.41 14l2.12 2.12-1.41 1.41L12 15.41l-2.12 2.12-1.41-1.41L10.59 14l-2.13-2.12zM15.5 4l-1-1h-5l-1 1H5v2h14V4z"}),"Delete")),MUISelectOption_excluded=["native"];const iconSlots={BooleanCellTrueIcon:GridCheckIcon,BooleanCellFalseIcon:GridCloseIcon,ColumnMenuIcon:GridTripleDotsVerticalIcon,OpenFilterButtonIcon:GridFilterListIcon,FilterPanelDeleteIcon:GridCloseIcon,ColumnFilteredIcon:GridFilterAltIcon,ColumnSelectorIcon:GridColumnIcon,ColumnUnsortedIcon:GridColumnUnsortedIcon,ColumnSortedAscendingIcon:GridArrowUpwardIcon,ColumnSortedDescendingIcon:GridArrowDownwardIcon,ColumnResizeIcon:GridSeparatorIcon,DensityCompactIcon:GridViewHeadlineIcon,DensityStandardIcon:GridTableRowsIcon,DensityComfortableIcon:GridViewStreamIcon,ExportIcon:GridSaveAltIcon,MoreActionsIcon:GridMoreVertIcon,TreeDataCollapseIcon:GridExpandMoreIcon,TreeDataExpandIcon:GridKeyboardArrowRight,GroupingCriteriaCollapseIcon:GridExpandMoreIcon,GroupingCriteriaExpandIcon:GridKeyboardArrowRight,DetailPanelExpandIcon:GridAddIcon,DetailPanelCollapseIcon:GridRemoveIcon,RowReorderIcon:GridDragIcon,QuickFilterIcon:GridSearchIcon,QuickFilterClearIcon:GridCloseIcon,ColumnMenuHideIcon:GridVisibilityOffIcon,ColumnMenuSortAscendingIcon:GridArrowUpwardIcon,ColumnMenuSortDescendingIcon:GridArrowDownwardIcon,ColumnMenuFilterIcon:GridFilterAltIcon,ColumnMenuManageColumnsIcon:GridViewColumnIcon,ColumnMenuClearIcon:GridClearIcon,LoadIcon:GridLoadIcon,FilterPanelAddIcon:GridAddIcon,FilterPanelRemoveAllIcon:GridDeleteForeverIcon,ColumnReorderIcon:GridDragIcon},material=(0,esm_extends.Z)({},iconSlots,{BaseCheckbox:Checkbox.Z,BaseTextField:TextField.Z,BaseFormControl:FormControl.Z,BaseSelect:Select.Z,BaseSwitch:Switch.Z,BaseButton:Button.Z,BaseIconButton:IconButton.Z,BaseInputAdornment:InputAdornment.Z,BaseTooltip:Tooltip.Z,BasePopper:Popper.Z,BaseInputLabel:InputLabel.Z,BaseSelectOption:function MUISelectOption(_ref){let{native}=_ref,props=(0,objectWithoutPropertiesLoose.Z)(_ref,MUISelectOption_excluded);return native?(0,jsx_runtime.jsx)("option",(0,esm_extends.Z)({},props)):(0,jsx_runtime.jsx)(MenuItem.Z,(0,esm_extends.Z)({},props))},BaseChip:Chip.Z}),DATA_GRID_DEFAULT_SLOTS_COMPONENTS=(0,esm_extends.Z)({},material,{Cell:MemoizedCell,SkeletonCell:function GridSkeletonCell(props){const{align,width,contentWidth}=props,other=(0,objectWithoutPropertiesLoose.Z)(props,GridSkeletonCell_excluded),classes=(ownerState=>{const{align,classes}=ownerState,slots={root:["cell","cellSkeleton",`cell--text${(0,capitalize.Z)(align)}`,"withBorderColor"]};return(0,composeClasses.Z)(slots,getDataGridUtilityClass,classes)})({classes:useGridRootProps().classes,align});return(0,jsx_runtime.jsx)("div",(0,esm_extends.Z)({className:classes.root,style:{width}},other,{children:(0,jsx_runtime.jsx)(Skeleton.Z,{width:`${contentWidth}%`})}))},ColumnHeaderFilterIconButton:function GridColumnHeaderFilterIconButton(props){var _rootProps$slotProps,_rootProps$slotProps2;const{counter,field,onClick}=props,apiRef=useGridApiContext_useGridApiContext(),rootProps=useGridRootProps(),classes=(ownerState=>{const{classes}=ownerState;return(0,composeClasses.Z)({icon:["filterIcon"]},getDataGridUtilityClass,classes)})((0,esm_extends.Z)({},props,{classes:rootProps.classes})),preferencePanel=useGridSelector(apiRef,gridPreferencePanelStateSelector),labelId=(0,useId.Z)(),panelId=(0,useId.Z)(),toggleFilter=react.useCallback((event=>{event.preventDefault(),event.stopPropagation();const{open,openedPanelValue}=gridPreferencePanelStateSelector(apiRef.current.state);open&&openedPanelValue===GridPreferencePanelsValue.filters?apiRef.current.hideFilterPanel():apiRef.current.showFilterPanel(void 0,panelId,labelId),onClick&&onClick(apiRef.current.getColumnHeaderParams(field),event)}),[apiRef,field,onClick,panelId,labelId]);if(!counter)return null;const open=preferencePanel.open&&preferencePanel.labelId===labelId,iconButton=(0,jsx_runtime.jsx)(rootProps.slots.baseIconButton,(0,esm_extends.Z)({id:labelId,onClick:toggleFilter,color:"default","aria-label":apiRef.current.getLocaleText("columnHeaderFiltersLabel"),size:"small",tabIndex:-1,"aria-haspopup":"menu","aria-expanded":open,"aria-controls":open?panelId:void 0},null==(_rootProps$slotProps=rootProps.slotProps)?void 0:_rootProps$slotProps.baseIconButton,{children:(0,jsx_runtime.jsx)(rootProps.slots.columnFilteredIcon,{className:classes.icon,fontSize:"small"})}));return(0,jsx_runtime.jsx)(rootProps.slots.baseTooltip,(0,esm_extends.Z)({title:apiRef.current.getLocaleText("columnHeaderFiltersTooltipActive")(counter),enterDelay:1e3},null==(_rootProps$slotProps2=rootProps.slotProps)?void 0:_rootProps$slotProps2.baseTooltip,{children:(0,jsx_runtime.jsxs)(GridIconButtonContainer,{children:[counter>1&&(0,jsx_runtime.jsx)(Badge.Z,{badgeContent:counter,color:"default",children:iconButton}),1===counter&&iconButton]})}))},ColumnMenu:GridColumnMenu,ColumnHeaders:GridColumnHeaders,Footer:GridFooter,Toolbar:null,PreferencesPanel:GridPreferencesPanel,LoadingOverlay:GridLoadingOverlay,NoResultsOverlay:GridNoResultsOverlay,NoRowsOverlay:GridNoRowsOverlay,Pagination:GridPagination,FilterPanel:GridFilterPanel,ColumnsPanel:function GridColumnsPanel(props){var _rootProps$slotProps,_rootProps$slotProps3,_rootProps$slotProps4;const apiRef=useGridApiContext_useGridApiContext(),searchInputRef=react.useRef(null),columns=useGridSelector(apiRef,gridColumnDefinitionsSelector),columnVisibilityModel=useGridSelector(apiRef,gridColumnVisibilityModelSelector),rootProps=useGridRootProps(),[searchValue,setSearchValue]=react.useState(""),classes=(ownerState=>{const{classes}=ownerState;return(0,composeClasses.Z)({root:["columnsPanel"],columnsPanelRow:["columnsPanelRow"]},getDataGridUtilityClass,classes)})(rootProps),{sort,searchPredicate=defaultSearchPredicate,autoFocusSearchField=!0,disableHideAllButton=!1,disableShowAllButton=!1,getTogglableColumns}=props,other=(0,objectWithoutPropertiesLoose.Z)(props,GridColumnsPanel_excluded),sortedColumns=react.useMemo((()=>{switch(sort){case"asc":return[...columns].sort(((a,b)=>GridColumnsPanel_collator.compare(a.headerName||a.field,b.headerName||b.field)));case"desc":return[...columns].sort(((a,b)=>-GridColumnsPanel_collator.compare(a.headerName||a.field,b.headerName||b.field)));default:return columns}}),[columns,sort]),toggleColumn=event=>{const{name:field}=event.target;apiRef.current.setColumnVisibility(field,!1===columnVisibilityModel[field])},toggleAllColumns=react.useCallback((isVisible=>{const currentModel=gridColumnVisibilityModelSelector(apiRef),newModel=(0,esm_extends.Z)({},currentModel),togglableColumns=getTogglableColumns?getTogglableColumns(columns):null;return columns.forEach((col=>{col.hideable&&(null==togglableColumns||togglableColumns.includes(col.field))&&(isVisible?delete newModel[col.field]:newModel[col.field]=!1)})),apiRef.current.setColumnVisibilityModel(newModel)}),[apiRef,columns,getTogglableColumns]),handleSearchValueChange=react.useCallback((event=>{setSearchValue(event.target.value)}),[]),currentColumns=react.useMemo((()=>{const togglableColumns=getTogglableColumns?getTogglableColumns(sortedColumns):null,togglableSortedColumns=togglableColumns?sortedColumns.filter((({field})=>togglableColumns.includes(field))):sortedColumns;return searchValue?togglableSortedColumns.filter((column=>searchPredicate(column,searchValue.toLowerCase()))):togglableSortedColumns}),[sortedColumns,searchValue,searchPredicate,getTogglableColumns]),firstSwitchRef=react.useRef(null);react.useEffect((()=>{autoFocusSearchField?searchInputRef.current.focus():firstSwitchRef.current&&"function"==typeof firstSwitchRef.current.focus&&firstSwitchRef.current.focus()}),[autoFocusSearchField]);let firstHideableColumnFound=!1;const isFirstHideableColumn=column=>!1===firstHideableColumnFound&&!1!==column.hideable&&(firstHideableColumnFound=!0,!0);return(0,jsx_runtime.jsxs)(GridPanelWrapper,(0,esm_extends.Z)({},other,{children:[(0,jsx_runtime.jsx)(GridPanelHeader,{children:(0,jsx_runtime.jsx)(rootProps.slots.baseTextField,(0,esm_extends.Z)({label:apiRef.current.getLocaleText("columnsPanelTextFieldLabel"),placeholder:apiRef.current.getLocaleText("columnsPanelTextFieldPlaceholder"),inputRef:searchInputRef,value:searchValue,onChange:handleSearchValueChange,variant:"standard",fullWidth:!0},null==(_rootProps$slotProps=rootProps.slotProps)?void 0:_rootProps$slotProps.baseTextField))}),(0,jsx_runtime.jsx)(GridPanelContent,{children:(0,jsx_runtime.jsx)(GridColumnsPanelRoot,{className:classes.root,ownerState:rootProps,children:currentColumns.map((column=>{var _rootProps$slotProps2;return(0,jsx_runtime.jsxs)(GridColumnsPanelRowRoot,{className:classes.columnsPanelRow,ownerState:rootProps,children:[(0,jsx_runtime.jsx)(FormControlLabel.Z,{control:(0,jsx_runtime.jsx)(rootProps.slots.baseSwitch,(0,esm_extends.Z)({disabled:!1===column.hideable,checked:!1!==columnVisibilityModel[column.field],onClick:toggleColumn,name:column.field,size:"small",inputRef:isFirstHideableColumn(column)?firstSwitchRef:void 0},null==(_rootProps$slotProps2=rootProps.slotProps)?void 0:_rootProps$slotProps2.baseSwitch)),label:column.headerName||column.field}),!rootProps.disableColumnReorder&&false]},column.field)}))})}),disableShowAllButton&&disableHideAllButton?null:(0,jsx_runtime.jsxs)(GridPanelFooter,{children:[disableHideAllButton?(0,jsx_runtime.jsx)("span",{}):(0,jsx_runtime.jsx)(rootProps.slots.baseButton,(0,esm_extends.Z)({onClick:()=>toggleAllColumns(!1)},null==(_rootProps$slotProps3=rootProps.slotProps)?void 0:_rootProps$slotProps3.baseButton,{disabled:disableHideAllButton,children:apiRef.current.getLocaleText("columnsPanelHideAllButton")})),disableShowAllButton?null:(0,jsx_runtime.jsx)(rootProps.slots.baseButton,(0,esm_extends.Z)({onClick:()=>toggleAllColumns(!0)},null==(_rootProps$slotProps4=rootProps.slotProps)?void 0:_rootProps$slotProps4.baseButton,{disabled:disableShowAllButton,children:apiRef.current.getLocaleText("columnsPanelShowAllButton")}))]})]}))},Panel:GridPanel,Row:GridRow}),uncapitalizeObjectKeys=capitalizedObject=>{if(void 0!==capitalizedObject)return Object.keys(capitalizedObject).reduce(((acc,key)=>(0,esm_extends.Z)({},acc,{[`${key.charAt(0).toLowerCase()}${key.slice(1)}`]:capitalizedObject[key]})),{})};var useDataGridProps_console=__webpack_require__("./node_modules/console-browserify/index.js");const DATA_GRID_PROPS_DEFAULT_VALUES={autoHeight:!1,autoPageSize:!1,checkboxSelection:!1,checkboxSelectionVisibleOnly:!1,columnBuffer:3,rowBuffer:3,columnThreshold:3,rowThreshold:3,rowSelection:!0,density:"standard",disableColumnFilter:!1,disableColumnMenu:!1,disableColumnSelector:!1,disableDensitySelector:!1,disableMultipleColumnsFiltering:!1,disableMultipleRowSelection:!1,disableMultipleColumnsSorting:!1,disableRowSelectionOnClick:!1,disableVirtualization:!1,editMode:GridEditModes.Cell,filterMode:"client",columnHeaderHeight:56,hideFooter:!1,hideFooterPagination:!1,hideFooterRowCount:!1,hideFooterSelectedRowCount:!1,logger:useDataGridProps_console,logLevel:"error",pagination:!1,paginationMode:"client",rowHeight:52,pageSizeOptions:[25,50,100],rowSpacingType:"margin",showCellVerticalBorder:!1,showColumnVerticalBorder:!1,sortingOrder:["asc","desc",null],sortingMode:"client",throttleRowsMs:0,disableColumnReorder:!1,disableColumnResize:!1,keepNonExistentRowsSelected:!1,keepColumnPositionIfDraggedOutside:!1,unstable_ignoreValueFormatterDuringExport:!1,clipboardCopyCellDelimiter:"\t"},rowsMetaStateInitializer=(uncapitalizeObjectKeys(DATA_GRID_DEFAULT_SLOTS_COMPONENTS),state=>(0,esm_extends.Z)({},state,{rowsMeta:{currentPageTotalHeight:0,positions:[]}}));const getValidRowHeight=(rowHeightProp,defaultRowHeight,warningMessage)=>"number"==typeof rowHeightProp&&rowHeightProp>0?rowHeightProp:defaultRowHeight,columnMenuStateInitializer=(["MUI: The `rowHeight` prop should be a number greater than 0.","The default value will be used instead."].join("\n"),["MUI: The `getRowHeight` prop should return a number greater than 0 or 'auto'.","The default value will be used instead."].join("\n"),state=>(0,esm_extends.Z)({},state,{columnMenu:{open:!1}}));function isLeaf(node){return void 0!==node.field}const recurrentUnwrapGroupingColumnModel=(columnGroupNode,parents,unwrappedGroupingModelToComplete)=>{if(isLeaf(columnGroupNode)){if(void 0!==unwrappedGroupingModelToComplete[columnGroupNode.field])throw new Error(["MUI: columnGroupingModel contains duplicated field",`column field ${columnGroupNode.field} occurs two times in the grouping model:`,`- ${unwrappedGroupingModelToComplete[columnGroupNode.field].join(" > ")}`,`- ${parents.join(" > ")}`].join("\n"));return void(unwrappedGroupingModelToComplete[columnGroupNode.field]=parents)}const{groupId,children}=columnGroupNode;children.forEach((child=>{recurrentUnwrapGroupingColumnModel(child,[...parents,groupId],unwrappedGroupingModelToComplete)}))},unwrapGroupingColumnModel=columnGroupingModel=>{if(!columnGroupingModel)return{};const unwrappedSubTree={};return columnGroupingModel.forEach((columnGroupNode=>{recurrentUnwrapGroupingColumnModel(columnGroupNode,[],unwrappedSubTree)})),unwrappedSubTree},getColumnGroupsHeaderStructure=(orderedColumns,unwrappedGroupingModel)=>{const getParents=field=>{var _unwrappedGroupingMod;return null!=(_unwrappedGroupingMod=unwrappedGroupingModel[field])?_unwrappedGroupingMod:[]},groupingHeaderStructure=[],maxDepth=Math.max(...orderedColumns.map((field=>getParents(field).length))),haveSameParents=(field1,field2,depth)=>isDeepEqual(getParents(field1).slice(0,depth+1),getParents(field2).slice(0,depth+1));for(let depth=0;depth<maxDepth;depth+=1){const depthStructure=orderedColumns.reduce(((structure,newField)=>{var _getParents$depth;const groupId=null!=(_getParents$depth=getParents(newField)[depth])?_getParents$depth:null;if(0===structure.length)return[{columnFields:[newField],groupId}];const lastGroup=structure[structure.length-1],prevField=lastGroup.columnFields[lastGroup.columnFields.length-1];return lastGroup.groupId===groupId&&haveSameParents(prevField,newField,depth)?[...structure.slice(0,structure.length-1),{columnFields:[...lastGroup.columnFields,newField],groupId}]:[...structure,{columnFields:[newField],groupId}]}),[]);groupingHeaderStructure.push(depthStructure)}return groupingHeaderStructure};var useGridColumnGrouping_console=__webpack_require__("./node_modules/console-browserify/index.js");const useGridColumnGrouping_excluded=["groupId","children"],createGroupLookup=columnGroupingModel=>{let groupLookup={};return columnGroupingModel.forEach((node=>{if(isLeaf(node))return;const{groupId,children}=node,other=(0,objectWithoutPropertiesLoose.Z)(node,useGridColumnGrouping_excluded);if(!groupId)throw new Error("MUI: An element of the columnGroupingModel does not have either `field` or `groupId`.");children||useGridColumnGrouping_console.warn(`MUI: group groupId=${groupId} has no children.`);const groupParam=(0,esm_extends.Z)({},other,{groupId}),subTreeLookup=createGroupLookup(children);if(void 0!==subTreeLookup[groupId]||void 0!==groupLookup[groupId])throw new Error(`MUI: The groupId ${groupId} is used multiple times in the columnGroupingModel.`);groupLookup=(0,esm_extends.Z)({},groupLookup,subTreeLookup,{[groupId]:groupParam})})),(0,esm_extends.Z)({},groupLookup)},columnGroupsStateInitializer=(state,props,apiRef)=>{var _props$experimentalFe,_props$columnGrouping,_props$columnGrouping2;if(null==(_props$experimentalFe=props.experimentalFeatures)||!_props$experimentalFe.columnGrouping)return state;const columnFields=gridColumnFieldsSelector(apiRef),visibleColumnFields=gridVisibleColumnFieldsSelector(apiRef),groupLookup=createGroupLookup(null!=(_props$columnGrouping=props.columnGroupingModel)?_props$columnGrouping:[]),unwrappedGroupingModel=unwrapGroupingColumnModel(null!=(_props$columnGrouping2=props.columnGroupingModel)?_props$columnGrouping2:[]),columnGroupsHeaderStructure=getColumnGroupsHeaderStructure(columnFields,unwrappedGroupingModel),maxDepth=0===visibleColumnFields.length?0:Math.max(...visibleColumnFields.map((field=>{var _unwrappedGroupingMod,_unwrappedGroupingMod2;return null!=(_unwrappedGroupingMod=null==(_unwrappedGroupingMod2=unwrappedGroupingModel[field])?void 0:_unwrappedGroupingMod2.length)?_unwrappedGroupingMod:0})));return(0,esm_extends.Z)({},state,{columnGrouping:{lookup:groupLookup,unwrappedGroupingModel,headerStructure:columnGroupsHeaderStructure,maxDepth}})},unstable_gridHeaderFilteringStateSelector=state=>state.headerFiltering,unstable_gridHeaderFilteringEditFieldSelector=createSelector(unstable_gridHeaderFilteringStateSelector,(headerFilteringState=>headerFilteringState.editing)),unstable_gridHeaderFilteringMenuSelector=createSelector(unstable_gridHeaderFilteringStateSelector,(headerFilteringState=>headerFilteringState.menuOpen));const getLeftColumnIndex=({currentColIndex,firstColIndex,lastColIndex,direction})=>{if("rtl"===direction){if(currentColIndex<lastColIndex)return currentColIndex+1}else if("ltr"===direction&&currentColIndex>firstColIndex)return currentColIndex-1;return null},getRightColumnIndex=({currentColIndex,firstColIndex,lastColIndex,direction})=>{if("rtl"===direction){if(currentColIndex>firstColIndex)return currentColIndex-1}else if("ltr"===direction&&currentColIndex<lastColIndex)return currentColIndex+1;return null},useGridKeyboardNavigation=(apiRef,props)=>{const logger=useGridLogger(apiRef,"useGridKeyboardNavigation"),initialCurrentPageRows=useGridVisibleRows(apiRef,props).rows,theme=(0,useTheme.Z)(),currentPageRows=react.useMemo((()=>function enrichPageRowsWithPinnedRows(apiRef,rows){const pinnedRows=gridPinnedRowsSelector(apiRef)||{};return[...pinnedRows.top||[],...rows,...pinnedRows.bottom||[]]}(apiRef,initialCurrentPageRows)),[apiRef,initialCurrentPageRows]),headerFilteringEnabled="DataGrid"!==props.signature&&props.unstable_headerFilters,goToCell=react.useCallback(((colIndex,rowId,closestColumnToUse="left")=>{const visibleSortedRows=gridExpandedSortedRowEntriesSelector(apiRef),nextCellColSpanInfo=apiRef.current.unstable_getCellColSpanInfo(rowId,colIndex);nextCellColSpanInfo&&nextCellColSpanInfo.spannedByColSpan&&("left"===closestColumnToUse?colIndex=nextCellColSpanInfo.leftVisibleCellIndex:"right"===closestColumnToUse&&(colIndex=nextCellColSpanInfo.rightVisibleCellIndex));const rowIndexRelativeToAllRows=visibleSortedRows.findIndex((row=>row.id===rowId));logger.debug(`Navigating to cell row ${rowIndexRelativeToAllRows}, col ${colIndex}`),apiRef.current.scrollToIndexes({colIndex,rowIndex:rowIndexRelativeToAllRows});const field=apiRef.current.getVisibleColumns()[colIndex].field;apiRef.current.setCellFocus(rowId,field)}),[apiRef,logger]),goToHeader=react.useCallback(((colIndex,event)=>{logger.debug(`Navigating to header col ${colIndex}`),apiRef.current.scrollToIndexes({colIndex});const field=apiRef.current.getVisibleColumns()[colIndex].field;apiRef.current.setColumnHeaderFocus(field,event)}),[apiRef,logger]),goToHeaderFilter=react.useCallback(((colIndex,event)=>{logger.debug(`Navigating to header filter col ${colIndex}`),apiRef.current.scrollToIndexes({colIndex});const field=apiRef.current.getVisibleColumns()[colIndex].field;apiRef.current.setColumnHeaderFilterFocus(field,event)}),[apiRef,logger]),goToGroupHeader=react.useCallback(((colIndex,depth,event)=>{logger.debug(`Navigating to header col ${colIndex}`),apiRef.current.scrollToIndexes({colIndex});const{field}=apiRef.current.getVisibleColumns()[colIndex];apiRef.current.setColumnGroupHeaderFocus(field,depth,event)}),[apiRef,logger]),getRowIdFromIndex=react.useCallback((rowIndex=>null==currentPageRows?void 0:currentPageRows[rowIndex].id),[currentPageRows]),handleColumnHeaderKeyDown=react.useCallback(((params,event)=>{const headerTitleNode=event.currentTarget.querySelector(`.${gridClasses_gridClasses.columnHeaderTitleContainerContent}`);if(!!headerTitleNode&&headerTitleNode.contains(event.target)&&params.field!==GRID_CHECKBOX_SELECTION_COL_DEF.field)return;if(!apiRef.current.getRootDimensions())return;const viewportPageSize=apiRef.current.getViewportPageSize(),colIndexBefore=params.field?apiRef.current.getColumnIndex(params.field):0,lastRowIndexInPage=currentPageRows.length-1,lastColIndex=gridVisibleColumnDefinitionsSelector(apiRef).length-1,columnGroupMaxDepth=gridColumnGroupsHeaderMaxDepthSelector(apiRef);let shouldPreventDefault=!0;switch(event.key){case"ArrowDown":headerFilteringEnabled?goToHeaderFilter(colIndexBefore,event):goToCell(colIndexBefore,getRowIdFromIndex(0));break;case"ArrowRight":{const rightColIndex=getRightColumnIndex({currentColIndex:colIndexBefore,firstColIndex:0,lastColIndex,direction:theme.direction});null!==rightColIndex&&goToHeader(rightColIndex,event);break}case"ArrowLeft":{const leftColIndex=getLeftColumnIndex({currentColIndex:colIndexBefore,firstColIndex:0,lastColIndex,direction:theme.direction});null!==leftColIndex&&goToHeader(leftColIndex,event);break}case"ArrowUp":columnGroupMaxDepth>0&&goToGroupHeader(colIndexBefore,columnGroupMaxDepth-1,event);break;case"PageDown":null!==lastRowIndexInPage&&goToCell(colIndexBefore,getRowIdFromIndex(Math.min(0+viewportPageSize,lastRowIndexInPage)));break;case"Home":goToHeader(0,event);break;case"End":goToHeader(lastColIndex,event);break;case"Enter":(event.ctrlKey||event.metaKey)&&apiRef.current.toggleColumnMenu(params.field);break;case" ":break;default:shouldPreventDefault=!1}shouldPreventDefault&&event.preventDefault()}),[apiRef,currentPageRows.length,headerFilteringEnabled,goToHeaderFilter,goToCell,getRowIdFromIndex,theme.direction,goToHeader,goToGroupHeader]),handleHeaderFilterKeyDown=react.useCallback(((params,event)=>{if(!apiRef.current.getRootDimensions())return;const isEditing=unstable_gridHeaderFilteringEditFieldSelector(apiRef)===params.field,isHeaderMenuOpen=unstable_gridHeaderFilteringMenuSelector(apiRef)===params.field;if(isEditing||isHeaderMenuOpen||!isNavigationKey(event.key))return;const viewportPageSize=apiRef.current.getViewportPageSize(),colIndexBefore=params.field?apiRef.current.getColumnIndex(params.field):0,lastRowIndexInPage=currentPageRows.length-1,lastColIndex=gridVisibleColumnDefinitionsSelector(apiRef).length-1;let shouldPreventDefault=!0;switch(event.key){case"ArrowDown":{const rowId=getRowIdFromIndex(0);null!=rowId&&goToCell(colIndexBefore,rowId);break}case"ArrowRight":{const rightColIndex=getRightColumnIndex({currentColIndex:colIndexBefore,firstColIndex:0,lastColIndex,direction:theme.direction});null!==rightColIndex&&goToHeaderFilter(rightColIndex,event);break}case"ArrowLeft":{const leftColIndex=getLeftColumnIndex({currentColIndex:colIndexBefore,firstColIndex:0,lastColIndex,direction:theme.direction});null!==leftColIndex?goToHeaderFilter(leftColIndex,event):apiRef.current.setColumnHeaderFilterFocus(params.field,event);break}case"ArrowUp":goToHeader(colIndexBefore,event);break;case"PageDown":null!==lastRowIndexInPage&&goToCell(colIndexBefore,getRowIdFromIndex(Math.min(0+viewportPageSize,lastRowIndexInPage)));break;case"Home":goToHeaderFilter(0,event);break;case"End":goToHeaderFilter(lastColIndex,event);break;case" ":break;default:shouldPreventDefault=!1}shouldPreventDefault&&event.preventDefault()}),[apiRef,currentPageRows.length,goToHeaderFilter,theme.direction,goToHeader,goToCell,getRowIdFromIndex]),focusedColumnGroup=useGridSelector(apiRef,unstable_gridFocusColumnGroupHeaderSelector),handleColumnGroupHeaderKeyDown=react.useCallback(((params,event)=>{if(!apiRef.current.getRootDimensions())return;if(null===focusedColumnGroup)return;const{field:currentField,depth:currentDepth}=focusedColumnGroup,{fields,depth,maxDepth}=params,viewportPageSize=apiRef.current.getViewportPageSize(),currentColIndex=apiRef.current.getColumnIndex(currentField),colIndexBefore=currentField?apiRef.current.getColumnIndex(currentField):0,lastRowIndexInPage=currentPageRows.length-1,lastColIndex=gridVisibleColumnDefinitionsSelector(apiRef).length-1;let shouldPreventDefault=!0;switch(event.key){case"ArrowDown":depth===maxDepth-1?goToHeader(currentColIndex,event):goToGroupHeader(currentColIndex,currentDepth+1,event);break;case"ArrowUp":depth>0&&goToGroupHeader(currentColIndex,currentDepth-1,event);break;case"ArrowRight":{const remainingRightColumns=fields.length-fields.indexOf(currentField)-1;currentColIndex+remainingRightColumns+1<=lastColIndex&&goToGroupHeader(currentColIndex+remainingRightColumns+1,currentDepth,event);break}case"ArrowLeft":{const remainingLeftColumns=fields.indexOf(currentField);currentColIndex-remainingLeftColumns-1>=0&&goToGroupHeader(currentColIndex-remainingLeftColumns-1,currentDepth,event);break}case"PageDown":null!==lastRowIndexInPage&&goToCell(colIndexBefore,getRowIdFromIndex(Math.min(0+viewportPageSize,lastRowIndexInPage)));break;case"Home":goToGroupHeader(0,currentDepth,event);break;case"End":goToGroupHeader(lastColIndex,currentDepth,event);break;case" ":break;default:shouldPreventDefault=!1}shouldPreventDefault&&event.preventDefault()}),[apiRef,focusedColumnGroup,currentPageRows.length,goToHeader,goToGroupHeader,goToCell,getRowIdFromIndex]),handleCellKeyDown=react.useCallback(((params,event)=>{if(!event.currentTarget.contains(event.target))return;const cellParams=apiRef.current.getCellParams(params.id,params.field);if(cellParams.cellMode===GridCellModes.Edit||!isNavigationKey(event.key))return;if(!apiRef.current.unstable_applyPipeProcessors("canUpdateFocus",!0,{event,cell:cellParams}))return;const dimensions=apiRef.current.getRootDimensions();if(0===currentPageRows.length||!dimensions)return;const direction=theme.direction,viewportPageSize=apiRef.current.getViewportPageSize(),colIndexBefore=params.field?apiRef.current.getColumnIndex(params.field):0,rowIndexBefore=currentPageRows.findIndex((row=>row.id===params.id)),lastRowIndexInPage=currentPageRows.length-1,lastColIndex=gridVisibleColumnDefinitionsSelector(apiRef).length-1;let shouldPreventDefault=!0;switch(event.key){case"ArrowDown":rowIndexBefore<lastRowIndexInPage&&goToCell(colIndexBefore,getRowIdFromIndex(rowIndexBefore+1));break;case"ArrowUp":rowIndexBefore>0?goToCell(colIndexBefore,getRowIdFromIndex(rowIndexBefore-1)):headerFilteringEnabled?goToHeaderFilter(colIndexBefore,event):goToHeader(colIndexBefore,event);break;case"ArrowRight":{const rightColIndex=getRightColumnIndex({currentColIndex:colIndexBefore,firstColIndex:0,lastColIndex,direction});null!==rightColIndex&&goToCell(rightColIndex,getRowIdFromIndex(rowIndexBefore),"rtl"===direction?"left":"right");break}case"ArrowLeft":{const leftColIndex=getLeftColumnIndex({currentColIndex:colIndexBefore,firstColIndex:0,lastColIndex,direction});null!==leftColIndex&&goToCell(leftColIndex,getRowIdFromIndex(rowIndexBefore),"rtl"===direction?"right":"left");break}case"Tab":event.shiftKey&&colIndexBefore>0?goToCell(colIndexBefore-1,getRowIdFromIndex(rowIndexBefore),"left"):!event.shiftKey&&colIndexBefore<lastColIndex&&goToCell(colIndexBefore+1,getRowIdFromIndex(rowIndexBefore),"right");break;case" ":{if("__detail_panel_toggle__"===params.field)break;const colDef=params.colDef;if(colDef&&"treeDataGroup"===colDef.type)break;!event.shiftKey&&rowIndexBefore<lastRowIndexInPage&&goToCell(colIndexBefore,getRowIdFromIndex(Math.min(rowIndexBefore+viewportPageSize,lastRowIndexInPage)));break}case"PageDown":rowIndexBefore<lastRowIndexInPage&&goToCell(colIndexBefore,getRowIdFromIndex(Math.min(rowIndexBefore+viewportPageSize,lastRowIndexInPage)));break;case"PageUp":{const nextRowIndex=Math.max(rowIndexBefore-viewportPageSize,0);nextRowIndex!==rowIndexBefore&&nextRowIndex>=0?goToCell(colIndexBefore,getRowIdFromIndex(nextRowIndex)):goToHeader(colIndexBefore,event);break}case"Home":event.ctrlKey||event.metaKey||event.shiftKey?goToCell(0,getRowIdFromIndex(0)):goToCell(0,getRowIdFromIndex(rowIndexBefore));break;case"End":event.ctrlKey||event.metaKey||event.shiftKey?goToCell(lastColIndex,getRowIdFromIndex(lastRowIndexInPage)):goToCell(lastColIndex,getRowIdFromIndex(rowIndexBefore));break;default:shouldPreventDefault=!1}shouldPreventDefault&&event.preventDefault()}),[apiRef,currentPageRows,theme.direction,goToCell,getRowIdFromIndex,headerFilteringEnabled,goToHeaderFilter,goToHeader]),checkIfCanStartEditing=react.useCallback(((initialValue,{event})=>" "!==event.key&&initialValue),[]);useGridRegisterPipeProcessor(apiRef,"canStartEditing",checkIfCanStartEditing),useGridApiEventHandler(apiRef,"columnHeaderKeyDown",handleColumnHeaderKeyDown),useGridApiEventHandler(apiRef,"headerFilterKeyDown",handleHeaderFilterKeyDown),useGridApiEventHandler(apiRef,"columnGroupHeaderKeyDown",handleColumnGroupHeaderKeyDown),useGridApiEventHandler(apiRef,"cellKeyDown",handleCellKeyDown)};__webpack_require__("./node_modules/console-browserify/index.js");function useGridParamsApi(apiRef){const getColumnHeaderParams=react.useCallback((field=>({field,colDef:apiRef.current.getColumn(field)})),[apiRef]),getRowParams=react.useCallback((id=>{const row=apiRef.current.getRow(id);if(!row)throw new Error(`No row with id #${id} found`);return{id,columns:apiRef.current.getAllColumns(),row}}),[apiRef]),getBaseCellParams=react.useCallback(((id,field)=>{const row=apiRef.current.getRow(id),rowNode=apiRef.current.getRowNode(id);if(!row||!rowNode)throw new Error(`No row with id #${id} found`);const cellFocus=gridFocusCellSelector(apiRef),cellTabIndex=gridTabIndexCellSelector(apiRef);return{id,field,row,rowNode,value:row[field],colDef:apiRef.current.getColumn(field),cellMode:apiRef.current.getCellMode(id,field),api:apiRef.current,hasFocus:null!==cellFocus&&cellFocus.field===field&&cellFocus.id===id,tabIndex:cellTabIndex&&cellTabIndex.field===field&&cellTabIndex.id===id?0:-1}}),[apiRef]),getCellParams=react.useCallback(((id,field)=>{const colDef=apiRef.current.getColumn(field),value=apiRef.current.getCellValue(id,field),row=apiRef.current.getRow(id),rowNode=apiRef.current.getRowNode(id);if(!row||!rowNode)throw new Error(`No row with id #${id} found`);const cellFocus=gridFocusCellSelector(apiRef),cellTabIndex=gridTabIndexCellSelector(apiRef),params={id,field,row,rowNode,colDef,cellMode:apiRef.current.getCellMode(id,field),hasFocus:null!==cellFocus&&cellFocus.field===field&&cellFocus.id===id,tabIndex:cellTabIndex&&cellTabIndex.field===field&&cellTabIndex.id===id?0:-1,value,formattedValue:value};return colDef&&colDef.valueFormatter&&(params.formattedValue=colDef.valueFormatter({id,field:params.field,value:params.value,api:apiRef.current})),params.isEditable=colDef&&apiRef.current.isCellEditable(params),params}),[apiRef]),getCellValue=react.useCallback(((id,field)=>{const colDef=apiRef.current.getColumn(field);if(!colDef||!colDef.valueGetter){const rowModel=apiRef.current.getRow(id);if(!rowModel)throw new Error(`No row with id #${id} found`);return rowModel[field]}return colDef.valueGetter(getBaseCellParams(id,field))}),[apiRef,getBaseCellParams]),getColumnHeaderElement=react.useCallback((field=>apiRef.current.rootElementRef.current?function getGridColumnHeaderElement(root,field){return root.querySelector(`[role="columnheader"][data-field="${escapeOperandAttributeSelector(field)}"]`)}(apiRef.current.rootElementRef.current,field):null),[apiRef]),getRowElement=react.useCallback((id=>apiRef.current.rootElementRef.current?function getGridRowElement(root,id){return root.querySelector(getGridRowElementSelector(id))}(apiRef.current.rootElementRef.current,id):null),[apiRef]),getCellElement=react.useCallback(((id,field)=>apiRef.current.rootElementRef.current?function getGridCellElement(root,{id,field}){const selector=`${getGridRowElementSelector(id)} .${gridClasses_gridClasses.cell}[data-field="${escapeOperandAttributeSelector(field)}"]`;return root.querySelector(selector)}(apiRef.current.rootElementRef.current,{id,field}):null),[apiRef]);useGridApiMethod(apiRef,{getCellValue,getCellParams,getCellElement,getRowParams,getRowElement,getColumnHeaderParams,getColumnHeaderElement},"public")}function scrollIntoView(dimensions){const{clientHeight,scrollTop,offsetHeight,offsetTop}=dimensions,elementBottom=offsetTop+offsetHeight;return offsetHeight>clientHeight?offsetTop:elementBottom-clientHeight>scrollTop?elementBottom-clientHeight:offsetTop<scrollTop?offsetTop:void 0}function sanitizeCellValue(value,delimiterCharacter){if("string"==typeof value){const formattedValue=value.replace(/"/g,'""');return[delimiterCharacter,"\n","\r"].some((delimiter=>formattedValue.includes(delimiter)))?`"${formattedValue}"`:formattedValue}return value}const serializeCellValue=(cellParams,options)=>{const{delimiterCharacter,ignoreValueFormatter}=options;let value;if(ignoreValueFormatter){var _cellParams$value2;const columnType=cellParams.colDef.type;if("number"===columnType)value=String(cellParams.value);else if("date"===columnType||"dateTime"===columnType){var _cellParams$value;value=null==(_cellParams$value=cellParams.value)?void 0:_cellParams$value.toISOString()}else value="function"==typeof(null==(_cellParams$value2=cellParams.value)?void 0:_cellParams$value2.toString)?cellParams.value.toString():cellParams.value}else value=cellParams.formattedValue;return sanitizeCellValue(value,delimiterCharacter)};buildWarning(["MUI: When the value of a field is an object or a `renderCell` is provided, the CSV export might not display the value correctly.","You can provide a `valueFormatter` with a string representation to be used."]);function buildCSV(options){const{columns,rowIds,getCellParams,delimiterCharacter,includeHeaders,ignoreValueFormatter}=options,CSVBody=rowIds.reduce(((acc,id)=>`${acc}${(({id,columns,getCellParams,delimiterCharacter,ignoreValueFormatter})=>columns.map((column=>{const cellParams=getCellParams(id,column.field);return serializeCellValue(cellParams,{delimiterCharacter,ignoreValueFormatter})})))({id,columns,getCellParams,delimiterCharacter,ignoreValueFormatter}).join(delimiterCharacter)}\r\n`),"").trim();if(!includeHeaders)return CSVBody;return`${`${columns.filter((column=>column.field!==GRID_CHECKBOX_SELECTION_COL_DEF.field)).map((column=>sanitizeCellValue(column.headerName||column.field,delimiterCharacter))).join(delimiterCharacter)}\r\n`}${CSVBody}`.trim()}const getColumnsToExport=({apiRef,options})=>{const columns=gridColumnDefinitionsSelector(apiRef);if(options.fields)return options.fields.map((field=>columns.find((column=>column.field===field)))).filter((column=>!!column));return(options.allColumns?columns:gridVisibleColumnDefinitionsSelector(apiRef)).filter((column=>!column.disableExport))},defaultGetRowsToExport=({apiRef})=>{var _pinnedRows$top,_pinnedRows$bottom;const filteredSortedRowIds=gridFilteredSortedRowIdsSelector(apiRef),rowTree=gridRowTreeSelector(apiRef),selectedRows=apiRef.current.getSelectedRows(),bodyRows=filteredSortedRowIds.filter((id=>"footer"!==rowTree[id].type)),pinnedRows=gridPinnedRowsSelector(apiRef),topPinnedRowsIds=(null==pinnedRows||null==(_pinnedRows$top=pinnedRows.top)?void 0:_pinnedRows$top.map((row=>row.id)))||[],bottomPinnedRowsIds=(null==pinnedRows||null==(_pinnedRows$bottom=pinnedRows.bottom)?void 0:_pinnedRows$bottom.map((row=>row.id)))||[];return bodyRows.unshift(...topPinnedRowsIds),bodyRows.push(...bottomPinnedRowsIds),selectedRows.size>0?bodyRows.filter((id=>selectedRows.has(id))):bodyRows},GridToolbarExport_excluded=["hideMenu","options"],GridToolbarExport_excluded2=["hideMenu","options"];function GridCsvExportMenuItem(props){const apiRef=useGridApiContext_useGridApiContext(),{hideMenu,options}=props,other=(0,objectWithoutPropertiesLoose.Z)(props,GridToolbarExport_excluded);return(0,jsx_runtime.jsx)(MenuItem.Z,(0,esm_extends.Z)({onClick:()=>{apiRef.current.exportDataAsCsv(options),null==hideMenu||hideMenu()}},other,{children:apiRef.current.getLocaleText("toolbarExportCSV")}))}function GridPrintExportMenuItem(props){const apiRef=useGridApiContext_useGridApiContext(),{hideMenu,options}=props,other=(0,objectWithoutPropertiesLoose.Z)(props,GridToolbarExport_excluded2);return(0,jsx_runtime.jsx)(MenuItem.Z,(0,esm_extends.Z)({onClick:()=>{apiRef.current.exportDataAsPrint(options),null==hideMenu||hideMenu()}},other,{children:apiRef.current.getLocaleText("toolbarExportPrint")}))}const useGridCsvExport=(apiRef,props)=>{const logger=useGridLogger(apiRef,"useGridCsvExport"),ignoreValueFormatterProp=props.unstable_ignoreValueFormatterDuringExport,ignoreValueFormatter=("object"==typeof ignoreValueFormatterProp?null==ignoreValueFormatterProp?void 0:ignoreValueFormatterProp.csvExport:ignoreValueFormatterProp)||!1,getDataAsCsv=react.useCallback(((options={})=>{var _options$getRowsToExp,_options$includeHeade;logger.debug("Get data as CSV");return buildCSV({columns:getColumnsToExport({apiRef,options}),rowIds:(null!=(_options$getRowsToExp=options.getRowsToExport)?_options$getRowsToExp:defaultGetRowsToExport)({apiRef}),getCellParams:apiRef.current.getCellParams,delimiterCharacter:options.delimiter||",",includeHeaders:null==(_options$includeHeade=options.includeHeaders)||_options$includeHeade,ignoreValueFormatter})}),[logger,apiRef,ignoreValueFormatter]),exportDataAsCsv=react.useCallback((options=>{logger.debug("Export data as CSV");const csv=getDataAsCsv(options);!function exportAs(blob,extension="csv",filename=document.title||"untitled"){const fullName=`${filename}.${extension}`;if("download"in HTMLAnchorElement.prototype){const url=URL.createObjectURL(blob),a=document.createElement("a");return a.href=url,a.download=fullName,a.click(),void setTimeout((()=>{URL.revokeObjectURL(url)}))}throw new Error("MUI: exportAs not supported")}(new Blob([null!=options&&options.utf8WithBom?new Uint8Array([239,187,191]):"",csv],{type:"text/csv"}),"csv",null==options?void 0:options.fileName)}),[logger,getDataAsCsv]);useGridApiMethod(apiRef,{getDataAsCsv,exportDataAsCsv},"public");const addExportMenuButtons=react.useCallback(((initialValue,options)=>{var _options$csvOptions;return null!=(_options$csvOptions=options.csvOptions)&&_options$csvOptions.disableToolbarButton?initialValue:[...initialValue,{component:(0,jsx_runtime.jsx)(GridCsvExportMenuItem,{options:options.csvOptions}),componentName:"csvExport"}]}),[]);useGridRegisterPipeProcessor(apiRef,"exportMenu",addExportMenuButtons)};const useGridPrintExport=(apiRef,props)=>{const logger=useGridLogger(apiRef,"useGridPrintExport"),doc=react.useRef(null),previousGridState=react.useRef(null),previousColumnVisibility=react.useRef({});react.useEffect((()=>{doc.current=(0,ownerDocument.Z)(apiRef.current.rootElementRef.current)}),[apiRef]);const updateGridColumnsForPrint=react.useCallback(((fields,allColumns)=>new Promise((resolve=>{if(!fields&&!allColumns)return void resolve();const exportedColumnFields=getColumnsToExport({apiRef,options:{fields,allColumns}}).map((column=>column.field)),columns=gridColumnDefinitionsSelector(apiRef),newColumnVisibilityModel={};columns.forEach((column=>{newColumnVisibilityModel[column.field]=exportedColumnFields.includes(column.field)})),apiRef.current.setColumnVisibilityModel(newColumnVisibilityModel),resolve()}))),[apiRef]),handlePrintWindowLoad=react.useCallback(((printWindow,options)=>{var _querySelector,_querySelector2;const normalizeOptions=(0,esm_extends.Z)({copyStyles:!0,hideToolbar:!1,hideFooter:!1},options),printDoc=printWindow.contentDocument;if(!printDoc)return;const rowsMeta=gridRowsMetaSelector(apiRef.current.state),gridRootElement=apiRef.current.rootElementRef.current,gridClone=gridRootElement.cloneNode(!0);gridClone.querySelector(`.${gridClasses_gridClasses.main}`).style.overflow="visible",gridClone.style.contain="size";gridClone.querySelector(`.${gridClasses_gridClasses.columnHeaders}`).querySelector(`.${gridClasses_gridClasses.columnHeadersInner}`).style.width="100%";let gridToolbarElementHeight=(null==(_querySelector=gridRootElement.querySelector(`.${gridClasses_gridClasses.toolbarContainer}`))?void 0:_querySelector.offsetHeight)||0,gridFooterElementHeight=(null==(_querySelector2=gridRootElement.querySelector(`.${gridClasses_gridClasses.footerContainer}`))?void 0:_querySelector2.offsetHeight)||0;var _gridClone$querySelec,_gridClone$querySelec2;normalizeOptions.hideToolbar&&(null==(_gridClone$querySelec=gridClone.querySelector(`.${gridClasses_gridClasses.toolbarContainer}`))||_gridClone$querySelec.remove(),gridToolbarElementHeight=0);normalizeOptions.hideFooter&&(null==(_gridClone$querySelec2=gridClone.querySelector(`.${gridClasses_gridClasses.footerContainer}`))||_gridClone$querySelec2.remove(),gridFooterElementHeight=0);gridClone.style.height=`${rowsMeta.currentPageTotalHeight+getTotalHeaderHeight(apiRef,props.columnHeaderHeight)+gridToolbarElementHeight+gridFooterElementHeight}px`,gridClone.style.boxSizing="content-box";const container=document.createElement("div");container.appendChild(gridClone),printDoc.body.innerHTML=container.innerHTML;const defaultPageStyle="function"==typeof normalizeOptions.pageStyle?normalizeOptions.pageStyle():normalizeOptions.pageStyle;if("string"==typeof defaultPageStyle){const styleElement=printDoc.createElement("style");styleElement.appendChild(printDoc.createTextNode(defaultPageStyle)),printDoc.head.appendChild(styleElement)}if(normalizeOptions.bodyClassName&&printDoc.body.classList.add(...normalizeOptions.bodyClassName.split(" ")),normalizeOptions.copyStyles){const rootCandidate=gridRootElement.getRootNode(),headStyleElements=("ShadowRoot"===rootCandidate.constructor.name?rootCandidate:doc.current).querySelectorAll("style, link[rel='stylesheet']");for(let i=0;i<headStyleElements.length;i+=1){const node=headStyleElements[i];if("STYLE"===node.tagName){const newHeadStyleElements=printDoc.createElement(node.tagName),sheet=node.sheet;if(sheet){let styleCSS="";for(let j=0;j<sheet.cssRules.length;j+=1)"string"==typeof sheet.cssRules[j].cssText&&(styleCSS+=`${sheet.cssRules[j].cssText}\r\n`);newHeadStyleElements.appendChild(printDoc.createTextNode(styleCSS)),printDoc.head.appendChild(newHeadStyleElements)}}else if(node.getAttribute("href")){const newHeadStyleElements=printDoc.createElement(node.tagName);for(let j=0;j<node.attributes.length;j+=1){const attr=node.attributes[j];attr&&newHeadStyleElements.setAttribute(attr.nodeName,attr.nodeValue||"")}printDoc.head.appendChild(newHeadStyleElements)}}}printWindow.contentWindow.print()}),[apiRef,doc,props.columnHeaderHeight]),handlePrintWindowAfterPrint=react.useCallback((printWindow=>{var _previousGridState$cu,_previousGridState$cu2;doc.current.body.removeChild(printWindow),apiRef.current.restoreState(previousGridState.current||{}),null!=(_previousGridState$cu=previousGridState.current)&&null!=(_previousGridState$cu2=_previousGridState$cu.columns)&&_previousGridState$cu2.columnVisibilityModel||apiRef.current.setColumnVisibilityModel(previousColumnVisibility.current),apiRef.current.unstable_enableVirtualization(),previousGridState.current=null,previousColumnVisibility.current={}}),[apiRef]),exportDataAsPrint=react.useCallback((async options=>{if(logger.debug("Export data as Print"),!apiRef.current.rootElementRef.current)throw new Error("MUI: No grid root element available.");if(previousGridState.current=apiRef.current.exportState(),previousColumnVisibility.current=gridColumnVisibilityModelSelector(apiRef),props.pagination){const visibleRowCount=gridExpandedRowCountSelector(apiRef);apiRef.current.setPageSize(visibleRowCount)}await updateGridColumnsForPrint(null==options?void 0:options.fields,null==options?void 0:options.allColumns),apiRef.current.unstable_disableVirtualization(),await function raf(){return new Promise((resolve=>{requestAnimationFrame((()=>{resolve()}))}))}();const printWindow=function buildPrintWindow(title){const iframeEl=document.createElement("iframe");return iframeEl.style.position="absolute",iframeEl.style.width="0px",iframeEl.style.height="0px",iframeEl.title=title||document.title,iframeEl}(null==options?void 0:options.fileName);printWindow.onload=()=>{handlePrintWindowLoad(printWindow,options);printWindow.contentWindow.matchMedia("print").addEventListener("change",(mql=>{!1===mql.matches&&handlePrintWindowAfterPrint(printWindow)}))},doc.current.body.appendChild(printWindow)}),[props,logger,apiRef,handlePrintWindowLoad,handlePrintWindowAfterPrint,updateGridColumnsForPrint]);useGridApiMethod(apiRef,{exportDataAsPrint},"public");const addExportMenuButtons=react.useCallback(((initialValue,options)=>{var _options$printOptions;return null!=(_options$printOptions=options.printOptions)&&_options$printOptions.disableToolbarButton?initialValue:[...initialValue,{component:(0,jsx_runtime.jsx)(GridPrintExportMenuItem,{options:options.printOptions}),componentName:"printExport"}]}),[]);useGridRegisterPipeProcessor(apiRef,"exportMenu",addExportMenuButtons)},useGridNativeEventListener=(apiRef,ref,eventName,handler,options)=>{const logger=useGridLogger(apiRef,"useNativeEventListener"),[added,setAdded]=react.useState(!1),handlerRef=react.useRef(handler),wrapHandler=react.useCallback((event=>handlerRef.current&&handlerRef.current(event)),[]);react.useEffect((()=>{handlerRef.current=handler}),[handler]),react.useEffect((()=>{let targetElement;if(targetElement=isFunction(ref)?ref():ref&&ref.current?ref.current:null,targetElement&&eventName&&!added){logger.debug(`Binding native ${eventName} event`),targetElement.addEventListener(eventName,wrapHandler,options);const boundElem=targetElement;setAdded(!0);const unsubscribe=()=>{logger.debug(`Clearing native ${eventName} event`),boundElem.removeEventListener(eventName,wrapHandler,options)};apiRef.current.subscribeEvent("unmount",unsubscribe)}}),[ref,wrapHandler,eventName,added,logger,options,apiRef])};function writeToClipboardPolyfill(data){const span=document.createElement("span");span.style.whiteSpace="pre",span.style.userSelect="all",span.style.opacity="0px",span.textContent=data,document.body.appendChild(span);const range=document.createRange();range.selectNode(span);const selection=window.getSelection();selection.removeAllRanges(),selection.addRange(range);try{document.execCommand("copy")}finally{document.body.removeChild(span)}}const useGridClipboard=(apiRef,props)=>{const ignoreValueFormatterProp=props.unstable_ignoreValueFormatterDuringExport,ignoreValueFormatter=("object"==typeof ignoreValueFormatterProp?null==ignoreValueFormatterProp?void 0:ignoreValueFormatterProp.clipboardExport:ignoreValueFormatterProp)||!1,clipboardCopyCellDelimiter=props.clipboardCopyCellDelimiter,handleCopy=react.useCallback((event=>{const isModifierKeyPressed=event.ctrlKey||event.metaKey;if("C"!==String.fromCharCode(event.keyCode)||!isModifierKeyPressed)return;if(function hasNativeSelection(element){var _window$getSelection;return!(null==(_window$getSelection=window.getSelection())||!_window$getSelection.toString())||!!(element&&(element.selectionEnd||0)-(element.selectionStart||0)>0)}(event.target))return;let textToCopy="";if(apiRef.current.getSelectedRows().size>0)textToCopy=apiRef.current.getDataAsCsv({includeHeaders:!1,delimiter:clipboardCopyCellDelimiter});else{const focusedCell=gridFocusCellSelector(apiRef);if(focusedCell){const cellParams=apiRef.current.getCellParams(focusedCell.id,focusedCell.field);textToCopy=serializeCellValue(cellParams,{delimiterCharacter:clipboardCopyCellDelimiter,ignoreValueFormatter})}}textToCopy=apiRef.current.unstable_applyPipeProcessors("clipboardCopy",textToCopy),textToCopy&&(!function copyToClipboard(data){navigator.clipboard?navigator.clipboard.writeText(data).catch((()=>{writeToClipboardPolyfill(data)})):writeToClipboardPolyfill(data)}(textToCopy),apiRef.current.publishEvent("clipboardCopy",textToCopy))}),[apiRef,ignoreValueFormatter,clipboardCopyCellDelimiter]);useGridNativeEventListener(apiRef,apiRef.current.rootElementRef,"keydown",handleCopy),useGridApiOptionHandler(apiRef,"clipboardCopy",props.onClipboardCopy)};var ownerWindow=__webpack_require__("./node_modules/@mui/utils/esm/ownerWindow/ownerWindow.js");const gridColumnReorderDragColSelector=createSelector((state=>state.columnReorder),(columnReorder=>columnReorder.dragCol)),columnReorderStateInitializer=state=>(0,esm_extends.Z)({},state,{columnReorder:{dragCol:""}}),useGridColumnReorder=(apiRef,props)=>{const logger=useGridLogger(apiRef,"useGridColumnReorder"),dragColNode=react.useRef(null),cursorPosition=react.useRef({x:0,y:0}),originColumnIndex=react.useRef(null),forbiddenIndexes=react.useRef({}),removeDnDStylesTimeout=react.useRef(),classes=(ownerState=>{const{classes}=ownerState;return(0,composeClasses.Z)({columnHeaderDragging:["columnHeader--dragging"]},getDataGridUtilityClass,classes)})({classes:props.classes}),theme=(0,useTheme.Z)();react.useEffect((()=>()=>{clearTimeout(removeDnDStylesTimeout.current)}),[]);const handleDragStart=react.useCallback(((params,event)=>{if(props.disableColumnReorder||params.colDef.disableReorder)return;logger.debug(`Start dragging col ${params.field}`),event.stopPropagation(),dragColNode.current=event.currentTarget,dragColNode.current.classList.add(classes.columnHeaderDragging),event.dataTransfer&&(event.dataTransfer.effectAllowed="move"),apiRef.current.setState((state=>(0,esm_extends.Z)({},state,{columnReorder:(0,esm_extends.Z)({},state.columnReorder,{dragCol:params.field})}))),apiRef.current.forceUpdate(),removeDnDStylesTimeout.current=setTimeout((()=>{dragColNode.current.classList.remove(classes.columnHeaderDragging)})),originColumnIndex.current=apiRef.current.getColumnIndex(params.field,!1);const draggingColumnGroupPath=apiRef.current.unstable_getColumnGroupPath(params.field),columnIndex=originColumnIndex.current,allColumns=apiRef.current.getAllColumns(),groupsLookup=apiRef.current.unstable_getAllGroupDetails(),getGroupPathFromColumnIndex=colIndex=>{const field=allColumns[colIndex].field;return apiRef.current.unstable_getColumnGroupPath(field)};let limitingGroupId=null;draggingColumnGroupPath.forEach((groupId=>{var _groupsLookup$groupId;null!=(_groupsLookup$groupId=groupsLookup[groupId])&&_groupsLookup$groupId.freeReordering||(columnIndex>0&&getGroupPathFromColumnIndex(columnIndex-1).includes(groupId)||columnIndex+1<allColumns.length&&getGroupPathFromColumnIndex(columnIndex+1).includes(groupId))&&(limitingGroupId=groupId)})),forbiddenIndexes.current={};for(let indexToForbid=0;indexToForbid<allColumns.length;indexToForbid+=1){const leftIndex=indexToForbid<=columnIndex?indexToForbid-1:indexToForbid,rightIndex=indexToForbid<columnIndex?indexToForbid:indexToForbid+1;if(null!==limitingGroupId){let allowIndex=!1;(leftIndex>=0&&getGroupPathFromColumnIndex(leftIndex).includes(limitingGroupId)||rightIndex<allColumns.length&&getGroupPathFromColumnIndex(rightIndex).includes(limitingGroupId))&&(allowIndex=!0),allowIndex||(forbiddenIndexes.current[indexToForbid]=!0)}leftIndex>=0&&rightIndex<allColumns.length&&getGroupPathFromColumnIndex(rightIndex).forEach((groupId=>{var _groupsLookup$groupId2;getGroupPathFromColumnIndex(leftIndex).includes(groupId)&&(draggingColumnGroupPath.includes(groupId)||null!=(_groupsLookup$groupId2=groupsLookup[groupId])&&_groupsLookup$groupId2.freeReordering||(forbiddenIndexes.current[indexToForbid]=!0))}))}}),[props.disableColumnReorder,classes.columnHeaderDragging,logger,apiRef]),handleDragEnter=react.useCallback(((params,event)=>{event.preventDefault(),event.stopPropagation()}),[]),handleDragOver=react.useCallback(((params,event)=>{const dragColField=gridColumnReorderDragColSelector(apiRef);if(!dragColField)return;logger.debug(`Dragging over col ${params.field}`),event.preventDefault(),event.stopPropagation();const coordinates={x:event.clientX,y:event.clientY};if(params.field!==dragColField&&(currentCoordinates=cursorPosition.current,nextCoordinates=coordinates,currentCoordinates.x!==nextCoordinates.x||currentCoordinates.y!==nextCoordinates.y)){const targetColIndex=apiRef.current.getColumnIndex(params.field,!1),targetColVisibleIndex=apiRef.current.getColumnIndex(params.field,!0),targetCol=apiRef.current.getColumn(params.field),dragColIndex=apiRef.current.getColumnIndex(dragColField,!1),visibleColumns=apiRef.current.getVisibleColumns(),allColumns=apiRef.current.getAllColumns(),cursorMoveDirectionX=((currentCoordinates,nextCoordinates)=>currentCoordinates.x<=nextCoordinates.x?"right":"left")(cursorPosition.current,coordinates),hasMovedLeft="left"===cursorMoveDirectionX&&("rtl"===theme.direction?dragColIndex<targetColIndex:targetColIndex<dragColIndex),hasMovedRight="right"===cursorMoveDirectionX&&("rtl"===theme.direction?targetColIndex<dragColIndex:dragColIndex<targetColIndex);if(hasMovedLeft||hasMovedRight){let canBeReordered,indexOffsetInHiddenColumns=0;if(canBeReordered=!targetCol.disableReorder||(hasMovedLeft?targetColVisibleIndex>0&&!visibleColumns[targetColVisibleIndex-1].disableReorder:targetColVisibleIndex<visibleColumns.length-1&&!visibleColumns[targetColVisibleIndex+1].disableReorder),forbiddenIndexes.current[targetColIndex]){let nextVisibleColumnField,indexWithOffset=targetColIndex+indexOffsetInHiddenColumns;if(hasMovedLeft)for(nextVisibleColumnField=targetColVisibleIndex>0?visibleColumns[targetColVisibleIndex-1].field:null;indexWithOffset>0&&allColumns[indexWithOffset].field!==nextVisibleColumnField&&forbiddenIndexes.current[indexWithOffset];)indexOffsetInHiddenColumns-=1,indexWithOffset=targetColIndex+indexOffsetInHiddenColumns;else for(nextVisibleColumnField=targetColVisibleIndex+1<visibleColumns.length?visibleColumns[targetColVisibleIndex+1].field:null;indexWithOffset<allColumns.length-1&&allColumns[indexWithOffset].field!==nextVisibleColumnField&&forbiddenIndexes.current[indexWithOffset];)indexOffsetInHiddenColumns+=1,indexWithOffset=targetColIndex+indexOffsetInHiddenColumns;(forbiddenIndexes.current[indexWithOffset]||allColumns[indexWithOffset].field===nextVisibleColumnField)&&(canBeReordered=!1)}apiRef.current.unstable_applyPipeProcessors("canBeReordered",canBeReordered,{targetIndex:targetColVisibleIndex})&&apiRef.current.setColumnIndex(dragColField,targetColIndex+indexOffsetInHiddenColumns)}cursorPosition.current=coordinates}var currentCoordinates,nextCoordinates}),[apiRef,logger,theme.direction]),handleDragEnd=react.useCallback(((params,event)=>{const dragColField=gridColumnReorderDragColSelector(apiRef);if(!props.disableColumnReorder&&dragColField){if(logger.debug("End dragging col"),event.preventDefault(),event.stopPropagation(),clearTimeout(removeDnDStylesTimeout.current),dragColNode.current=null,"none"!==event.dataTransfer.dropEffect||props.keepColumnPositionIfDraggedOutside){const columnOrderChangeParams={column:apiRef.current.getColumn(dragColField),targetIndex:apiRef.current.getColumnIndexRelativeToVisibleColumns(dragColField),oldIndex:originColumnIndex.current};apiRef.current.publishEvent("columnOrderChange",columnOrderChangeParams)}else apiRef.current.setColumnIndex(dragColField,originColumnIndex.current),originColumnIndex.current=null;apiRef.current.setState((state=>(0,esm_extends.Z)({},state,{columnReorder:(0,esm_extends.Z)({},state.columnReorder,{dragCol:""})}))),apiRef.current.forceUpdate()}}),[props.disableColumnReorder,props.keepColumnPositionIfDraggedOutside,logger,apiRef]);useGridApiEventHandler(apiRef,"columnHeaderDragStart",handleDragStart),useGridApiEventHandler(apiRef,"columnHeaderDragEnter",handleDragEnter),useGridApiEventHandler(apiRef,"columnHeaderDragOver",handleDragOver),useGridApiEventHandler(apiRef,"columnHeaderDragEnd",handleDragEnd),useGridApiEventHandler(apiRef,"cellDragEnter",handleDragEnter),useGridApiEventHandler(apiRef,"cellDragOver",handleDragOver),useGridApiOptionHandler(apiRef,"columnOrderChange",props.onColumnOrderChange)};function findGroupHeaderElementsFromField(elem,field){var _elem$querySelectorAl;return Array.from(null!=(_elem$querySelectorAl=elem.querySelectorAll(`[data-fields*="|-${field}-|"]`))?_elem$querySelectorAl:[])}function findGridCellElementsFromCol(col,api){const root=findParentElementFromClassName(col,gridClasses_gridClasses.root);if(!root)throw new Error("MUI: The root element is not found.");const ariaColIndex=col.getAttribute("aria-colindex");if(!ariaColIndex)return[];const colIndex=Number(ariaColIndex)-1,cells=[];return root.querySelectorAll(`.${gridClasses_gridClasses.row}`).forEach((rowElement=>{const rowId=rowElement.getAttribute("data-id");if(!rowId)return;let columnIndex=colIndex;const cellColSpanInfo=api.unstable_getCellColSpanInfo(rowId,colIndex);cellColSpanInfo&&cellColSpanInfo.spannedByColSpan&&(columnIndex=cellColSpanInfo.leftVisibleCellIndex);const cell=rowElement.querySelector(`[data-colindex="${columnIndex}"]`);cell&&cells.push(cell)})),cells}let cachedSupportsTouchActionNone=!1;function doesSupportTouchActionNone(){return void 0===cachedSupportsTouchActionNone&&(cachedSupportsTouchActionNone="undefined"==typeof CSS||"function"!=typeof CSS.supports||CSS.supports("touch-action","none")),cachedSupportsTouchActionNone}function trackFinger(event,currentTouchId){if(void 0!==currentTouchId&&event.changedTouches){for(let i=0;i<event.changedTouches.length;i+=1){const touch=event.changedTouches[i];if(touch.identifier===currentTouchId)return{x:touch.clientX,y:touch.clientY}}return!1}return{x:event.clientX,y:event.clientY}}function computeNewWidth(initialOffsetToSeparator,clickX,columnBounds,resizeDirection){let newWidth=initialOffsetToSeparator;return newWidth+="Right"===resizeDirection?clickX-columnBounds.left:columnBounds.right-clickX,newWidth}function computeOffsetToSeparator(clickX,columnBounds,resizeDirection){return"Left"===resizeDirection?clickX-columnBounds.left:columnBounds.right-clickX}function getResizeDirection(element,direction){const side=element.classList.contains(gridClasses_gridClasses["columnSeparator--sideRight"])?"Right":"Left";return"rtl"===direction?function flipResizeDirection(side){return"Right"===side?"Left":"Right"}(side):side}const columnResizeStateInitializer=state=>(0,esm_extends.Z)({},state,{columnResize:{resizingColumnField:""}}),GRID_TREE_DATA_GROUPING_COL_DEF=(0,esm_extends.Z)({},GRID_STRING_COL_DEF,{type:"treeDataGroup",sortable:!1,filterable:!1,disableColumnMenu:!0,disableReorder:!0,align:"left",width:200,valueGetter:params=>"group"===params.rowNode.type?params.rowNode.groupingKey:void 0}),GRID_TREE_DATA_GROUPING_COL_DEF_FORCED_PROPERTIES={field:"__tree_data_group__",editable:!1,groupable:!1};var Box=__webpack_require__("./node_modules/@mui/material/Box/Box.js");const useGridRootProps_useGridRootProps=useGridRootProps,utils_useGridApiContext_useGridApiContext=useGridApiContext_useGridApiContext;function GridTreeDataGroupingCell(props){var _filteredDescendantCo,_rootProps$slotProps;const{id,field,formattedValue,rowNode,hideDescendantCount,offsetMultiplier=2}=props,rootProps=useGridRootProps_useGridRootProps(),apiRef=utils_useGridApiContext_useGridApiContext(),classes=(ownerState=>{const{classes}=ownerState;return(0,composeClasses.Z)({root:["treeDataGroupingCell"],toggle:["treeDataGroupingCellToggle"]},getDataGridUtilityClass,classes)})({classes:rootProps.classes}),filteredDescendantCount=null!=(_filteredDescendantCo=useGridSelector(apiRef,gridFilteredDescendantCountLookupSelector)[rowNode.id])?_filteredDescendantCo:0,Icon=rowNode.childrenExpanded?rootProps.slots.treeDataCollapseIcon:rootProps.slots.treeDataExpandIcon;return(0,jsx_runtime.jsxs)(Box.Z,{className:classes.root,sx:{ml:rowNode.depth*offsetMultiplier},children:[(0,jsx_runtime.jsx)("div",{className:classes.toggle,children:filteredDescendantCount>0&&(0,jsx_runtime.jsx)(rootProps.slots.baseIconButton,(0,esm_extends.Z)({size:"small",onClick:event=>{apiRef.current.setRowChildrenExpansion(id,!rowNode.childrenExpanded),apiRef.current.setCellFocus(id,field),event.stopPropagation()},tabIndex:-1,"aria-label":rowNode.childrenExpanded?apiRef.current.getLocaleText("treeDataCollapse"):apiRef.current.getLocaleText("treeDataExpand")},null==rootProps||null==(_rootProps$slotProps=rootProps.slotProps)?void 0:_rootProps$slotProps.baseIconButton,{children:(0,jsx_runtime.jsx)(Icon,{fontSize:"inherit"})}))}),(0,jsx_runtime.jsxs)("span",{children:[void 0===formattedValue?rowNode.groupingKey:formattedValue,!hideDescendantCount&&filteredDescendantCount>0?` (${filteredDescendantCount})`:""]})]})}const getGroupRowIdFromPath=path=>`auto-generated-row-${path.map((groupingCriteria=>`${groupingCriteria.field}/${groupingCriteria.key}`)).join("-")}`,getNodePathInTree=({id,tree})=>{const path=[];let node=tree[id];for(;node.id!==GRID_ROOT_GROUP_ID;)path.push({field:"leaf"===node.type?null:node.groupingField,key:node.groupingKey}),node=tree[node.parent];return path.reverse(),path},updateGroupDefaultExpansion=(node,defaultGroupingExpansionDepth,isGroupExpandedByDefault)=>{let childrenExpanded;return childrenExpanded=node.id===GRID_ROOT_GROUP_ID||(isGroupExpandedByDefault?isGroupExpandedByDefault(node):-1===defaultGroupingExpansionDepth||defaultGroupingExpansionDepth>node.depth),node.childrenExpanded=childrenExpanded,node},insertNodeInTree=(node,tree,treeDepths,previousTree)=>{var _treeDepths$node$dept;tree[node.id]=node,treeDepths[node.depth]=(null!=(_treeDepths$node$dept=treeDepths[node.depth])?_treeDepths$node$dept:0)+1;const parentNode=tree[node.parent];if("group"===node.type||"leaf"===node.type){var _groupingField,_groupingKey,_parentNode$childrenF;const groupingFieldName=null!=(_groupingField=node.groupingField)?_groupingField:"__no_field__",groupingKeyName=null!=(_groupingKey=node.groupingKey)?_groupingKey:"__no_key__",groupingField=null==(_parentNode$childrenF=parentNode.childrenFromPath)?void 0:_parentNode$childrenF[groupingFieldName];null!==previousTree&&previousTree[parentNode.id]===tree[parentNode.id]?parentNode.children=[...parentNode.children,node.id]:parentNode.children.push(node.id),null==groupingField?parentNode.childrenFromPath[groupingFieldName]={[groupingKeyName.toString()]:node.id}:groupingField[groupingKeyName.toString()]=node.id}else"footer"===node.type&&(parentNode.footerId=node.id)},removeNodeFromTree=({node,tree,treeDepths})=>{delete tree[node.id];const nodeDepth=node.depth,currentNodeCount=treeDepths[nodeDepth];1===currentNodeCount?delete treeDepths[nodeDepth]:treeDepths[nodeDepth]=currentNodeCount-1;const parentNode=tree[node.parent];if("footer"===node.type)tree[parentNode.id]=(0,esm_extends.Z)({},parentNode,{footerId:null});else{var _groupingField2,_groupingKey2,_parentNode$childrenF2,_parentNode$childrenF3;const groupingField=null!=(_groupingField2=node.groupingField)?_groupingField2:"__no_field__",groupingKey=null!=(_groupingKey2=node.groupingKey)?_groupingKey2:"__no_key__",_ref=null!=(_parentNode$childrenF2=null==(_parentNode$childrenF3=parentNode.childrenFromPath)?void 0:_parentNode$childrenF3[groupingField])?_parentNode$childrenF2:{},_groupingKey$toString=groupingKey.toString(),newChildrenFromPathWithField=(0,objectWithoutPropertiesLoose.Z)(_ref,[_groupingKey$toString].map(toPropertyKey.Z)),children=parentNode.children.filter((childId=>childId!==node.id)),childrenFromPath=(0,esm_extends.Z)({},parentNode.childrenFromPath);0===Object.keys(newChildrenFromPathWithField).length?delete childrenFromPath[groupingField]:childrenFromPath[groupingField]=newChildrenFromPathWithField,tree[parentNode.id]=(0,esm_extends.Z)({},parentNode,{children,childrenFromPath})}},updateGroupNodeIdAndAutoGenerated=({node,updatedNode,previousTree,tree,treeDepths})=>{node.children.forEach((childId=>{tree[childId]=(0,esm_extends.Z)({},tree[childId],{parent:updatedNode.id})})),removeNodeFromTree({node,tree,treeDepths});const groupNode=(0,esm_extends.Z)({},node,updatedNode);insertNodeInTree(groupNode,tree,treeDepths,previousTree)},createUpdatedGroupsManager=()=>({value:{},addAction(groupId,action){this.value[groupId]||(this.value[groupId]={}),this.value[groupId][action]=!0}}),utils_getVisibleRowsLookup=({tree,filteredRowsLookup})=>{if(!filteredRowsLookup)return{};const visibleRowsLookup={},handleTreeNode=(node,areAncestorsExpanded)=>{const isPassingFiltering=filteredRowsLookup[node.id];"group"===node.type&&node.children.forEach((childId=>{const childNode=tree[childId];handleTreeNode(childNode,areAncestorsExpanded&&!!node.childrenExpanded)})),visibleRowsLookup[node.id]=isPassingFiltering&&areAncestorsExpanded,"group"===node.type&&null!=node.footerId&&(visibleRowsLookup[node.footerId]=isPassingFiltering&&areAncestorsExpanded&&!!node.childrenExpanded)},nodes=Object.values(tree);for(let i=0;i<nodes.length;i+=1){const node=nodes[i];0===node.depth&&handleTreeNode(node,!0)}return visibleRowsLookup},insertDataRowInTree=({id,path,updatedGroupsManager,previousTree,tree,treeDepths,onDuplicatePath,isGroupExpandedByDefault,defaultGroupingExpansionDepth})=>{let parentNodeId=GRID_ROOT_GROUP_ID;for(let depth=0;depth<path.length;depth+=1){var _childrenFromPath,_childrenFromPath$fie;const{key,field}=path[depth],fieldWithDefaultValue=null!=field?field:"__no_field__",keyWithDefaultValue=null!=key?key:"__no_key__",existingNodeIdWithPartialPath=null==(_childrenFromPath=tree[parentNodeId].childrenFromPath)||null==(_childrenFromPath$fie=_childrenFromPath[fieldWithDefaultValue])?void 0:_childrenFromPath$fie[keyWithDefaultValue.toString()];if(depth===path.length-1)if(null==existingNodeIdWithPartialPath){const leafNode={type:"leaf",id,depth,parent:parentNodeId,groupingKey:key};null==updatedGroupsManager||updatedGroupsManager.addAction(parentNodeId,"insertChildren"),insertNodeInTree(leafNode,tree,treeDepths,previousTree)}else{const existingNodeWithPartialPath=tree[existingNodeIdWithPartialPath];"group"===existingNodeWithPartialPath.type&&existingNodeWithPartialPath.isAutoGenerated?(null==updatedGroupsManager||updatedGroupsManager.addAction(parentNodeId,"removeChildren"),null==updatedGroupsManager||updatedGroupsManager.addAction(parentNodeId,"insertChildren"),updateGroupNodeIdAndAutoGenerated({tree,previousTree,treeDepths,node:existingNodeWithPartialPath,updatedNode:{id,isAutoGenerated:!1}})):null==onDuplicatePath||onDuplicatePath(existingNodeIdWithPartialPath,id,path)}else if(null==existingNodeIdWithPartialPath){const nodeId=getGroupRowIdFromPath(path.slice(0,depth+1)),autoGeneratedGroupNode={type:"group",id:nodeId,parent:parentNodeId,depth,isAutoGenerated:!0,groupingKey:key,groupingField:field,children:[],childrenFromPath:{},childrenExpanded:!1};null==updatedGroupsManager||updatedGroupsManager.addAction(parentNodeId,"insertChildren"),insertNodeInTree(updateGroupDefaultExpansion(autoGeneratedGroupNode,defaultGroupingExpansionDepth,isGroupExpandedByDefault),tree,treeDepths,previousTree),parentNodeId=nodeId}else{const currentGroupNode=tree[existingNodeIdWithPartialPath];if("group"!==currentGroupNode.type){const groupNode={type:"group",id:currentGroupNode.id,parent:currentGroupNode.parent,depth:currentGroupNode.depth,isAutoGenerated:!1,groupingKey:key,groupingField:field,children:[],childrenFromPath:{},childrenExpanded:!1};tree[existingNodeIdWithPartialPath]=updateGroupDefaultExpansion(groupNode,defaultGroupingExpansionDepth,isGroupExpandedByDefault)}parentNodeId=currentGroupNode.id}}};class Node{constructor(data,next){this.next=void 0,this.data=void 0,this.next=next,this.data=data}insertAfter(list){if(!list.first||!list.last)return;const next=this.next;this.next=list.first,list.last.next=next}}class List{constructor(first,last){this.first=void 0,this.last=void 0,this.first=first,this.last=last}data(){const array=[];return this.forEach((node=>{array.push(node.data)})),array}forEach(fn){let current=this.first;for(;null!==current;)fn(current),current=current.next}static from(array){if(0===array.length)return new List(null,null);let index=0;const first=new Node(array[index],null);let current=first;for(;index+1<array.length;){index+=1;const node=new Node(array[index],null);current.next=node,current=node}return new List(first,current)}}const removeNodeAndCleanParent=({node,tree,treeDepths,updatedGroupsManager})=>{removeNodeFromTree({node,tree,treeDepths}),"group"===node.type&&null!=node.footerId&&removeNodeFromTree({node:tree[node.footerId],tree,treeDepths});const parentNode=tree[node.parent];null==updatedGroupsManager||updatedGroupsManager.addAction(parentNode.id,"removeChildren");parentNode.id!==GRID_ROOT_GROUP_ID&&0===parentNode.children.length&&(parentNode.isAutoGenerated?removeNodeAndCleanParent({node:parentNode,tree,treeDepths}):tree[parentNode.id]={type:"leaf",id:parentNode.id,depth:parentNode.depth,parent:parentNode.parent,groupingKey:parentNode.groupingKey})},removeDataRowFromTree=({id,tree,treeDepths,updatedGroupsManager})=>{const node=tree[id];"group"===node.type&&node.children.length>0?(({node,tree,treeDepths,updatedGroupsManager})=>{null==updatedGroupsManager||updatedGroupsManager.addAction(node.parent,"removeChildren"),null==updatedGroupsManager||updatedGroupsManager.addAction(node.parent,"insertChildren"),updateGroupNodeIdAndAutoGenerated({previousTree:null,tree,treeDepths,node,updatedNode:{id:getGroupRowIdFromPath(getNodePathInTree({id:node.id,tree})),isAutoGenerated:!0}})})({node,tree,treeDepths,updatedGroupsManager}):removeNodeAndCleanParent({node,tree,treeDepths,updatedGroupsManager})},useGridTreeDataPreProcessors_excluded=["hideDescendantCount"],useGridTreeDataPreProcessors=(privateApiRef,props)=>{const setStrategyAvailability=react.useCallback((()=>{privateApiRef.current.setStrategyAvailability("rowTree","tree-data",props.treeData?()=>!0:()=>!1)}),[privateApiRef,props.treeData]),getGroupingColDef=react.useCallback((()=>{var _colDefOverride;const groupingColDefProp=props.groupingColDef;let colDefOverride;if("function"==typeof groupingColDefProp){colDefOverride=groupingColDefProp({groupingName:"tree-data",fields:[]})}else colDefOverride=groupingColDefProp;const _ref=null!=(_colDefOverride=colDefOverride)?_colDefOverride:{},{hideDescendantCount}=_ref,colDefOverrideProperties=(0,objectWithoutPropertiesLoose.Z)(_ref,useGridTreeDataPreProcessors_excluded),commonProperties=(0,esm_extends.Z)({},GRID_TREE_DATA_GROUPING_COL_DEF,{renderCell:params=>(0,jsx_runtime.jsx)(GridTreeDataGroupingCell,(0,esm_extends.Z)({},params,{hideDescendantCount})),headerName:privateApiRef.current.getLocaleText("treeDataGroupingHeaderName")});return(0,esm_extends.Z)({},commonProperties,colDefOverrideProperties,GRID_TREE_DATA_GROUPING_COL_DEF_FORCED_PROPERTIES)}),[privateApiRef,props.groupingColDef]),updateGroupingColumn=react.useCallback((columnsState=>{const groupingColDefField=GRID_TREE_DATA_GROUPING_COL_DEF_FORCED_PROPERTIES.field,shouldHaveGroupingColumn=props.treeData,prevGroupingColumn=columnsState.lookup[groupingColDefField];if(shouldHaveGroupingColumn){const newGroupingColumn=getGroupingColDef();if(prevGroupingColumn&&(newGroupingColumn.width=prevGroupingColumn.width,newGroupingColumn.flex=prevGroupingColumn.flex),columnsState.lookup[groupingColDefField]=newGroupingColumn,null==prevGroupingColumn){const index="__check__"===columnsState.orderedFields[0]?1:0;columnsState.orderedFields=[...columnsState.orderedFields.slice(0,index),groupingColDefField,...columnsState.orderedFields.slice(index)]}}else!shouldHaveGroupingColumn&&prevGroupingColumn&&(delete columnsState.lookup[groupingColDefField],columnsState.orderedFields=columnsState.orderedFields.filter((field=>field!==groupingColDefField)));return columnsState}),[props.treeData,getGroupingColDef]),createRowTreeForTreeData=react.useCallback((params=>{if(!props.getTreeDataPath)throw new Error("MUI: No getTreeDataPath given.");const getRowTreeBuilderNode=rowId=>({id:rowId,path:props.getTreeDataPath(params.dataRowIdToModelLookup[rowId]).map((key=>({key,field:null})))}),onDuplicatePath=(firstId,secondId,path)=>{throw new Error(["MUI: The path returned by `getTreeDataPath` should be unique.",`The rows with id #${firstId} and #${secondId} have the same.`,`Path: ${JSON.stringify(path.map((step=>step.key)))}.`].join("\n"))};return"full"===params.updates.type?(params=>{const dataRowIds=[],tree={[GRID_ROOT_GROUP_ID]:buildRootGroup()},treeDepths={};for(let i=0;i<params.nodes.length;i+=1){const node=params.nodes[i];dataRowIds.push(node.id),insertDataRowInTree({tree,previousTree:params.previousTree,id:node.id,path:node.path,onDuplicatePath:params.onDuplicatePath,treeDepths,isGroupExpandedByDefault:params.isGroupExpandedByDefault,defaultGroupingExpansionDepth:params.defaultGroupingExpansionDepth})}return{tree,treeDepths,groupingName:params.groupingName,dataRowIds}})({previousTree:params.previousTree,nodes:params.updates.rows.map(getRowTreeBuilderNode),defaultGroupingExpansionDepth:props.defaultGroupingExpansionDepth,isGroupExpandedByDefault:props.isGroupExpandedByDefault,groupingName:"tree-data",onDuplicatePath}):(params=>{const tree=(0,esm_extends.Z)({},params.previousTree),treeDepths=(0,esm_extends.Z)({},params.previousTreeDepth),updatedGroupsManager=createUpdatedGroupsManager();for(let i=0;i<params.nodes.inserted.length;i+=1){const{id,path}=params.nodes.inserted[i];insertDataRowInTree({previousTree:params.previousTree,tree,treeDepths,updatedGroupsManager,id,path,onDuplicatePath:params.onDuplicatePath,isGroupExpandedByDefault:params.isGroupExpandedByDefault,defaultGroupingExpansionDepth:params.defaultGroupingExpansionDepth})}for(let i=0;i<params.nodes.removed.length;i+=1){const nodeId=params.nodes.removed[i];removeDataRowFromTree({tree,treeDepths,updatedGroupsManager,id:nodeId})}for(let i=0;i<params.nodes.modified.length;i+=1){const{id,path}=params.nodes.modified[i];isDeepEqual(getNodePathInTree({tree,id}),path)?null==updatedGroupsManager||updatedGroupsManager.addAction(tree[id].parent,"modifyChildren"):(removeDataRowFromTree({tree,treeDepths,updatedGroupsManager,id}),insertDataRowInTree({previousTree:params.previousTree,tree,treeDepths,updatedGroupsManager,id,path,onDuplicatePath:params.onDuplicatePath,isGroupExpandedByDefault:params.isGroupExpandedByDefault,defaultGroupingExpansionDepth:params.defaultGroupingExpansionDepth}))}const dataRowIds=getTreeNodeDescendants(tree,GRID_ROOT_GROUP_ID,!0);return{tree,treeDepths,groupingName:params.groupingName,dataRowIds,updatedGroupsManager}})({nodes:{inserted:params.updates.actions.insert.map(getRowTreeBuilderNode),modified:params.updates.actions.modify.map(getRowTreeBuilderNode),removed:params.updates.actions.remove},previousTree:params.previousTree,previousTreeDepth:params.previousTreeDepths,defaultGroupingExpansionDepth:props.defaultGroupingExpansionDepth,isGroupExpandedByDefault:props.isGroupExpandedByDefault,groupingName:"tree-data"})}),[props.getTreeDataPath,props.defaultGroupingExpansionDepth,props.isGroupExpandedByDefault]),filterRows=react.useCallback((params=>(params=>{const{rowTree,disableChildrenFiltering,isRowMatchingFilters}=params,filteredRowsLookup={},filteredDescendantCountLookup={},filterTreeNode=(node,isParentMatchingFilters,areAncestorsExpanded)=>{let isMatchingFilters;if(disableChildrenFiltering&&node.depth>0)isMatchingFilters=null;else if(isRowMatchingFilters&&"footer"!==node.type){const{passingFilterItems,passingQuickFilterValues}=isRowMatchingFilters(node.id);isMatchingFilters=passFilterLogic([passingFilterItems],[passingQuickFilterValues],params.filterModel,params.apiRef)}else isMatchingFilters=!0;let shouldPassFilters,filteredDescendantCount=0;switch("group"===node.type&&node.children.forEach((childId=>{var _isMatchingFilters;const childNode=rowTree[childId],childSubTreeSize=filterTreeNode(childNode,null!=(_isMatchingFilters=isMatchingFilters)?_isMatchingFilters:isParentMatchingFilters,areAncestorsExpanded&&!!node.childrenExpanded);filteredDescendantCount+=childSubTreeSize})),isMatchingFilters){case!0:shouldPassFilters=!0;break;case!1:shouldPassFilters=filteredDescendantCount>0;break;default:shouldPassFilters=isParentMatchingFilters}return filteredRowsLookup[node.id]=shouldPassFilters,shouldPassFilters?(filteredDescendantCountLookup[node.id]=filteredDescendantCount,"footer"===node.type?filteredDescendantCount:filteredDescendantCount+1):0},nodes=Object.values(rowTree);for(let i=0;i<nodes.length;i+=1){const node=nodes[i];0===node.depth&&filterTreeNode(node,!0,!0)}return{filteredRowsLookup,filteredDescendantCountLookup}})({rowTree:gridRowTreeSelector(privateApiRef),isRowMatchingFilters:params.isRowMatchingFilters,disableChildrenFiltering:props.disableChildrenFiltering,filterModel:params.filterModel,apiRef:privateApiRef})),[privateApiRef,props.disableChildrenFiltering]),sortRows=react.useCallback((params=>(params=>{const{rowTree,disableChildrenSorting,sortRowList,shouldRenderGroupBelowLeaves}=params,sortedGroupedByParentRows=new Map,sortGroup=node=>{let sortedRowIds;if(!sortRowList||disableChildrenSorting&&-1!==node.depth)if(shouldRenderGroupBelowLeaves){const childrenLeaves=[],childrenGroups=[];for(let i=0;i<node.children.length;i+=1){const childId=node.children[i],childNode=rowTree[childId];"group"===childNode.type?(sortGroup(childNode),childrenGroups.push(childId)):"leaf"===childNode.type&&childrenLeaves.push(childId)}sortedRowIds=[...childrenLeaves,...childrenGroups]}else{for(let i=0;i<node.children.length;i+=1){const childNode=rowTree[node.children[i]];"group"===childNode.type&&sortGroup(childNode)}sortedRowIds=[...node.children]}else{for(let i=0;i<node.children.length;i+=1){const childNode=rowTree[node.children[i]];"group"===childNode.type&&sortGroup(childNode)}sortedRowIds=sortRowList(node.children.map((childId=>rowTree[childId])))}null!=node.footerId&&sortedRowIds.push(node.footerId),sortedGroupedByParentRows.set(node.id,sortedRowIds)};sortGroup(rowTree[GRID_ROOT_GROUP_ID]);const rootList=List.from(sortedGroupedByParentRows.get(GRID_ROOT_GROUP_ID));return rootList.forEach((node=>{const children=sortedGroupedByParentRows.get(node.data);null!=children&&children.length&&node.insertAfter(List.from(children))})),rootList.data()})({rowTree:gridRowTreeSelector(privateApiRef),sortRowList:params.sortRowList,disableChildrenSorting:props.disableChildrenSorting,shouldRenderGroupBelowLeaves:!1})),[privateApiRef,props.disableChildrenSorting]);useGridRegisterPipeProcessor(privateApiRef,"hydrateColumns",updateGroupingColumn),useGridRegisterStrategyProcessor(privateApiRef,"tree-data","rowTreeCreation",createRowTreeForTreeData),useGridRegisterStrategyProcessor(privateApiRef,"tree-data","filtering",filterRows),useGridRegisterStrategyProcessor(privateApiRef,"tree-data","sorting",sortRows),useGridRegisterStrategyProcessor(privateApiRef,"tree-data","visibleRowsLookupCreation",utils_getVisibleRowsLookup),useFirstRender((()=>{setStrategyAvailability()}));const isFirstRender=react.useRef(!0);react.useEffect((()=>{isFirstRender.current?isFirstRender.current=!1:setStrategyAvailability()}),[setStrategyAvailability])};var GridPinnedPosition=function(GridPinnedPosition){return GridPinnedPosition.left="left",GridPinnedPosition.right="right",GridPinnedPosition}(GridPinnedPosition||{});const gridPinnedColumnsSelector=state=>state.pinnedColumns,GridOverlayWrapperRoot=(0,esm_styled.Z)("div",{name:"MuiDataGrid",slot:"OverlayWrapper",overridesResolver:(props,styles)=>styles.overlayWrapper})({position:"sticky",top:0,left:0,width:0,height:0,zIndex:4}),GridOverlayWrapperInner=(0,esm_styled.Z)("div",{name:"MuiDataGrid",slot:"OverlayWrapperInner",overridesResolver:(props,styles)=>styles.overlayWrapperInner})({}),GridOverlays_useUtilityClasses=ownerState=>{const{classes}=ownerState;return(0,composeClasses.Z)({root:["overlayWrapper"],inner:["overlayWrapperInner"]},getDataGridUtilityClass,classes)};function GridOverlayWrapper(props){var _viewportInnerSize$he,_viewportInnerSize$wi;const apiRef=useGridApiContext_useGridApiContext(),rootProps=useGridRootProps(),[viewportInnerSize,setViewportInnerSize]=react.useState((()=>{var _apiRef$current$getRo,_apiRef$current$getRo2;return null!=(_apiRef$current$getRo=null==(_apiRef$current$getRo2=apiRef.current.getRootDimensions())?void 0:_apiRef$current$getRo2.viewportInnerSize)?_apiRef$current$getRo:null})),handleViewportSizeChange=react.useCallback((()=>{var _apiRef$current$getRo3,_apiRef$current$getRo4;setViewportInnerSize(null!=(_apiRef$current$getRo3=null==(_apiRef$current$getRo4=apiRef.current.getRootDimensions())?void 0:_apiRef$current$getRo4.viewportInnerSize)?_apiRef$current$getRo3:null)}),[apiRef]);(0,useEnhancedEffect.Z)((()=>apiRef.current.subscribeEvent("viewportInnerSizeChange",handleViewportSizeChange)),[apiRef,handleViewportSizeChange]);let height=null!=(_viewportInnerSize$he=null==viewportInnerSize?void 0:viewportInnerSize.height)?_viewportInnerSize$he:0;rootProps.autoHeight&&0===height&&(height=getMinimalContentHeight(apiRef,rootProps.rowHeight));const classes=GridOverlays_useUtilityClasses((0,esm_extends.Z)({},props,{classes:rootProps.classes}));return viewportInnerSize?(0,jsx_runtime.jsx)(GridOverlayWrapperRoot,{className:(0,clsx_m.Z)(classes.root),children:(0,jsx_runtime.jsx)(GridOverlayWrapperInner,(0,esm_extends.Z)({className:(0,clsx_m.Z)(classes.inner),style:{height,width:null!=(_viewportInnerSize$wi=null==viewportInnerSize?void 0:viewportInnerSize.width)?_viewportInnerSize$wi:0}},props))}):null}function GridOverlays(){const apiRef=useGridApiContext_useGridApiContext(),rootProps=useGridRootProps(),totalRowCount=useGridSelector(apiRef,gridRowCountSelector),visibleRowCount=useGridSelector(apiRef,gridExpandedRowCountSelector),loading=useGridSelector(apiRef,gridRowsLoadingSelector),showNoResultsOverlay=!loading&&totalRowCount>0&&0===visibleRowCount;let overlay=null;var _rootProps$slotProps,_rootProps$slotProps2,_rootProps$slotProps3;loading||0!==totalRowCount||(overlay=(0,jsx_runtime.jsx)(rootProps.slots.noRowsOverlay,(0,esm_extends.Z)({},null==(_rootProps$slotProps=rootProps.slotProps)?void 0:_rootProps$slotProps.noRowsOverlay)));showNoResultsOverlay&&(overlay=(0,jsx_runtime.jsx)(rootProps.slots.noResultsOverlay,(0,esm_extends.Z)({},null==(_rootProps$slotProps2=rootProps.slotProps)?void 0:_rootProps$slotProps2.noResultsOverlay)));loading&&(overlay=(0,jsx_runtime.jsx)(rootProps.slots.loadingOverlay,(0,esm_extends.Z)({},null==(_rootProps$slotProps3=rootProps.slotProps)?void 0:_rootProps$slotProps3.loadingOverlay)));return null===overlay?null:(0,jsx_runtime.jsx)(GridOverlayWrapper,{children:overlay})}const GridVirtualScroller_excluded=["className"],VirtualScrollerRoot=(0,esm_styled.Z)("div",{name:"MuiDataGrid",slot:"VirtualScroller",overridesResolver:(props,styles)=>styles.virtualScroller})({overflow:"auto",height:"100%",position:"relative","@media print":{overflow:"hidden"}}),GridVirtualScroller=react.forwardRef((function GridVirtualScroller(props,ref){const{className}=props,other=(0,objectWithoutPropertiesLoose.Z)(props,GridVirtualScroller_excluded),rootProps=useGridRootProps(),classes=(ownerState=>{const{classes}=ownerState;return(0,composeClasses.Z)({root:["virtualScroller"]},getDataGridUtilityClass,classes)})(rootProps);return(0,jsx_runtime.jsx)(VirtualScrollerRoot,(0,esm_extends.Z)({ref,className:(0,clsx_m.Z)(classes.root,className),ownerState:rootProps},other))})),GridVirtualScrollerContent_excluded=["className","style"],VirtualScrollerContentRoot=(0,esm_styled.Z)("div",{name:"MuiDataGrid",slot:"VirtualScrollerContent",overridesResolver:(props,styles)=>styles.virtualScrollerContent})({}),GridVirtualScrollerContent=react.forwardRef((function GridVirtualScrollerContent(props,ref){const{className,style}=props,other=(0,objectWithoutPropertiesLoose.Z)(props,GridVirtualScrollerContent_excluded),rootProps=useGridRootProps(),ownerState=(0,esm_extends.Z)({},rootProps,{overflowedContent:!rootProps.autoHeight&&"auto"===(null==style?void 0:style.minHeight)}),classes=(ownerState=>{const{classes,overflowedContent}=ownerState,slots={root:["virtualScrollerContent",overflowedContent&&"virtualScrollerContent--overflowed"]};return(0,composeClasses.Z)(slots,getDataGridUtilityClass,classes)})(ownerState);return(0,jsx_runtime.jsx)(VirtualScrollerContentRoot,(0,esm_extends.Z)({ref,className:(0,clsx_m.Z)(classes.root,className),ownerState,style},other))})),GridVirtualScrollerRenderZone_excluded=["className"],VirtualScrollerRenderZoneRoot=(0,esm_styled.Z)("div",{name:"MuiDataGrid",slot:"VirtualScrollerRenderZone",overridesResolver:(props,styles)=>styles.virtualScrollerRenderZone})({position:"absolute",display:"flex",flexDirection:"column"}),GridVirtualScrollerRenderZone=react.forwardRef((function GridVirtualScrollerRenderZone(props,ref){const{className}=props,other=(0,objectWithoutPropertiesLoose.Z)(props,GridVirtualScrollerRenderZone_excluded),rootProps=useGridRootProps(),classes=(ownerState=>{const{classes}=ownerState;return(0,composeClasses.Z)({root:["virtualScrollerRenderZone"]},getDataGridUtilityClass,classes)})(rootProps);return(0,jsx_runtime.jsx)(VirtualScrollerRenderZoneRoot,(0,esm_extends.Z)({ref,className:(0,clsx_m.Z)(classes.root,className),ownerState:rootProps},other))})),useGridPrivateApiContext_useGridPrivateApiContext=useGridPrivateApiContext,gridDetailPanelExpandedRowIdsSelector=state=>state.detailPanel.expandedRowIds,gridDetailPanelExpandedRowsContentCacheSelector=state=>state.detailPanel.contentCache,gridDetailPanelRawHeightCacheSelector=state=>state.detailPanel.heightCache,gridDetailPanelExpandedRowsHeightCacheSelector=createSelector(gridDetailPanelRawHeightCacheSelector,(heightCache=>Object.entries(heightCache).reduce(((acc,[id,{height}])=>(acc[id]=height||0,acc)),{}))),GridDetailPanel_excluded=["rowId","height","style"],DetailPanel=(0,styled.ZP)(Box.Z,{name:"MuiDataGrid",slot:"DetailPanel",overridesResolver:(props,styles)=>styles.detailPanel})((({theme})=>({zIndex:2,width:"100%",position:"absolute",backgroundColor:(theme.vars||theme).palette.background.default,overflow:"auto"})));function GridDetailPanel(props){const{rowId,height,style:styleProp={}}=props,other=(0,objectWithoutPropertiesLoose.Z)(props,GridDetailPanel_excluded),apiRef=useGridPrivateApiContext_useGridPrivateApiContext(),ref=react.useRef(),ownerState=useGridRootProps_useGridRootProps();react.useLayoutEffect((()=>{"auto"===height&&ref.current&&"undefined"==typeof ResizeObserver&&apiRef.current.storeDetailPanelHeight(rowId,ref.current.clientHeight)}),[apiRef,height,rowId]),react.useLayoutEffect((()=>{const hasFixedHeight="auto"!==height;if(!ref.current||hasFixedHeight||"undefined"==typeof ResizeObserver)return;const resizeObserver=new ResizeObserver((entries=>{const[entry]=entries,observedHeight=entry.borderBoxSize&&entry.borderBoxSize.length>0?entry.borderBoxSize[0].blockSize:entry.contentRect.height;apiRef.current.storeDetailPanelHeight(rowId,observedHeight)}));return resizeObserver.observe(ref.current),()=>resizeObserver.disconnect()}),[apiRef,height,rowId]);const style=(0,esm_extends.Z)({},styleProp,{height});return(0,jsx_runtime.jsx)(DetailPanel,(0,esm_extends.Z)({ref,ownerState,style},other))}const DataGridProVirtualScroller_excluded=["className","disableVirtualization"],filterColumns=(pinnedColumns,columns,invert)=>{var _pinnedColumns$left,_pinnedColumns$right;if(!Array.isArray(pinnedColumns.left)&&!Array.isArray(pinnedColumns.right))return[[],[]];if(0===(null==(_pinnedColumns$left=pinnedColumns.left)?void 0:_pinnedColumns$left.length)&&0===(null==(_pinnedColumns$right=pinnedColumns.right)?void 0:_pinnedColumns$right.length))return[[],[]];const filter=(newPinnedColumns,remainingColumns)=>Array.isArray(newPinnedColumns)?newPinnedColumns.filter((field=>remainingColumns.includes(field))):[],leftPinnedColumns=filter(pinnedColumns.left,columns),columnsWithoutLeftPinnedColumns=columns.filter((field=>!leftPinnedColumns.includes(field))),rightPinnedColumns=filter(pinnedColumns.right,columnsWithoutLeftPinnedColumns);return invert?[rightPinnedColumns,leftPinnedColumns]:[leftPinnedColumns,rightPinnedColumns]},getOverlayAlpha=elevation=>{let alphaValue;return alphaValue=elevation<1?5.11916*elevation**2:4.5*Math.log(elevation+1)+2,alphaValue/100},getBoxShadowColor=theme=>theme.vars?"rgba(0 0 0 /  0.21)":(0,colorManipulator.Fq)(theme.palette.common.black,.21),VirtualScrollerDetailPanels=(0,styled.ZP)("div",{name:"MuiDataGrid",slot:"DetailPanels",overridesResolver:(props,styles)=>styles.detailPanels})({position:"relative"}),darkModeBackgroundImage=`linear-gradient(${(0,colorManipulator.Fq)("#fff",getOverlayAlpha(2))}, ${(0,colorManipulator.Fq)("#fff",getOverlayAlpha(2))})`,VirtualScrollerPinnedColumns=(0,styled.ZP)("div",{name:"MuiDataGrid",slot:"PinnedColumns",overridesResolver:(props,styles)=>[{[`&.${gridClasses_gridClasses["pinnedColumns--left"]}`]:styles["pinnedColumns--left"]},{[`&.${gridClasses_gridClasses["pinnedColumns--right"]}`]:styles["pinnedColumns--right"]},styles.pinnedColumns]})((({theme,ownerState})=>{var _theme$vars$overlays;const boxShadowColor=getBoxShadowColor(theme);return(0,esm_extends.Z)({position:"sticky",overflow:"hidden",zIndex:1,backgroundColor:(theme.vars||theme).palette.background.default},theme.vars?{backgroundImage:null==(_theme$vars$overlays=theme.vars.overlays)?void 0:_theme$vars$overlays[2]}:(0,esm_extends.Z)({},"dark"===theme.palette.mode&&{backgroundImage:darkModeBackgroundImage}),ownerState.side===GridPinnedPosition.left&&{left:0,float:"left",boxShadow:`2px 0px 4px -2px ${boxShadowColor}`},ownerState.side===GridPinnedPosition.right&&{right:0,float:"right",boxShadow:`-2px 0px 4px -2px ${boxShadowColor}`},ownerState.side===GridPinnedPosition.right&&ownerState.showCellVerticalBorder&&{borderLeftWidth:"1px",borderLeftStyle:"solid"})}));var PinnedRowsPosition=function(PinnedRowsPosition){return PinnedRowsPosition.top="top",PinnedRowsPosition.bottom="bottom",PinnedRowsPosition}(PinnedRowsPosition||{});const VirtualScrollerPinnedRows=(0,styled.ZP)("div",{name:"MuiDataGrid",slot:"PinnedRows",overridesResolver:(props,styles)=>[{[`&.${gridClasses_gridClasses["pinnedRows--top"]}`]:styles["pinnedRows--top"]},{[`&.${gridClasses_gridClasses["pinnedRows--bottom"]}`]:styles["pinnedRows--bottom"]},styles.pinnedRows]})((({theme,ownerState})=>{var _theme$vars$overlays2;const boxShadowColor=getBoxShadowColor(theme);return(0,esm_extends.Z)({position:"sticky",zIndex:3,backgroundColor:(theme.vars||theme).palette.background.default},theme.vars?{backgroundImage:null==(_theme$vars$overlays2=theme.vars.overlays)?void 0:_theme$vars$overlays2[2]}:(0,esm_extends.Z)({},"dark"===theme.palette.mode&&{backgroundImage:darkModeBackgroundImage}),"top"===ownerState.position&&{top:0,boxShadow:`0px 3px 4px -2px ${boxShadowColor}`},ownerState.position===PinnedRowsPosition.bottom&&{boxShadow:`0px -3px 4px -2px ${boxShadowColor}`,bottom:0})})),VirtualScrollerPinnedRowsRenderZone=(0,styled.ZP)("div")({position:"absolute"}),DataGridProVirtualScroller=react.forwardRef((function DataGridProVirtualScroller(props,ref){const other=(0,objectWithoutPropertiesLoose.Z)(props,DataGridProVirtualScroller_excluded),apiRef=useGridPrivateApiContext_useGridPrivateApiContext(),rootProps=useGridRootProps_useGridRootProps(),visibleColumnFields=useGridSelector(apiRef,gridVisibleColumnFieldsSelector),expandedRowIds=useGridSelector(apiRef,gridDetailPanelExpandedRowIdsSelector),detailPanelsContent=useGridSelector(apiRef,gridDetailPanelExpandedRowsContentCacheSelector),detailPanelsHeights=useGridSelector(apiRef,gridDetailPanelExpandedRowsHeightCacheSelector),leftColumns=react.useRef(null),rightColumns=react.useRef(null),topPinnedRowsRenderZoneRef=react.useRef(null),bottomPinnedRowsRenderZoneRef=react.useRef(null),theme=(0,useTheme.Z)(),handleRenderZonePositioning=react.useCallback((({top,left})=>{leftColumns.current&&(leftColumns.current.style.transform=`translate3d(0px, ${top}px, 0px)`),rightColumns.current&&(rightColumns.current.style.transform=`translate3d(0px, ${top}px, 0px)`),topPinnedRowsRenderZoneRef.current&&(topPinnedRowsRenderZoneRef.current.style.transform=`translate3d(${left}px, 0px, 0px)`),bottomPinnedRowsRenderZoneRef.current&&(bottomPinnedRowsRenderZoneRef.current.style.transform=`translate3d(${left}px, 0px, 0px)`)}),[]),expandedRowIdsLookup=react.useMemo((()=>{const lookup=new Set;return expandedRowIds.forEach((id=>{lookup.add(id)})),lookup}),[expandedRowIds]),getRowProps=react.useCallback((id=>{if(!expandedRowIdsLookup.has(id))return null;return{style:{marginBottom:detailPanelsHeights[id]}}}),[detailPanelsHeights,expandedRowIdsLookup]),pinnedColumns=useGridSelector(apiRef,gridPinnedColumnsSelector),[leftPinnedColumns,rightPinnedColumns]=filterColumns(pinnedColumns,visibleColumnFields,"rtl"===theme.direction),pinnedRows=useGridSelector(apiRef,gridPinnedRowsSelector),topPinnedRowsData=react.useMemo((()=>(null==pinnedRows?void 0:pinnedRows.top)||[]),[null==pinnedRows?void 0:pinnedRows.top]),bottomPinnedRowsData=react.useMemo((()=>(null==pinnedRows?void 0:pinnedRows.bottom)||[]),[null==pinnedRows?void 0:pinnedRows.bottom]),ownerState=(0,esm_extends.Z)({},rootProps,{classes:rootProps.classes}),classes=(ownerState=>{const{classes}=ownerState;return(0,composeClasses.Z)({leftPinnedColumns:["pinnedColumns","pinnedColumns--left"],rightPinnedColumns:["pinnedColumns","pinnedColumns--right","withBorderColor"],topPinnedRows:["pinnedRows","pinnedRows--top"],bottomPinnedRows:["pinnedRows","pinnedRows--bottom"],pinnedRowsRenderZone:["pinnedRowsRenderZone"],detailPanels:["detailPanels"],detailPanel:["detailPanel"]},getDataGridUtilityClass,classes)})(ownerState),{renderContext,getRows,getRootProps,getContentProps,getRenderZoneProps,updateRenderZonePosition}=useGridVirtualScroller((0,esm_extends.Z)({ref,renderZoneMinColumnIndex:leftPinnedColumns.length,renderZoneMaxColumnIndex:visibleColumnFields.length-rightPinnedColumns.length,onRenderZonePositioning:handleRenderZonePositioning,getRowProps},props)),refreshRenderZonePosition=react.useCallback((()=>{renderContext&&updateRenderZonePosition(renderContext)}),[renderContext,updateRenderZonePosition]);useGridApiEventHandler(apiRef,"columnWidthChange",refreshRenderZonePosition),useGridApiEventHandler(apiRef,"columnOrderChange",refreshRenderZonePosition),useGridApiEventHandler(apiRef,"rowOrderChange",refreshRenderZonePosition);const leftRenderContext=renderContext&&leftPinnedColumns.length>0?(0,esm_extends.Z)({},renderContext,{firstColumnIndex:0,lastColumnIndex:leftPinnedColumns.length}):null,rightRenderContext=renderContext&&rightPinnedColumns.length>0?(0,esm_extends.Z)({},renderContext,{firstColumnIndex:visibleColumnFields.length-rightPinnedColumns.length,lastColumnIndex:visibleColumnFields.length}):null,detailPanels=[],topPinnedRows=getRows({renderContext,rows:topPinnedRowsData,position:"center"}),pinnedRowsHeight=calculatePinnedRowsHeight(apiRef),mainRows=getRows({renderContext,rowIndexOffset:topPinnedRowsData.length,position:"center",onRowRender:rowId=>{if(null==rootProps.getDetailPanelContent)return;if(!expandedRowIdsLookup.has(rowId))return;const detailPanel=(rowId=>{const rowsMeta=gridRowsMetaSelector(apiRef.current.state),content=detailPanelsContent[rowId],rowIndex=apiRef.current.getRowIndexRelativeToVisibleRows(rowId),exists=void 0!==rowIndex;if(react.isValidElement(content)&&exists){const height=apiRef.current.detailPanelHasAutoHeight(rowId)?"auto":detailPanelsHeights[rowId],sizes=apiRef.current.unstable_getRowInternalSizes(rowId),spacingTop=(null==sizes?void 0:sizes.spacingTop)||0,top=rowsMeta.positions[rowIndex]+apiRef.current.unstable_getRowHeight(rowId)+spacingTop;return(0,jsx_runtime.jsx)(GridDetailPanel,{rowId,style:{top},height,className:classes.detailPanel,children:content},rowId)}return null})(rowId);detailPanel&&detailPanels.push(detailPanel)}}),bottomPinnedRows=getRows({renderContext,rows:bottomPinnedRowsData,rowIndexOffset:topPinnedRowsData.length+(mainRows?mainRows.length:0),position:"center"}),contentProps=getContentProps(),pinnedColumnsStyle={minHeight:contentProps.style.minHeight};return contentProps.style.minHeight&&"100%"===contentProps.style.minHeight&&(contentProps.style.minHeight=`calc(100% - ${pinnedRowsHeight.top}px - ${pinnedRowsHeight.bottom}px)`),(0,jsx_runtime.jsxs)(GridVirtualScroller,(0,esm_extends.Z)({},getRootProps(other),{children:[(0,jsx_runtime.jsx)(GridOverlays,{}),topPinnedRowsData.length>0?(0,jsx_runtime.jsxs)(VirtualScrollerPinnedRows,{className:classes.topPinnedRows,ownerState:(0,esm_extends.Z)({},ownerState,{position:PinnedRowsPosition.top}),style:{width:contentProps.style.width,height:pinnedRowsHeight.top},role:"rowgroup",children:[leftRenderContext&&(0,jsx_runtime.jsx)(VirtualScrollerPinnedColumns,{className:classes.leftPinnedColumns,ownerState:(0,esm_extends.Z)({},ownerState,{side:GridPinnedPosition.left,showCellVerticalBorder:rootProps.showCellVerticalBorder}),children:getRows({renderContext:leftRenderContext,minFirstColumn:leftRenderContext.firstColumnIndex,maxLastColumn:leftRenderContext.lastColumnIndex,availableSpace:0,rows:topPinnedRowsData,position:"left"})}),(0,jsx_runtime.jsx)(VirtualScrollerPinnedRowsRenderZone,{className:classes.pinnedRowsRenderZone,ref:topPinnedRowsRenderZoneRef,role:"presentation",children:topPinnedRows}),rightRenderContext&&(0,jsx_runtime.jsx)(VirtualScrollerPinnedColumns,{className:classes.rightPinnedColumns,ownerState:(0,esm_extends.Z)({},ownerState,{side:GridPinnedPosition.right,showCellVerticalBorder:rootProps.showCellVerticalBorder}),children:getRows({renderContext:rightRenderContext,minFirstColumn:rightRenderContext.firstColumnIndex,maxLastColumn:rightRenderContext.lastColumnIndex,availableSpace:0,rows:topPinnedRowsData,position:"right"})})]}):null,(0,jsx_runtime.jsxs)(GridVirtualScrollerContent,(0,esm_extends.Z)({},contentProps,{children:[leftRenderContext&&(0,jsx_runtime.jsx)(VirtualScrollerPinnedColumns,{ref:leftColumns,className:classes.leftPinnedColumns,ownerState:(0,esm_extends.Z)({},ownerState,{side:GridPinnedPosition.left,showCellVerticalBorder:rootProps.showCellVerticalBorder}),style:pinnedColumnsStyle,children:getRows({renderContext:leftRenderContext,minFirstColumn:leftRenderContext.firstColumnIndex,maxLastColumn:leftRenderContext.lastColumnIndex,availableSpace:0,rowIndexOffset:topPinnedRowsData.length,position:"left"})}),(0,jsx_runtime.jsx)(GridVirtualScrollerRenderZone,(0,esm_extends.Z)({},getRenderZoneProps(),{children:mainRows})),rightRenderContext&&(0,jsx_runtime.jsx)(VirtualScrollerPinnedColumns,{ref:rightColumns,ownerState:(0,esm_extends.Z)({},ownerState,{side:GridPinnedPosition.right,showCellVerticalBorder:rootProps.showCellVerticalBorder}),className:classes.rightPinnedColumns,style:pinnedColumnsStyle,children:getRows({renderContext:rightRenderContext,minFirstColumn:rightRenderContext.firstColumnIndex,maxLastColumn:rightRenderContext.lastColumnIndex,availableSpace:0,rowIndexOffset:topPinnedRowsData.length,position:"right"})}),detailPanels.length>0&&(0,jsx_runtime.jsx)(VirtualScrollerDetailPanels,{className:classes.detailPanels,ownerState,children:detailPanels})]})),bottomPinnedRowsData.length>0?(0,jsx_runtime.jsxs)(VirtualScrollerPinnedRows,{className:classes.bottomPinnedRows,ownerState:(0,esm_extends.Z)({},ownerState,{position:PinnedRowsPosition.bottom}),style:{width:contentProps.style.width,height:pinnedRowsHeight.bottom},role:"rowgroup",children:[leftRenderContext&&(0,jsx_runtime.jsx)(VirtualScrollerPinnedColumns,{className:classes.leftPinnedColumns,ownerState:(0,esm_extends.Z)({},ownerState,{side:GridPinnedPosition.left,showCellVerticalBorder:rootProps.showCellVerticalBorder}),children:getRows({renderContext:leftRenderContext,minFirstColumn:leftRenderContext.firstColumnIndex,maxLastColumn:leftRenderContext.lastColumnIndex,availableSpace:0,rows:bottomPinnedRowsData,rowIndexOffset:topPinnedRowsData.length+(mainRows?mainRows.length:0),position:"left"})}),(0,jsx_runtime.jsx)(VirtualScrollerPinnedRowsRenderZone,{className:classes.pinnedRowsRenderZone,ref:bottomPinnedRowsRenderZoneRef,role:"presentation",children:bottomPinnedRows}),rightRenderContext&&(0,jsx_runtime.jsx)(VirtualScrollerPinnedColumns,{className:classes.rightPinnedColumns,ownerState:(0,esm_extends.Z)({},ownerState,{side:GridPinnedPosition.right,showCellVerticalBorder:rootProps.showCellVerticalBorder}),children:getRows({renderContext:rightRenderContext,minFirstColumn:rightRenderContext.firstColumnIndex,maxLastColumn:rightRenderContext.lastColumnIndex,availableSpace:0,rows:bottomPinnedRowsData,rowIndexOffset:topPinnedRowsData.length+(mainRows?mainRows.length:0),position:"right"})})]}):null]}))})),columnPinningStateInitializer=(state,props,apiRef)=>{var _props$initialState;let model;if(apiRef.current.caches.columnPinning={orderedFieldsBeforePinningColumns:null},props.disableColumnPinning)model={};else if(props.pinnedColumns)model=props.pinnedColumns;else if(null!=(_props$initialState=props.initialState)&&_props$initialState.pinnedColumns){var _props$initialState2;model=null==(_props$initialState2=props.initialState)?void 0:_props$initialState2.pinnedColumns}else model={};return(0,esm_extends.Z)({},state,{pinnedColumns:model})},mergeStateWithPinnedColumns=pinnedColumns=>state=>(0,esm_extends.Z)({},state,{pinnedColumns});function GridDetailPanelToggleCell(props){var _rootProps$slotProps;const{id,value:isExpanded}=props,rootProps=useGridRootProps_useGridRootProps(),apiRef=utils_useGridApiContext_useGridApiContext(),classes=(ownerState=>{const{classes,isExpanded}=ownerState,slots={root:["detailPanelToggleCell",isExpanded&&"detailPanelToggleCell--expanded"]};return(0,composeClasses.Z)(slots,getDataGridUtilityClass,classes)})({classes:rootProps.classes,isExpanded}),contentCache=useGridSelector(apiRef,gridDetailPanelExpandedRowsContentCacheSelector),hasContent=react.isValidElement(contentCache[id]),Icon=isExpanded?rootProps.slots.detailPanelCollapseIcon:rootProps.slots.detailPanelExpandIcon;return(0,jsx_runtime.jsx)(rootProps.slots.baseIconButton,(0,esm_extends.Z)({size:"small",tabIndex:-1,disabled:!hasContent,className:classes.root,"aria-label":isExpanded?apiRef.current.getLocaleText("collapseDetailPanel"):apiRef.current.getLocaleText("expandDetailPanel")},null==(_rootProps$slotProps=rootProps.slotProps)?void 0:_rootProps$slotProps.baseIconButton,{children:(0,jsx_runtime.jsx)(Icon,{fontSize:"inherit"})}))}const GRID_DETAIL_PANEL_TOGGLE_COL_DEF=(0,esm_extends.Z)({},GRID_STRING_COL_DEF,{field:"__detail_panel_toggle__",type:"detailPanelToggle",editable:!1,sortable:!1,filterable:!1,resizable:!1,aggregable:!1,disableColumnMenu:!0,disableReorder:!0,disableExport:!0,align:"left",width:40,valueGetter:params=>gridDetailPanelExpandedRowIdsSelector(params.api.state).includes(params.id),renderCell:params=>(0,jsx_runtime.jsx)(GridDetailPanelToggleCell,(0,esm_extends.Z)({},params)),renderHeader:()=>null}),detailPanelStateInitializer=(state,props)=>{var _ref,_props$detailPanelExp,_props$initialState,_props$initialState$d;return(0,esm_extends.Z)({},state,{detailPanel:{heightCache:{},expandedRowIds:null!=(_ref=null!=(_props$detailPanelExp=props.detailPanelExpandedRowIds)?_props$detailPanelExp:null==(_props$initialState=props.initialState)||null==(_props$initialState$d=_props$initialState.detailPanel)?void 0:_props$initialState$d.expandedRowIds)?_ref:[]}})};function cacheContentAndHeight(apiRef,getDetailPanelContent,getDetailPanelHeight,previousHeightCache){if("function"!=typeof getDetailPanelContent)return{};const rowIds=gridDataRowIdsSelector(apiRef),contentCache=rowIds.reduce(((acc,id)=>{const params=apiRef.current.getRowParams(id);return acc[id]=getDetailPanelContent(params),acc}),{}),heightCache=rowIds.reduce(((acc,id)=>{var _previousHeightCache$;if(null==contentCache[id])return acc;const params=apiRef.current.getRowParams(id),height=getDetailPanelHeight(params),autoHeight="auto"===height;return acc[id]={autoHeight,height:autoHeight?null==(_previousHeightCache$=previousHeightCache[id])?void 0:_previousHeightCache$.height:height},acc}),{});return{contentCache,heightCache}}const useGridRowReorder=(apiRef,props)=>{const logger=useGridLogger(apiRef,"useGridRowReorder"),sortModel=useGridSelector(apiRef,gridSortModelSelector),treeDepth=useGridSelector(apiRef,gridRowMaximumTreeDepthSelector),dragRowNode=react.useRef(null),originRowIndex=react.useRef(null),removeDnDStylesTimeout=react.useRef(),classes=(ownerState=>{const{classes}=ownerState;return(0,composeClasses.Z)({rowDragging:["row--dragging"]},getDataGridUtilityClass,classes)})({classes:props.classes}),[dragRowId,setDragRowId]=react.useState("");react.useEffect((()=>()=>{clearTimeout(removeDnDStylesTimeout.current)}),[]);const isRowReorderDisabled=react.useMemo((()=>!props.rowReordering||!!sortModel.length||1!==treeDepth),[props.rowReordering,sortModel,treeDepth]),handleDragStart=react.useCallback(((params,event)=>{const editRowsState=gridEditRowsStateSelector(apiRef.current.state);isRowReorderDisabled||0!==Object.keys(editRowsState).length||(logger.debug(`Start dragging row ${params.id}`),event.stopPropagation(),dragRowNode.current=event.currentTarget,dragRowNode.current.classList.add(classes.rowDragging),setDragRowId(params.id),removeDnDStylesTimeout.current=setTimeout((()=>{dragRowNode.current.classList.remove(classes.rowDragging)})),originRowIndex.current=apiRef.current.getRowIndexRelativeToVisibleRows(params.id))}),[isRowReorderDisabled,classes.rowDragging,logger,apiRef]),handleDragOver=react.useCallback(((params,event)=>{if(""===dragRowId)return;const rowNode=apiRef.current.getRowNode(params.id);if(rowNode&&"footer"!==rowNode.type&&"pinnedRow"!==rowNode.type&&(logger.debug(`Dragging over row ${params.id}`),event.preventDefault(),event.stopPropagation(),params.id!==dragRowId)){const targetRowIndex=apiRef.current.getRowIndexRelativeToVisibleRows(params.id);apiRef.current.setRowIndex(dragRowId,targetRowIndex)}}),[apiRef,logger,dragRowId]),handleDragEnd=react.useCallback(((params,event)=>{const editRowsState=gridEditRowsStateSelector(apiRef.current.state);if(""!==dragRowId&&!isRowReorderDisabled&&0===Object.keys(editRowsState).length){if(logger.debug("End dragging row"),event.preventDefault(),event.stopPropagation(),clearTimeout(removeDnDStylesTimeout.current),dragRowNode.current=null,"none"===event.dataTransfer.dropEffect)apiRef.current.setRowIndex(dragRowId,originRowIndex.current),originRowIndex.current=null;else{const rowOrderChangeParams={row:apiRef.current.getRow(dragRowId),targetIndex:apiRef.current.getRowIndexRelativeToVisibleRows(params.id),oldIndex:originRowIndex.current};apiRef.current.publishEvent("rowOrderChange",rowOrderChangeParams)}setDragRowId("")}}),[isRowReorderDisabled,logger,apiRef,dragRowId]);useGridApiEventHandler(apiRef,"rowDragStart",handleDragStart),useGridApiEventHandler(apiRef,"rowDragOver",handleDragOver),useGridApiEventHandler(apiRef,"rowDragEnd",handleDragEnd),useGridApiEventHandler(apiRef,"cellDragOver",handleDragOver),useGridApiOptionHandler(apiRef,"rowOrderChange",props.onRowOrderChange)};function GridRowReorderCell(params){const apiRef=useGridApiContext_useGridApiContext(),rootProps=useGridRootProps_useGridRootProps(),sortModel=useGridSelector(apiRef,gridSortModelSelector),treeDepth=useGridSelector(apiRef,gridRowMaximumTreeDepthSelector),editRowsState=useGridSelector(apiRef,gridEditRowsStateSelector),cellValue=params.row.__reorder__||params.id,isDraggable=react.useMemo((()=>!!rootProps.rowReordering&&!sortModel.length&&1===treeDepth&&0===Object.keys(editRowsState).length),[rootProps.rowReordering,sortModel,treeDepth,editRowsState]),classes=(ownerState=>{const{isDraggable,classes}=ownerState,slots={root:["rowReorderCell",isDraggable&&"rowReorderCell--draggable"],placeholder:["rowReorderCellPlaceholder"]};return(0,composeClasses.Z)(slots,getDataGridUtilityClass,classes)})({isDraggable,classes:rootProps.classes}),publish=react.useCallback(((eventName,propHandler)=>event=>{(1!==event.target.nodeType||event.currentTarget.contains(event.target))&&apiRef.current.getRow(params.id)&&(apiRef.current.publishEvent(eventName,apiRef.current.getRowParams(params.id),event),propHandler&&propHandler(event))}),[apiRef,params.id]),draggableEventHandlers=isDraggable?{onDragStart:publish("rowDragStart"),onDragOver:publish("rowDragOver"),onDragEnd:publish("rowDragEnd")}:null;return"footer"===params.rowNode.type?null:(0,jsx_runtime.jsxs)("div",(0,esm_extends.Z)({className:classes.root,draggable:isDraggable},draggableEventHandlers,{children:[(0,jsx_runtime.jsx)(rootProps.slots.rowReorderIcon,{}),(0,jsx_runtime.jsx)("div",{className:classes.placeholder,children:cellValue})]}))}const GRID_REORDER_COL_DEF=(0,esm_extends.Z)({},GRID_STRING_COL_DEF,{field:"__reorder__",type:"reorder",sortable:!1,filterable:!1,width:50,align:"center",headerAlign:"center",disableColumnMenu:!0,disableExport:!0,disableReorder:!0,resizable:!1,aggregable:!1,renderHeader:()=>" ",renderCell:params=>"footer"===params.rowNode.type||"pinnedRow"===params.rowNode.type?null:(0,jsx_runtime.jsx)(GridRowReorderCell,(0,esm_extends.Z)({},params))}),useGridRowReorderPreProcessors=(privateApiRef,props)=>{const classes=(ownerState=>{const{classes}=ownerState;return react.useMemo((()=>(0,composeClasses.Z)({rowReorderCellContainer:["rowReorderCellContainer"],columnHeaderReorder:["columnHeaderReorder"]},getDataGridUtilityClass,classes)),[classes])})({classes:props.classes}),updateReorderColumn=react.useCallback((columnsState=>{const reorderColumn=(0,esm_extends.Z)({},GRID_REORDER_COL_DEF,{cellClassName:classes.rowReorderCellContainer,headerClassName:classes.columnHeaderReorder,headerName:privateApiRef.current.getLocaleText("rowReorderingHeaderName")}),shouldHaveReorderColumn=props.rowReordering,haveReorderColumn=null!=columnsState.lookup[reorderColumn.field];return shouldHaveReorderColumn&&haveReorderColumn||(shouldHaveReorderColumn&&!haveReorderColumn?(columnsState.lookup[reorderColumn.field]=reorderColumn,columnsState.orderedFields=[reorderColumn.field,...columnsState.orderedFields]):!shouldHaveReorderColumn&&haveReorderColumn&&(delete columnsState.lookup[reorderColumn.field],columnsState.orderedFields=columnsState.orderedFields.filter((field=>field!==reorderColumn.field)))),columnsState}),[privateApiRef,classes,props.rowReordering]);useGridRegisterPipeProcessor(privateApiRef,"hydrateColumns",updateReorderColumn)};function isLazyLoadingDisabled({lazyLoadingFeatureFlag,rowsLoadingMode,gridDimensions}){return!lazyLoadingFeatureFlag||!gridDimensions||"server"!==rowsLoadingMode}function createPinnedRowsInternalCache(pinnedRows,getRowId){var _pinnedRows$top,_pinnedRows$bottom;const cache={topIds:[],bottomIds:[],idLookup:{}};return null==pinnedRows||null==(_pinnedRows$top=pinnedRows.top)||_pinnedRows$top.forEach((rowModel=>{const id=getRowIdFromRowModel(rowModel,getRowId);cache.topIds.push(id),cache.idLookup[id]=rowModel})),null==pinnedRows||null==(_pinnedRows$bottom=pinnedRows.bottom)||_pinnedRows$bottom.forEach((rowModel=>{const id=getRowIdFromRowModel(rowModel,getRowId);cache.bottomIds.push(id),cache.idLookup[id]=rowModel})),cache}const rowPinningStateInitializer=(state,props,apiRef)=>{var _state$rows;return apiRef.current.caches.pinnedRows=createPinnedRowsInternalCache(props.pinnedRows,props.getRowId),(0,esm_extends.Z)({},state,{rows:(0,esm_extends.Z)({},state.rows,{additionalRowGroups:(0,esm_extends.Z)({},null==(_state$rows=state.rows)?void 0:_state$rows.additionalRowGroups,{pinnedRows:{top:[],bottom:[]}})})})};function addPinnedRow({groupingParams,rowModel,rowId,position,apiRef,isAutoGenerated}){var _groupingParams$addit,_groupingParams$addit2,_groupingParams$addit3,_groupingParams$addit4;const dataRowIdToModelLookup=(0,esm_extends.Z)({},groupingParams.dataRowIdToModelLookup),dataRowIdToIdLookup=(0,esm_extends.Z)({},groupingParams.dataRowIdToIdLookup),tree=(0,esm_extends.Z)({},groupingParams.tree),treeDepths=(0,esm_extends.Z)({},groupingParams.treeDepths);insertNodeInTree({type:"pinnedRow",id:rowId,depth:0,parent:GRID_ROOT_GROUP_ID,isAutoGenerated},tree,treeDepths,null),isAutoGenerated||(dataRowIdToModelLookup[rowId]=rowModel,dataRowIdToIdLookup[rowId]=rowId),apiRef.current.caches.rows.dataRowIdToModelLookup[rowId]=(0,esm_extends.Z)({},rowModel),apiRef.current.caches.rows.dataRowIdToIdLookup[rowId]=rowId;const previousPinnedRows=(null==(_groupingParams$addit=groupingParams.additionalRowGroups)?void 0:_groupingParams$addit.pinnedRows)||{},newPinnedRow={id:rowId,model:rowModel};return null!=(_groupingParams$addit2=groupingParams.additionalRowGroups)&&null!=(_groupingParams$addit3=_groupingParams$addit2.pinnedRows)&&null!=(_groupingParams$addit4=_groupingParams$addit3[position])&&_groupingParams$addit4.includes(newPinnedRow)?(0,esm_extends.Z)({},groupingParams,{dataRowIdToModelLookup,dataRowIdToIdLookup,tree,treeDepths}):(0,esm_extends.Z)({},groupingParams,{dataRowIdToModelLookup,dataRowIdToIdLookup,tree,treeDepths,additionalRowGroups:(0,esm_extends.Z)({},groupingParams.additionalRowGroups,{pinnedRows:(0,esm_extends.Z)({},previousPinnedRows,{[position]:[...previousPinnedRows[position]||[],newPinnedRow]})})})}const useDataGridProComponent=(inputApiRef,props)=>{const apiRef=useGridInitialization(inputApiRef,props);return useGridRowSelectionPreProcessors(apiRef,props),useGridRowReorderPreProcessors(apiRef,props),useGridTreeDataPreProcessors(apiRef,props),((privateApiRef,props)=>{var _props$experimentalFe;const{lazyLoading}=null!=(_props$experimentalFe=props.experimentalFeatures)?_props$experimentalFe:{},addSkeletonRows=react.useCallback((groupingParams=>{const rootGroup=groupingParams.tree[GRID_ROOT_GROUP_ID];if(!lazyLoading||"server"!==props.rowsLoadingMode||!props.rowCount||rootGroup.children.length>=props.rowCount)return groupingParams;const tree=(0,esm_extends.Z)({},groupingParams.tree),rootGroupChildren=[...rootGroup.children];for(let i=0;i<props.rowCount-rootGroup.children.length;i+=1){const skeletonId=`auto-generated-skeleton-row-root-${i}`;rootGroupChildren.push(skeletonId);const skeletonRowNode={type:"skeletonRow",id:skeletonId,parent:GRID_ROOT_GROUP_ID,depth:0};tree[skeletonId]=skeletonRowNode}return tree[GRID_ROOT_GROUP_ID]=(0,esm_extends.Z)({},rootGroup,{children:rootGroupChildren}),(0,esm_extends.Z)({},groupingParams,{tree})}),[props.rowCount,props.rowsLoadingMode,lazyLoading]);useGridRegisterPipeProcessor(privateApiRef,"hydrateRows",addSkeletonRows)})(apiRef,props),(apiRef=>{const addPinnedRows=react.useCallback((groupingParams=>{var _pinnedRowsCache$topI,_pinnedRowsCache$bott,_pinnedRowsCache$bott2,_pinnedRowsCache$topI2;const pinnedRowsCache=apiRef.current.caches.pinnedRows||{};let newGroupingParams=(0,esm_extends.Z)({},groupingParams,{additionalRowGroups:(0,esm_extends.Z)({},groupingParams.additionalRowGroups,{pinnedRows:{}})});if(null==(_pinnedRowsCache$topI=pinnedRowsCache.topIds)||_pinnedRowsCache$topI.forEach((rowId=>{newGroupingParams=addPinnedRow({groupingParams:newGroupingParams,rowModel:pinnedRowsCache.idLookup[rowId],rowId,position:"top",apiRef,isAutoGenerated:!1})})),null==(_pinnedRowsCache$bott=pinnedRowsCache.bottomIds)||_pinnedRowsCache$bott.forEach((rowId=>{newGroupingParams=addPinnedRow({groupingParams:newGroupingParams,rowModel:pinnedRowsCache.idLookup[rowId],rowId,position:"bottom",apiRef,isAutoGenerated:!1})})),null!=(_pinnedRowsCache$bott2=pinnedRowsCache.bottomIds)&&_pinnedRowsCache$bott2.length||null!=(_pinnedRowsCache$topI2=pinnedRowsCache.topIds)&&_pinnedRowsCache$topI2.length){const shouldKeepRow=rowId=>!newGroupingParams.tree[rowId]||"pinnedRow"!==newGroupingParams.tree[rowId].type,rootGroupNode=newGroupingParams.tree[GRID_ROOT_GROUP_ID];newGroupingParams.tree[GRID_ROOT_GROUP_ID]=(0,esm_extends.Z)({},rootGroupNode,{children:rootGroupNode.children.filter(shouldKeepRow)}),newGroupingParams.dataRowIds=newGroupingParams.dataRowIds.filter(shouldKeepRow)}return newGroupingParams}),[apiRef]);useGridRegisterPipeProcessor(apiRef,"hydrateRows",addPinnedRows)})(apiRef),((privateApiRef,props)=>{const addToggleColumn=react.useCallback((columnsState=>null==props.getDetailPanelContent?(columnsState.lookup.__detail_panel_toggle__&&(delete columnsState.lookup.__detail_panel_toggle__,columnsState.orderedFields=columnsState.orderedFields.filter((field=>"__detail_panel_toggle__"!==field))),columnsState):(columnsState.lookup.__detail_panel_toggle__||(columnsState.orderedFields=["__detail_panel_toggle__",...columnsState.orderedFields],columnsState.lookup.__detail_panel_toggle__=(0,esm_extends.Z)({},GRID_DETAIL_PANEL_TOGGLE_COL_DEF,{headerName:privateApiRef.current.getLocaleText("detailPanelToggle")})),columnsState)),[privateApiRef,props.getDetailPanelContent]),addExpandedClassToRow=react.useCallback(((classes,id)=>null==props.getDetailPanelContent?classes:gridDetailPanelExpandedRowIdsSelector(privateApiRef.current.state).includes(id)?[...classes,gridClasses_gridClasses["row--detailPanelExpanded"]]:classes),[privateApiRef,props.getDetailPanelContent]);useGridRegisterPipeProcessor(privateApiRef,"hydrateColumns",addToggleColumn),useGridRegisterPipeProcessor(privateApiRef,"rowClassName",addExpandedClassToRow)})(apiRef,props),((apiRef,props)=>{const{disableColumnPinning,pinnedColumns:pinnedColumnsProp,initialState}=props,theme=(0,useTheme.Z)();let pinnedColumns=gridPinnedColumnsSelector(apiRef.current.state);if(null==pinnedColumns){const initializedState=columnPinningStateInitializer(apiRef.current.state,{disableColumnPinning,pinnedColumns:pinnedColumnsProp,initialState},apiRef);pinnedColumns=gridPinnedColumnsSelector(initializedState)}const prevAllPinnedColumns=react.useRef(),reorderPinnedColumns=react.useCallback((columnsState=>{if(0===columnsState.orderedFields.length||disableColumnPinning)return columnsState;const[leftPinnedColumns,rightPinnedColumns]=filterColumns(pinnedColumns,columnsState.orderedFields,"rtl"===theme.direction);let newOrderedFields;const allPinnedColumns=[...leftPinnedColumns,...rightPinnedColumns],{orderedFieldsBeforePinningColumns}=apiRef.current.caches.columnPinning;if(orderedFieldsBeforePinningColumns){newOrderedFields=new Array(columnsState.orderedFields.length).fill(null);const newOrderedFieldsBeforePinningColumns=[...newOrderedFields],remainingFields=[...columnsState.orderedFields];prevAllPinnedColumns.current.forEach((field=>{if(!allPinnedColumns.includes(field)&&columnsState.lookup[field]){const index=orderedFieldsBeforePinningColumns.indexOf(field);newOrderedFields[index]=field,newOrderedFieldsBeforePinningColumns[index]=field,remainingFields.splice(remainingFields.indexOf(field),1)}})),allPinnedColumns.forEach((field=>{let index=orderedFieldsBeforePinningColumns.indexOf(field);if((-1===index||index>=newOrderedFieldsBeforePinningColumns.length)&&(index=columnsState.orderedFields.indexOf(field)),null!==newOrderedFieldsBeforePinningColumns[index])for(index=0;null!==newOrderedFieldsBeforePinningColumns[index];)index+=1;newOrderedFields[index]=field,newOrderedFieldsBeforePinningColumns[index]=field,remainingFields.splice(remainingFields.indexOf(field),1)}));let i=0;remainingFields.forEach((field=>{for(;null!==newOrderedFieldsBeforePinningColumns[i];)i+=1;newOrderedFieldsBeforePinningColumns[i]=field,newOrderedFields[i]=field})),apiRef.current.caches.columnPinning.orderedFieldsBeforePinningColumns=newOrderedFieldsBeforePinningColumns}else newOrderedFields=[...columnsState.orderedFields],apiRef.current.caches.columnPinning.orderedFieldsBeforePinningColumns=[...columnsState.orderedFields];prevAllPinnedColumns.current=allPinnedColumns;const centerColumns=newOrderedFields.filter((field=>!leftPinnedColumns.includes(field)&&!rightPinnedColumns.includes(field)));return(0,esm_extends.Z)({},columnsState,{orderedFields:[...leftPinnedColumns,...centerColumns,...rightPinnedColumns]})}),[apiRef,disableColumnPinning,pinnedColumns,theme.direction]);useGridRegisterPipeProcessor(apiRef,"hydrateColumns",reorderPinnedColumns)})(apiRef,props),(apiRef=>{useGridRegisterStrategyProcessor(apiRef,"none","rowTreeCreation",flatRowTreeCreationMethod)})(apiRef),useGridInitializeState(headerFilteringStateInitializer,apiRef,props),useGridInitializeState(rowSelectionStateInitializer,apiRef,props),useGridInitializeState(detailPanelStateInitializer,apiRef,props),useGridInitializeState(columnPinningStateInitializer,apiRef,props),useGridInitializeState(columnsStateInitializer,apiRef,props),useGridInitializeState(rowPinningStateInitializer,apiRef,props),useGridInitializeState(rowsStateInitializer,apiRef,props),useGridInitializeState(editingStateInitializer,apiRef,props),useGridInitializeState(focusStateInitializer,apiRef,props),useGridInitializeState(sortingStateInitializer,apiRef,props),useGridInitializeState(preferencePanelStateInitializer,apiRef,props),useGridInitializeState(filterStateInitializer,apiRef,props),useGridInitializeState(densityStateInitializer,apiRef,props),useGridInitializeState(columnReorderStateInitializer,apiRef,props),useGridInitializeState(columnResizeStateInitializer,apiRef,props),useGridInitializeState(paginationStateInitializer,apiRef,props),useGridInitializeState(rowsMetaStateInitializer,apiRef,props),useGridInitializeState(columnMenuStateInitializer,apiRef,props),useGridInitializeState(columnGroupsStateInitializer,apiRef,props),((apiRef,props)=>{const logger=useGridLogger(apiRef,"useGridHeaderFiltering"),setHeaderFilterState=react.useCallback((headerFilterState=>{apiRef.current.setState((state=>{var _headerFilterState$ed,_headerFilterState$me;return"DataGrid"===props.signature?state:(0,esm_extends.Z)({},state,{headerFiltering:{editing:null!=(_headerFilterState$ed=headerFilterState.editing)?_headerFilterState$ed:null,menuOpen:null!=(_headerFilterState$me=headerFilterState.menuOpen)?_headerFilterState$me:null}})})),apiRef.current.forceUpdate()}),[apiRef,props.signature]),startHeaderFilterEditMode=react.useCallback((field=>{logger.debug(`Starting edit mode on header filter for field: ${field}`),apiRef.current.setHeaderFilterState({editing:field})}),[apiRef,logger]),stopHeaderFilterEditMode=react.useCallback((()=>{logger.debug("Stopping edit mode on header filter"),apiRef.current.setHeaderFilterState({editing:null})}),[apiRef,logger]),showHeaderFilterMenu=react.useCallback((field=>{logger.debug(`Opening header filter menu for field: ${field}`),apiRef.current.setHeaderFilterState({menuOpen:field})}),[apiRef,logger]),hideHeaderFilterMenu=react.useCallback((()=>{logger.debug("Hiding header filter menu for active field");let fieldToFocus=apiRef.current.state.headerFiltering.menuOpen;if(fieldToFocus){const columnLookup=gridColumnLookupSelector(apiRef),columnVisibilityModel=gridColumnVisibilityModelSelector(apiRef),orderedFields=gridColumnFieldsSelector(apiRef);if(columnLookup[fieldToFocus]||(fieldToFocus=orderedFields[0]),!1===columnVisibilityModel[fieldToFocus]){const visibleOrderedFields=orderedFields.filter((field=>field===fieldToFocus||!1!==columnVisibilityModel[field])),fieldIndex=visibleOrderedFields.indexOf(fieldToFocus);fieldToFocus=visibleOrderedFields[fieldIndex+1]||visibleOrderedFields[fieldIndex-1]}apiRef.current.setHeaderFilterState({menuOpen:null}),apiRef.current.setColumnHeaderFilterFocus(fieldToFocus)}}),[apiRef,logger]),headerFilterPrivateApi={setHeaderFilterState};useGridApiMethod(apiRef,{startHeaderFilterEditMode,stopHeaderFilterEditMode,showHeaderFilterMenu,hideHeaderFilterMenu},"public"),useGridApiMethod(apiRef,headerFilterPrivateApi,"private")})(apiRef,props),(apiRef=>{const handleCellKeyDown=react.useCallback(((params,event)=>{if("treeDataGroup"===apiRef.current.getCellParams(params.id,params.field).colDef.type&&" "===event.key&&!event.shiftKey){if("group"!==params.rowNode.type)return;apiRef.current.setRowChildrenExpansion(params.id,!params.rowNode.childrenExpanded)}}),[apiRef]);useGridApiEventHandler(apiRef,"cellKeyDown",handleCellKeyDown)})(apiRef),useGridKeyboardNavigation(apiRef,props),((apiRef,props)=>{const logger=useGridLogger(apiRef,"useGridSelection"),runIfRowSelectionIsEnabled=callback=>(...args)=>{props.rowSelection&&callback(...args)},propRowSelectionModel=react.useMemo((()=>getSelectionModelPropValue(props.rowSelectionModel,gridRowSelectionStateSelector(apiRef.current.state))),[apiRef,props.rowSelectionModel]),lastRowToggled=react.useRef(null);apiRef.current.registerControlState({stateId:"rowSelection",propModel:propRowSelectionModel,propOnChange:props.onRowSelectionModelChange,stateSelector:gridRowSelectionStateSelector,changeEvent:"rowSelectionChange"});const{checkboxSelection,disableMultipleRowSelection,disableRowSelectionOnClick,isRowSelectable:propIsRowSelectable}=props,canHaveMultipleSelection=!disableMultipleRowSelection||checkboxSelection,visibleRows=useGridVisibleRows(apiRef,props),expandMouseRowRangeSelection=react.useCallback((id=>{var _lastRowToggled$curre;let endId=id;const startId=null!=(_lastRowToggled$curre=lastRowToggled.current)?_lastRowToggled$curre:id,isSelected=apiRef.current.isRowSelected(id);if(isSelected){const visibleRowIds=gridExpandedSortedRowIdsSelector(apiRef),startIndex=visibleRowIds.findIndex((rowId=>rowId===startId)),endIndex=visibleRowIds.findIndex((rowId=>rowId===endId));if(startIndex===endIndex)return;endId=startIndex>endIndex?visibleRowIds[endIndex+1]:visibleRowIds[endIndex-1]}lastRowToggled.current=id,apiRef.current.selectRowRange({startId,endId},!isSelected)}),[apiRef]),setRowSelectionModel=react.useCallback((model=>{if(props.signature===GridSignature.DataGrid&&!props.checkboxSelection&&Array.isArray(model)&&model.length>1)throw new Error(["MUI: `rowSelectionModel` can only contain 1 item in DataGrid.","You need to upgrade to DataGridPro or DataGridPremium component to unlock multiple selection."].join("\n"));gridRowSelectionStateSelector(apiRef.current.state)!==model&&(logger.debug("Setting selection model"),apiRef.current.setState((state=>(0,esm_extends.Z)({},state,{rowSelection:props.rowSelection?model:[]}))),apiRef.current.forceUpdate())}),[apiRef,logger,props.rowSelection,props.signature,props.checkboxSelection]),isRowSelected=react.useCallback((id=>gridRowSelectionStateSelector(apiRef.current.state).includes(id)),[apiRef]),isRowSelectable=react.useCallback((id=>{if(propIsRowSelectable&&!propIsRowSelectable(apiRef.current.getRowParams(id)))return!1;const rowNode=apiRef.current.getRowNode(id);return"footer"!==(null==rowNode?void 0:rowNode.type)&&"pinnedRow"!==(null==rowNode?void 0:rowNode.type)}),[apiRef,propIsRowSelectable]),getSelectedRows=react.useCallback((()=>selectedGridRowsSelector(apiRef)),[apiRef]),selectRow=react.useCallback(((id,isSelected=!0,resetSelection=!1)=>{if(apiRef.current.isRowSelectable(id))if(lastRowToggled.current=id,resetSelection)logger.debug(`Setting selection for row ${id}`),apiRef.current.setRowSelectionModel(isSelected?[id]:[]);else{logger.debug(`Toggling selection for row ${id}`);const newSelection=gridRowSelectionStateSelector(apiRef.current.state).filter((el=>el!==id));isSelected&&newSelection.push(id),(newSelection.length<2||canHaveMultipleSelection)&&apiRef.current.setRowSelectionModel(newSelection)}}),[apiRef,logger,canHaveMultipleSelection]),selectRows=react.useCallback(((ids,isSelected=!0,resetSelection=!1)=>{logger.debug("Setting selection for several rows");const selectableIds=ids.filter((id=>apiRef.current.isRowSelectable(id)));let newSelection;if(resetSelection)newSelection=isSelected?selectableIds:[];else{const selectionLookup=(0,esm_extends.Z)({},selectedIdsLookupSelector(apiRef));selectableIds.forEach((id=>{isSelected?selectionLookup[id]=id:delete selectionLookup[id]})),newSelection=Object.values(selectionLookup)}(newSelection.length<2||canHaveMultipleSelection)&&apiRef.current.setRowSelectionModel(newSelection)}),[apiRef,logger,canHaveMultipleSelection]),selectRowRange=react.useCallback((({startId,endId},isSelected=!0,resetSelection=!1)=>{if(!apiRef.current.getRow(startId)||!apiRef.current.getRow(endId))return;logger.debug(`Expanding selection from row ${startId} to row ${endId}`);const allPagesRowIds=gridExpandedSortedRowIdsSelector(apiRef),startIndex=allPagesRowIds.indexOf(startId),endIndex=allPagesRowIds.indexOf(endId),[start,end]=startIndex>endIndex?[endIndex,startIndex]:[startIndex,endIndex],rowsBetweenStartAndEnd=allPagesRowIds.slice(start,end+1);apiRef.current.selectRows(rowsBetweenStartAndEnd,isSelected,resetSelection)}),[apiRef,logger]),selectionPrivateApi={selectRows,selectRowRange};useGridApiMethod(apiRef,{selectRow,setRowSelectionModel,getSelectedRows,isRowSelected,isRowSelectable},"public"),useGridApiMethod(apiRef,selectionPrivateApi,props.signature===GridSignature.DataGrid?"private":"public");const removeOutdatedSelection=react.useCallback((()=>{if(props.keepNonExistentRowsSelected)return;const currentSelection=gridRowSelectionStateSelector(apiRef.current.state),rowsLookup=gridRowsLookupSelector(apiRef),selectionLookup=(0,esm_extends.Z)({},selectedIdsLookupSelector(apiRef));let hasChanged=!1;currentSelection.forEach((id=>{rowsLookup[id]||(delete selectionLookup[id],hasChanged=!0)})),hasChanged&&apiRef.current.setRowSelectionModel(Object.values(selectionLookup))}),[apiRef,props.keepNonExistentRowsSelected]),handleSingleRowSelection=react.useCallback(((id,event)=>{const hasCtrlKey=event.metaKey||event.ctrlKey,isMultipleSelectionDisabled=!checkboxSelection&&!hasCtrlKey&&!(event=>!!event.key)(event),resetSelection=!canHaveMultipleSelection||isMultipleSelectionDisabled,isSelected=apiRef.current.isRowSelected(id);resetSelection?apiRef.current.selectRow(id,!!isMultipleSelectionDisabled||!isSelected,!0):apiRef.current.selectRow(id,!isSelected,!1)}),[apiRef,canHaveMultipleSelection,checkboxSelection]),handleRowClick=react.useCallback(((params,event)=>{var _closest;if(disableRowSelectionOnClick)return;const field=null==(_closest=event.target.closest(`.${gridClasses_gridClasses.cell}`))?void 0:_closest.getAttribute("data-field");field!==GRID_CHECKBOX_SELECTION_COL_DEF.field&&"__detail_panel_toggle__"!==field&&(field&&"actions"===apiRef.current.getColumn(field).type||"pinnedRow"!==apiRef.current.getRowNode(params.id).type&&(event.shiftKey&&(canHaveMultipleSelection||checkboxSelection)?expandMouseRowRangeSelection(params.id):handleSingleRowSelection(params.id,event)))}),[disableRowSelectionOnClick,canHaveMultipleSelection,checkboxSelection,apiRef,expandMouseRowRangeSelection,handleSingleRowSelection]),preventSelectionOnShift=react.useCallback(((params,event)=>{var _window$getSelection;canHaveMultipleSelection&&event.shiftKey&&(null==(_window$getSelection=window.getSelection())||_window$getSelection.removeAllRanges())}),[canHaveMultipleSelection]),handleRowSelectionCheckboxChange=react.useCallback(((params,event)=>{event.nativeEvent.shiftKey?expandMouseRowRangeSelection(params.id):apiRef.current.selectRow(params.id,params.value)}),[apiRef,expandMouseRowRangeSelection]),handleHeaderSelectionCheckboxChange=react.useCallback((params=>{const rowsToBeSelected=props.checkboxSelectionVisibleOnly&&props.pagination?gridPaginatedVisibleSortedGridRowIdsSelector(apiRef):gridExpandedSortedRowIdsSelector(apiRef);apiRef.current.selectRows(rowsToBeSelected,params.value)}),[apiRef,props.checkboxSelectionVisibleOnly,props.pagination]),handleCellKeyDown=react.useCallback(((params,event)=>{if(apiRef.current.getCellMode(params.id,params.field)!==GridCellModes.Edit&&event.currentTarget.contains(event.target)){if(isNavigationKey(event.key)&&event.shiftKey){const focusCell=gridFocusCellSelector(apiRef);if(focusCell&&focusCell.id!==params.id){event.preventDefault();const isNextRowSelected=apiRef.current.isRowSelected(focusCell.id);if(!canHaveMultipleSelection)return void apiRef.current.selectRow(focusCell.id,!isNextRowSelected,!0);const newRowIndex=apiRef.current.getRowIndexRelativeToVisibleRows(focusCell.id),previousRowIndex=apiRef.current.getRowIndexRelativeToVisibleRows(params.id);let start,end;newRowIndex>previousRowIndex?isNextRowSelected?(start=previousRowIndex,end=newRowIndex-1):(start=previousRowIndex,end=newRowIndex):isNextRowSelected?(start=newRowIndex+1,end=previousRowIndex):(start=newRowIndex,end=previousRowIndex);const rowsBetweenStartAndEnd=visibleRows.rows.slice(start,end+1).map((row=>row.id));return void apiRef.current.selectRows(rowsBetweenStartAndEnd,!isNextRowSelected)}}if(" "===event.key&&event.shiftKey)return event.preventDefault(),void handleSingleRowSelection(params.id,event);"a"===event.key&&(event.ctrlKey||event.metaKey)&&(event.preventDefault(),selectRows(apiRef.current.getAllRowIds(),!0))}}),[apiRef,handleSingleRowSelection,selectRows,visibleRows.rows,canHaveMultipleSelection]);useGridApiEventHandler(apiRef,"sortedRowsSet",runIfRowSelectionIsEnabled(removeOutdatedSelection)),useGridApiEventHandler(apiRef,"rowClick",runIfRowSelectionIsEnabled(handleRowClick)),useGridApiEventHandler(apiRef,"rowSelectionCheckboxChange",runIfRowSelectionIsEnabled(handleRowSelectionCheckboxChange)),useGridApiEventHandler(apiRef,"headerSelectionCheckboxChange",handleHeaderSelectionCheckboxChange),useGridApiEventHandler(apiRef,"cellMouseDown",runIfRowSelectionIsEnabled(preventSelectionOnShift)),useGridApiEventHandler(apiRef,"cellKeyDown",runIfRowSelectionIsEnabled(handleCellKeyDown)),react.useEffect((()=>{void 0!==propRowSelectionModel&&apiRef.current.setRowSelectionModel(propRowSelectionModel)}),[apiRef,propRowSelectionModel,props.rowSelection]),react.useEffect((()=>{props.rowSelection||apiRef.current.setRowSelectionModel([])}),[apiRef,props.rowSelection]);const isStateControlled=null!=propRowSelectionModel;react.useEffect((()=>{if(isStateControlled||!props.rowSelection)return;const currentSelection=gridRowSelectionStateSelector(apiRef.current.state);if(isRowSelectable){const newSelection=currentSelection.filter((id=>isRowSelectable(id)));newSelection.length<currentSelection.length&&apiRef.current.setRowSelectionModel(newSelection)}}),[apiRef,isRowSelectable,isStateControlled,props.rowSelection]),react.useEffect((()=>{if(!props.rowSelection||isStateControlled)return;const currentSelection=gridRowSelectionStateSelector(apiRef.current.state);!canHaveMultipleSelection&&currentSelection.length>1&&apiRef.current.setRowSelectionModel([])}),[apiRef,canHaveMultipleSelection,checkboxSelection,isStateControlled,props.rowSelection])})(apiRef,props),((apiRef,props)=>{var _props$initialState4;const pinnedColumns=useGridSelector(apiRef,gridPinnedColumnsSelector),theme=(0,useTheme.Z)(),updateHoveredClassOnSiblingRows=react.useCallback((event=>{var _pinnedColumns$left$l,_pinnedColumns$left,_pinnedColumns$right$,_pinnedColumns$right;if(props.disableColumnPinning)return;if(!Array.isArray(pinnedColumns.left)&&!Array.isArray(pinnedColumns.right))return;if((null!=(_pinnedColumns$left$l=null==(_pinnedColumns$left=pinnedColumns.left)?void 0:_pinnedColumns$left.length)?_pinnedColumns$left$l:0)+(null!=(_pinnedColumns$right$=null==(_pinnedColumns$right=pinnedColumns.right)?void 0:_pinnedColumns$right.length)?_pinnedColumns$right$:0)===0)return;const index=event.currentTarget.dataset.rowindex;apiRef.current.virtualScrollerRef.current.querySelectorAll(`.${gridClasses_gridClasses.row}[data-rowindex="${index}"]`).forEach((row=>{row.closest(`.${gridClasses_gridClasses.virtualScroller}`)===apiRef.current.virtualScrollerRef.current&&("mouseenter"===event.type?row.classList.add("Mui-hovered"):row.classList.remove("Mui-hovered"))}))}),[apiRef,pinnedColumns.left,pinnedColumns.right,props.disableColumnPinning]),handleMouseEnter=react.useCallback(((params,event)=>{updateHoveredClassOnSiblingRows(event)}),[updateHoveredClassOnSiblingRows]),handleMouseLeave=react.useCallback(((params,event)=>{updateHoveredClassOnSiblingRows(event)}),[updateHoveredClassOnSiblingRows]);useGridApiEventHandler(apiRef,"rowMouseEnter",handleMouseEnter),useGridApiEventHandler(apiRef,"rowMouseLeave",handleMouseLeave);const calculateScrollLeft=react.useCallback(((initialValue,params)=>{if(props.disableColumnPinning)return initialValue;const visibleColumnFields=gridVisibleColumnFieldsSelector(apiRef),[leftPinnedColumns,rightPinnedColumns]=filterColumns(pinnedColumns,visibleColumnFields,"rtl"===theme.direction);if(!params.colIndex||0===leftPinnedColumns.length&&0===rightPinnedColumns.length)return initialValue;const visibleColumns=gridVisibleColumnDefinitionsSelector(apiRef),columnsTotalWidth=gridColumnsTotalWidthSelector(apiRef),columnPositions=gridColumnPositionsSelector(apiRef),clientWidth=apiRef.current.virtualScrollerRef.current.clientWidth,scrollLeft=Math.abs(apiRef.current.virtualScrollerRef.current.scrollLeft),offsetWidth=visibleColumns[params.colIndex].computedWidth,offsetLeft=columnPositions[params.colIndex],leftPinnedColumnsWidth=columnPositions[leftPinnedColumns.length],rightPinnedColumnsWidth=columnsTotalWidth-columnPositions[columnPositions.length-rightPinnedColumns.length],elementBottom=offsetLeft+offsetWidth;if(elementBottom-(clientWidth-rightPinnedColumnsWidth)>scrollLeft){const left=elementBottom-(clientWidth-rightPinnedColumnsWidth);return(0,esm_extends.Z)({},initialValue,{left})}if(offsetLeft<scrollLeft+leftPinnedColumnsWidth){const left=offsetLeft-leftPinnedColumnsWidth;return(0,esm_extends.Z)({},initialValue,{left})}return initialValue}),[apiRef,pinnedColumns,props.disableColumnPinning,theme.direction]),addColumnMenuItems=react.useCallback(((columnMenuItems,colDef)=>props.disableColumnPinning||!1===colDef.pinnable?columnMenuItems:[...columnMenuItems,"columnMenuPinningItem"]),[props.disableColumnPinning]),checkIfCanBeReordered=react.useCallback(((initialValue,{targetIndex})=>{const visibleColumnFields=gridVisibleColumnFieldsSelector(apiRef),[leftPinnedColumns,rightPinnedColumns]=filterColumns(pinnedColumns,visibleColumnFields,"rtl"===theme.direction);return 0===leftPinnedColumns.length&&0===rightPinnedColumns.length?initialValue:!(leftPinnedColumns.length>0&&targetIndex<leftPinnedColumns.length)&&(rightPinnedColumns.length>0?!(targetIndex>=gridVisibleColumnDefinitionsSelector(apiRef).length-rightPinnedColumns.length)&&initialValue:initialValue)}),[apiRef,pinnedColumns,theme.direction]),stateExportPreProcessing=react.useCallback(((prevState,context)=>{var _props$initialState3,_pinnedColumnsToExpor,_pinnedColumnsToExpor2;const pinnedColumnsToExport=gridPinnedColumnsSelector(apiRef.current.state);return!context.exportOnlyDirtyModels||null!=props.pinnedColumns||null!=(null==(_props$initialState3=props.initialState)?void 0:_props$initialState3.pinnedColumns)||(null!=(_pinnedColumnsToExpor=pinnedColumnsToExport.left)?_pinnedColumnsToExpor:[]).length>0||(null!=(_pinnedColumnsToExpor2=pinnedColumnsToExport.right)?_pinnedColumnsToExpor2:[]).length>0?(0,esm_extends.Z)({},prevState,{pinnedColumns:pinnedColumnsToExport}):prevState}),[apiRef,props.pinnedColumns,null==(_props$initialState4=props.initialState)?void 0:_props$initialState4.pinnedColumns]),stateRestorePreProcessing=react.useCallback(((params,context)=>{const newPinnedColumns=context.stateToRestore.pinnedColumns;return null!=newPinnedColumns&&apiRef.current.setState(mergeStateWithPinnedColumns(newPinnedColumns)),params}),[apiRef]);useGridRegisterPipeProcessor(apiRef,"scrollToIndexes",calculateScrollLeft),useGridRegisterPipeProcessor(apiRef,"columnMenu",addColumnMenuItems),useGridRegisterPipeProcessor(apiRef,"canBeReordered",checkIfCanBeReordered),useGridRegisterPipeProcessor(apiRef,"exportState",stateExportPreProcessing),useGridRegisterPipeProcessor(apiRef,"restoreState",stateRestorePreProcessing),apiRef.current.registerControlState({stateId:"pinnedColumns",propModel:props.pinnedColumns,propOnChange:props.onPinnedColumnsChange,stateSelector:gridPinnedColumnsSelector,changeEvent:"pinnedColumnsChange"});const checkIfEnabled=react.useCallback((methodName=>{if(props.disableColumnPinning)throw new Error(`MUI: You cannot call \`apiRef.current.${methodName}\` when \`disableColumnPinning\` is true.`)}),[props.disableColumnPinning]),pinColumn=react.useCallback(((field,side)=>{if(checkIfEnabled("pinColumn"),apiRef.current.isColumnPinned(field)===side)return;const otherSide=side===GridPinnedPosition.right?GridPinnedPosition.left:GridPinnedPosition.right,newPinnedColumns={[side]:[...pinnedColumns[side]||[],field],[otherSide]:(pinnedColumns[otherSide]||[]).filter((column=>column!==field))};apiRef.current.setPinnedColumns(newPinnedColumns)}),[apiRef,checkIfEnabled,pinnedColumns]),unpinColumn=react.useCallback((field=>{checkIfEnabled("unpinColumn"),apiRef.current.setPinnedColumns({left:(pinnedColumns.left||[]).filter((column=>column!==field)),right:(pinnedColumns.right||[]).filter((column=>column!==field))})}),[apiRef,checkIfEnabled,pinnedColumns.left,pinnedColumns.right]),getPinnedColumns=react.useCallback((()=>(checkIfEnabled("getPinnedColumns"),gridPinnedColumnsSelector(apiRef.current.state))),[apiRef,checkIfEnabled]),setPinnedColumns=react.useCallback((newPinnedColumns=>{checkIfEnabled("setPinnedColumns"),apiRef.current.setState(mergeStateWithPinnedColumns(newPinnedColumns)),apiRef.current.forceUpdate()}),[apiRef,checkIfEnabled]),isColumnPinned=react.useCallback((field=>(checkIfEnabled("isColumnPinned"),(pinnedColumns.left||[]).includes(field)?GridPinnedPosition.left:!!(pinnedColumns.right||[]).includes(field)&&GridPinnedPosition.right)),[pinnedColumns.left,pinnedColumns.right,checkIfEnabled]);useGridApiMethod(apiRef,{pinColumn,unpinColumn,getPinnedColumns,setPinnedColumns,isColumnPinned},"public");const handleColumnOrderChange=react.useCallback((params=>{if(!apiRef.current.caches.columnPinning.orderedFieldsBeforePinningColumns)return;const{column,targetIndex,oldIndex}=params,delta=targetIndex>oldIndex?1:-1,siblingField=gridColumnFieldsSelector(apiRef)[targetIndex-delta],newOrderedFieldsBeforePinningColumns=[...apiRef.current.caches.columnPinning.orderedFieldsBeforePinningColumns];let i=newOrderedFieldsBeforePinningColumns.findIndex((currentColumn=>currentColumn===column.field)),j=i+delta;const stop=newOrderedFieldsBeforePinningColumns.findIndex((currentColumn=>currentColumn===siblingField));for(;delta>0?i<stop:i>stop;){for(;apiRef.current.isColumnPinned(newOrderedFieldsBeforePinningColumns[j]);)j+=delta;const temp=newOrderedFieldsBeforePinningColumns[i];newOrderedFieldsBeforePinningColumns[i]=newOrderedFieldsBeforePinningColumns[j],newOrderedFieldsBeforePinningColumns[j]=temp,i=j,j=i+delta}apiRef.current.caches.columnPinning.orderedFieldsBeforePinningColumns=newOrderedFieldsBeforePinningColumns}),[apiRef]);useGridApiEventHandler(apiRef,"columnOrderChange",handleColumnOrderChange),react.useEffect((()=>{props.pinnedColumns&&apiRef.current.setPinnedColumns(props.pinnedColumns)}),[apiRef,props.pinnedColumns])})(apiRef,props),((apiRef,props)=>{const setPinnedRows=react.useCallback((newPinnedRows=>{apiRef.current.caches.pinnedRows=createPinnedRowsInternalCache(newPinnedRows,props.getRowId),apiRef.current.requestPipeProcessorsApplication("hydrateRows")}),[apiRef,props.getRowId]);useGridApiMethod(apiRef,{unstable_setPinnedRows:setPinnedRows},"public");const isFirstRender=react.useRef(!0);react.useEffect((()=>{isFirstRender.current?isFirstRender.current=!1:apiRef.current.unstable_setPinnedRows(props.pinnedRows)}),[apiRef,props.pinnedRows])})(apiRef,props),function useGridColumns(apiRef,props){var _props$initialState4,_props$slotProps2;const logger=useGridLogger(apiRef,"useGridColumns"),columnTypes=defaultColumnTypes,previousColumnsProp=react.useRef(props.columns),previousColumnTypesProp=react.useRef(columnTypes);apiRef.current.registerControlState({stateId:"visibleColumns",propModel:props.columnVisibilityModel,propOnChange:props.onColumnVisibilityModelChange,stateSelector:gridColumnVisibilityModelSelector,changeEvent:"columnVisibilityModelChange"});const setGridColumnsState=react.useCallback((columnsState=>{logger.debug("Updating columns state."),apiRef.current.setState(mergeColumnsState(columnsState)),apiRef.current.forceUpdate(),apiRef.current.publishEvent("columnsChange",columnsState.orderedFields)}),[logger,apiRef]),getColumn=react.useCallback((field=>gridColumnLookupSelector(apiRef)[field]),[apiRef]),getAllColumns=react.useCallback((()=>gridColumnDefinitionsSelector(apiRef)),[apiRef]),getVisibleColumns=react.useCallback((()=>gridVisibleColumnDefinitionsSelector(apiRef)),[apiRef]),getColumnIndex=react.useCallback(((field,useVisibleColumns=!0)=>(useVisibleColumns?gridVisibleColumnDefinitionsSelector(apiRef):gridColumnDefinitionsSelector(apiRef)).findIndex((col=>col.field===field))),[apiRef]),getColumnPosition=react.useCallback((field=>{const index=getColumnIndex(field);return gridColumnPositionsSelector(apiRef)[index]}),[apiRef,getColumnIndex]),setColumnVisibilityModel=react.useCallback((model=>{gridColumnVisibilityModelSelector(apiRef)!==model&&(apiRef.current.setState((state=>(0,esm_extends.Z)({},state,{columns:createColumnsState({apiRef,columnTypes,columnsToUpsert:[],initialState:void 0,columnVisibilityModel:model,keepOnlyColumnsToUpsert:!1})}))),apiRef.current.forceUpdate())}),[apiRef,columnTypes]),updateColumns=react.useCallback((columns=>{const columnsState=createColumnsState({apiRef,columnTypes,columnsToUpsert:columns,initialState:void 0,keepOnlyColumnsToUpsert:!1});setGridColumnsState(columnsState)}),[apiRef,setGridColumnsState,columnTypes]),setColumnVisibility=react.useCallback(((field,isVisible)=>{var _columnVisibilityMode;const columnVisibilityModel=gridColumnVisibilityModelSelector(apiRef);if(isVisible!==(null==(_columnVisibilityMode=columnVisibilityModel[field])||_columnVisibilityMode)){const newModel=(0,esm_extends.Z)({},columnVisibilityModel,{[field]:isVisible});apiRef.current.setColumnVisibilityModel(newModel)}}),[apiRef]),getColumnIndexRelativeToVisibleColumns=react.useCallback((field=>gridColumnFieldsSelector(apiRef).findIndex((col=>col===field))),[apiRef]),setColumnIndex=react.useCallback(((field,targetIndexPosition)=>{const allColumns=gridColumnFieldsSelector(apiRef),oldIndexPosition=getColumnIndexRelativeToVisibleColumns(field);if(oldIndexPosition===targetIndexPosition)return;logger.debug(`Moving column ${field} to index ${targetIndexPosition}`);const updatedColumns=[...allColumns],fieldRemoved=updatedColumns.splice(oldIndexPosition,1)[0];updatedColumns.splice(targetIndexPosition,0,fieldRemoved),setGridColumnsState((0,esm_extends.Z)({},gridColumnsStateSelector(apiRef.current.state),{orderedFields:updatedColumns}));const params={column:apiRef.current.getColumn(field),targetIndex:apiRef.current.getColumnIndexRelativeToVisibleColumns(field),oldIndex:oldIndexPosition};apiRef.current.publishEvent("columnIndexChange",params)}),[apiRef,logger,setGridColumnsState,getColumnIndexRelativeToVisibleColumns]),setColumnWidth=react.useCallback(((field,width)=>{logger.debug(`Updating column ${field} width to ${width}`);const column=apiRef.current.getColumn(field),newColumn=(0,esm_extends.Z)({},column,{width});apiRef.current.updateColumns([newColumn]),apiRef.current.publishEvent("columnWidthChange",{element:apiRef.current.getColumnHeaderElement(field),colDef:newColumn,width})}),[apiRef,logger]),columnReorderApi={setColumnIndex};useGridApiMethod(apiRef,{getColumn,getAllColumns,getColumnIndex,getColumnPosition,getVisibleColumns,getColumnIndexRelativeToVisibleColumns,updateColumns,setColumnVisibilityModel,setColumnVisibility,setColumnWidth},"public"),useGridApiMethod(apiRef,columnReorderApi,props.signature===GridSignature.DataGrid?"private":"public");const stateExportPreProcessing=react.useCallback(((prevState,context)=>{var _props$initialState$c,_props$initialState3,_props$initialState3$;const columnsStateToExport={},columnVisibilityModelToExport=gridColumnVisibilityModelSelector(apiRef);(!context.exportOnlyDirtyModels||null!=props.columnVisibilityModel||Object.keys(null!=(_props$initialState$c=null==(_props$initialState3=props.initialState)||null==(_props$initialState3$=_props$initialState3.columns)?void 0:_props$initialState3$.columnVisibilityModel)?_props$initialState$c:{}).length>0||Object.keys(columnVisibilityModelToExport).length>0)&&(columnsStateToExport.columnVisibilityModel=columnVisibilityModelToExport),columnsStateToExport.orderedFields=gridColumnFieldsSelector(apiRef);const columns=gridColumnDefinitionsSelector(apiRef),dimensions={};return columns.forEach((colDef=>{if(colDef.hasBeenResized){const colDefDimensions={};COLUMNS_DIMENSION_PROPERTIES.forEach((propertyName=>{let propertyValue=colDef[propertyName];propertyValue===1/0&&(propertyValue=-1),colDefDimensions[propertyName]=propertyValue})),dimensions[colDef.field]=colDefDimensions}})),Object.keys(dimensions).length>0&&(columnsStateToExport.dimensions=dimensions),(0,esm_extends.Z)({},prevState,{columns:columnsStateToExport})}),[apiRef,props.columnVisibilityModel,null==(_props$initialState4=props.initialState)?void 0:_props$initialState4.columns]),stateRestorePreProcessing=react.useCallback(((params,context)=>{var _context$stateToResto;const columnVisibilityModelToImport=null==(_context$stateToResto=context.stateToRestore.columns)?void 0:_context$stateToResto.columnVisibilityModel,initialState=context.stateToRestore.columns;if(null==columnVisibilityModelToImport&&null==initialState)return params;const columnsState=createColumnsState({apiRef,columnTypes,columnsToUpsert:[],initialState,columnVisibilityModel:columnVisibilityModelToImport,keepOnlyColumnsToUpsert:!1});return apiRef.current.setState(mergeColumnsState(columnsState)),null!=initialState&&apiRef.current.publishEvent("columnsChange",columnsState.orderedFields),params}),[apiRef,columnTypes]),preferencePanelPreProcessing=react.useCallback(((initialValue,value)=>{if(value===GridPreferencePanelsValue.columns){var _props$slotProps;const ColumnsPanel=props.slots.columnsPanel;return(0,jsx_runtime.jsx)(ColumnsPanel,(0,esm_extends.Z)({},null==(_props$slotProps=props.slotProps)?void 0:_props$slotProps.columnsPanel))}return initialValue}),[props.slots.columnsPanel,null==(_props$slotProps2=props.slotProps)?void 0:_props$slotProps2.columnsPanel]),addColumnMenuItems=react.useCallback((columnMenuItems=>props.disableColumnSelector?columnMenuItems:[...columnMenuItems,"columnMenuColumnsItem"]),[props.disableColumnSelector]);useGridRegisterPipeProcessor(apiRef,"columnMenu",addColumnMenuItems),useGridRegisterPipeProcessor(apiRef,"exportState",stateExportPreProcessing),useGridRegisterPipeProcessor(apiRef,"restoreState",stateRestorePreProcessing),useGridRegisterPipeProcessor(apiRef,"preferencePanel",preferencePanelPreProcessing);const prevInnerWidth=react.useRef(null);useGridApiEventHandler(apiRef,"viewportInnerSizeChange",(viewportInnerSize=>{prevInnerWidth.current!==viewportInnerSize.width&&(prevInnerWidth.current=viewportInnerSize.width,setGridColumnsState(hydrateColumnsWidth(gridColumnsStateSelector(apiRef.current.state),viewportInnerSize.width)))}));const hydrateColumns=react.useCallback((()=>{logger.info("Columns pipe processing have changed, regenerating the columns");const columnsState=createColumnsState({apiRef,columnTypes,columnsToUpsert:[],initialState:void 0,keepOnlyColumnsToUpsert:!1});setGridColumnsState(columnsState)}),[apiRef,logger,setGridColumnsState,columnTypes]);useGridRegisterPipeApplier(apiRef,"hydrateColumns",hydrateColumns);const isFirstRender=react.useRef(!0);react.useEffect((()=>{if(isFirstRender.current)return void(isFirstRender.current=!1);if(logger.info(`GridColumns have changed, new length ${props.columns.length}`),previousColumnsProp.current===props.columns&&previousColumnTypesProp.current===columnTypes)return;const columnsState=createColumnsState({apiRef,columnTypes,initialState:void 0,columnsToUpsert:props.columns,keepOnlyColumnsToUpsert:!0});previousColumnsProp.current=props.columns,previousColumnTypesProp.current=columnTypes,setGridColumnsState(columnsState)}),[logger,apiRef,setGridColumnsState,props.columns,columnTypes]),react.useEffect((()=>{void 0!==props.columnVisibilityModel&&apiRef.current.setColumnVisibilityModel(props.columnVisibilityModel)}),[apiRef,logger,props.columnVisibilityModel])}(apiRef,props),useGridRows(apiRef,props),useGridParamsApi(apiRef),((apiRef,props)=>{const expandedRowIds=useGridSelector(apiRef,gridDetailPanelExpandedRowIdsSelector),contentCache=useGridSelector(apiRef,gridDetailPanelExpandedRowsContentCacheSelector),handleCellClick=react.useCallback(((params,event)=>{if("__detail_panel_toggle__"!==params.field||null==props.getDetailPanelContent)return;const content=contentCache[params.id];react.isValidElement(content)&&event.target!==event.currentTarget&&apiRef.current.toggleDetailPanel(params.id)}),[apiRef,contentCache,props.getDetailPanelContent]),handleCellKeyDown=react.useCallback(((params,event)=>{null!=props.getDetailPanelContent&&"__detail_panel_toggle__"===params.field&&" "===event.key&&apiRef.current.toggleDetailPanel(params.id)}),[apiRef,props.getDetailPanelContent]);useGridApiEventHandler(apiRef,"cellClick",handleCellClick),useGridApiEventHandler(apiRef,"cellKeyDown",handleCellKeyDown),apiRef.current.registerControlState({stateId:"detailPanels",propModel:props.detailPanelExpandedRowIds,propOnChange:props.onDetailPanelExpandedRowIdsChange,stateSelector:gridDetailPanelExpandedRowIdsSelector,changeEvent:"detailPanelsExpandedRowIdsChange"});const toggleDetailPanel=react.useCallback((id=>{if(null==props.getDetailPanelContent)return;const content=contentCache[id];if(!react.isValidElement(content))return;const ids=apiRef.current.getExpandedDetailPanels();apiRef.current.setExpandedDetailPanels(ids.includes(id)?ids.filter((rowId=>rowId!==id)):[...ids,id])}),[apiRef,contentCache,props.getDetailPanelContent]),getExpandedDetailPanels=react.useCallback((()=>gridDetailPanelExpandedRowIdsSelector(apiRef.current.state)),[apiRef]),setExpandedDetailPanels=react.useCallback((ids=>{apiRef.current.setState((state=>(0,esm_extends.Z)({},state,{detailPanel:(0,esm_extends.Z)({},state.detailPanel,{expandedRowIds:ids})}))),apiRef.current.forceUpdate()}),[apiRef]),detailPanelPrivateApi={storeDetailPanelHeight:react.useCallback(((id,height)=>{const heightCache=gridDetailPanelRawHeightCacheSelector(apiRef.current.state);heightCache[id]&&heightCache[id].height!==height&&(apiRef.current.setState((state=>(0,esm_extends.Z)({},state,{detailPanel:(0,esm_extends.Z)({},state.detailPanel,{heightCache:(0,esm_extends.Z)({},heightCache,{[id]:(0,esm_extends.Z)({},heightCache[id],{height})})})}))),apiRef.current.requestPipeProcessorsApplication("rowHeight"))}),[apiRef]),detailPanelHasAutoHeight:react.useCallback((id=>{const heightCache=gridDetailPanelRawHeightCacheSelector(apiRef.current.state);return!!heightCache[id]&&heightCache[id].autoHeight}),[apiRef])};useGridApiMethod(apiRef,{toggleDetailPanel,getExpandedDetailPanels,setExpandedDetailPanels},"public"),useGridApiMethod(apiRef,detailPanelPrivateApi,"private"),react.useEffect((()=>{props.detailPanelExpandedRowIds&&gridDetailPanelExpandedRowIdsSelector(apiRef.current.state)!==props.detailPanelExpandedRowIds&&apiRef.current.setExpandedDetailPanels(props.detailPanelExpandedRowIds)}),[apiRef,props.detailPanelExpandedRowIds]);const updateCachesAndForceUpdate=react.useCallback((()=>{apiRef.current.setState((state=>(0,esm_extends.Z)({},state,{detailPanel:(0,esm_extends.Z)({},state.detailPanel,cacheContentAndHeight(apiRef,props.getDetailPanelContent,props.getDetailPanelHeight,state.detailPanel.heightCache))}))),apiRef.current.forceUpdate()}),[apiRef,props.getDetailPanelContent,props.getDetailPanelHeight]);useGridApiEventHandler(apiRef,"sortedRowsSet",updateCachesAndForceUpdate);const previousGetDetailPanelContentProp=react.useRef(),previousGetDetailPanelHeightProp=react.useRef(),updateCachesIfNeeded=react.useCallback((()=>{props.getDetailPanelContent===previousGetDetailPanelContentProp.current&&props.getDetailPanelHeight===previousGetDetailPanelHeightProp.current||(apiRef.current.setState((state=>(0,esm_extends.Z)({},state,{detailPanel:(0,esm_extends.Z)({},state.detailPanel,cacheContentAndHeight(apiRef,props.getDetailPanelContent,props.getDetailPanelHeight,state.detailPanel.heightCache))}))),previousGetDetailPanelContentProp.current=props.getDetailPanelContent,previousGetDetailPanelHeightProp.current=props.getDetailPanelHeight)}),[apiRef,props.getDetailPanelContent,props.getDetailPanelHeight]),addDetailHeight=react.useCallback(((initialValue,row)=>{var _heightCache$row$id;if(!expandedRowIds||0===expandedRowIds.length||!expandedRowIds.includes(row.id))return initialValue.detail=0,initialValue;updateCachesIfNeeded();const heightCache=gridDetailPanelExpandedRowsHeightCacheSelector(apiRef);return initialValue.detail=null!=(_heightCache$row$id=heightCache[row.id])?_heightCache$row$id:0,initialValue}),[apiRef,expandedRowIds,updateCachesIfNeeded]);useGridRegisterPipeProcessor(apiRef,"rowHeight",addDetailHeight);const isFirstRender=react.useRef(!0);isFirstRender.current&&(isFirstRender.current=!1,updateCachesIfNeeded())})(apiRef,props),(apiRef=>{const lookup=react.useRef({}),setCellColSpanInfo=react.useCallback(((rowId,columnIndex,cellColSpanInfo)=>{const sizes=lookup.current;sizes[rowId]||(sizes[rowId]={}),sizes[rowId][columnIndex]=cellColSpanInfo}),[]),getCellColSpanInfo=react.useCallback(((rowId,columnIndex)=>{var _lookup$current$rowId;return null==(_lookup$current$rowId=lookup.current[rowId])?void 0:_lookup$current$rowId[columnIndex]}),[]),calculateCellColSpan=react.useCallback((params=>{const{columnIndex,rowId,minFirstColumnIndex,maxLastColumnIndex,columns}=params,columnsLength=columns.length,column=columns[columnIndex],colSpan="function"==typeof column.colSpan?column.colSpan(apiRef.current.getCellParams(rowId,column.field)):column.colSpan;if(!colSpan||1===colSpan)return setCellColSpanInfo(rowId,columnIndex,{spannedByColSpan:!1,cellProps:{colSpan:1,width:column.computedWidth}}),{colSpan:1};let width=column.computedWidth;for(let j=1;j<colSpan;j+=1){const nextColumnIndex=columnIndex+j;nextColumnIndex>=minFirstColumnIndex&&nextColumnIndex<maxLastColumnIndex&&(width+=columns[nextColumnIndex].computedWidth,setCellColSpanInfo(rowId,columnIndex+j,{spannedByColSpan:!0,rightVisibleCellIndex:Math.min(columnIndex+colSpan,columnsLength-1),leftVisibleCellIndex:columnIndex})),setCellColSpanInfo(rowId,columnIndex,{spannedByColSpan:!1,cellProps:{colSpan,width}})}return{colSpan}}),[apiRef,setCellColSpanInfo]),calculateColSpan=react.useCallback((({rowId,minFirstColumn,maxLastColumn,columns})=>{for(let i=minFirstColumn;i<maxLastColumn;i+=1){const cellProps=calculateCellColSpan({columnIndex:i,rowId,minFirstColumnIndex:minFirstColumn,maxLastColumnIndex:maxLastColumn,columns});cellProps.colSpan>1&&(i+=cellProps.colSpan-1)}}),[calculateCellColSpan]),columnSpanningPrivateApi={calculateColSpan};useGridApiMethod(apiRef,{unstable_getCellColSpanInfo:getCellColSpanInfo},"public"),useGridApiMethod(apiRef,columnSpanningPrivateApi,"private");const handleColumnReorderChange=react.useCallback((()=>{lookup.current={}}),[]);useGridApiEventHandler(apiRef,"columnOrderChange",handleColumnReorderChange)})(apiRef),((apiRef,props)=>{var _props$experimentalFe3;const getColumnGroupPath=react.useCallback((field=>{var _unwrappedGroupingMod3;return null!=(_unwrappedGroupingMod3=gridColumnGroupsUnwrappedModelSelector(apiRef)[field])?_unwrappedGroupingMod3:[]}),[apiRef]),getAllGroupDetails=react.useCallback((()=>gridColumnGroupsLookupSelector(apiRef)),[apiRef]);useGridApiMethod(apiRef,{unstable_getColumnGroupPath:getColumnGroupPath,unstable_getAllGroupDetails:getAllGroupDetails},"public");const handleColumnIndexChange=react.useCallback((()=>{var _props$columnGrouping3;const unwrappedGroupingModel=unwrapGroupingColumnModel(null!=(_props$columnGrouping3=props.columnGroupingModel)?_props$columnGrouping3:[]);apiRef.current.setState((state=>{var _state$columns$ordere,_state$columns;const orderedFields=null!=(_state$columns$ordere=null==(_state$columns=state.columns)?void 0:_state$columns.orderedFields)?_state$columns$ordere:[],columnGroupsHeaderStructure=getColumnGroupsHeaderStructure(orderedFields,unwrappedGroupingModel);return(0,esm_extends.Z)({},state,{columnGrouping:(0,esm_extends.Z)({},state.columnGrouping,{headerStructure:columnGroupsHeaderStructure})})}))}),[apiRef,props.columnGroupingModel]),updateColumnGroupingState=react.useCallback((columnGroupingModel=>{var _props$experimentalFe2;if(null==(_props$experimentalFe2=props.experimentalFeatures)||!_props$experimentalFe2.columnGrouping)return;const columnFields=gridColumnFieldsSelector(apiRef),visibleColumnFields=gridVisibleColumnFieldsSelector(apiRef),groupLookup=createGroupLookup(null!=columnGroupingModel?columnGroupingModel:[]),unwrappedGroupingModel=unwrapGroupingColumnModel(null!=columnGroupingModel?columnGroupingModel:[]),columnGroupsHeaderStructure=getColumnGroupsHeaderStructure(columnFields,unwrappedGroupingModel),maxDepth=0===visibleColumnFields.length?0:Math.max(...visibleColumnFields.map((field=>{var _unwrappedGroupingMod4,_unwrappedGroupingMod5;return null!=(_unwrappedGroupingMod4=null==(_unwrappedGroupingMod5=unwrappedGroupingModel[field])?void 0:_unwrappedGroupingMod5.length)?_unwrappedGroupingMod4:0})));apiRef.current.setState((state=>(0,esm_extends.Z)({},state,{columnGrouping:{lookup:groupLookup,unwrappedGroupingModel,headerStructure:columnGroupsHeaderStructure,maxDepth}})))}),[apiRef,null==(_props$experimentalFe3=props.experimentalFeatures)?void 0:_props$experimentalFe3.columnGrouping]);useGridApiEventHandler(apiRef,"columnIndexChange",handleColumnIndexChange),useGridApiEventHandler(apiRef,"columnsChange",(()=>{updateColumnGroupingState(props.columnGroupingModel)})),useGridApiEventHandler(apiRef,"columnVisibilityModelChange",(()=>{updateColumnGroupingState(props.columnGroupingModel)})),react.useEffect((()=>{updateColumnGroupingState(props.columnGroupingModel)}),[updateColumnGroupingState,props.columnGroupingModel])})(apiRef,props),useGridEditing(apiRef,props),((apiRef,props)=>{const logger=useGridLogger(apiRef,"useGridFocus"),lastClickedCell=react.useRef(null),publishCellFocusOut=react.useCallback(((cell,event)=>{cell&&apiRef.current.getRow(cell.id)&&apiRef.current.publishEvent("cellFocusOut",apiRef.current.getCellParams(cell.id,cell.field),event)}),[apiRef]),setCellFocus=react.useCallback(((id,field)=>{const focusedCell=gridFocusCellSelector(apiRef);(null==focusedCell?void 0:focusedCell.id)===id&&(null==focusedCell?void 0:focusedCell.field)===field||(apiRef.current.setState((state=>(logger.debug(`Focusing on cell with id=${id} and field=${field}`),(0,esm_extends.Z)({},state,{tabIndex:{cell:{id,field},columnHeader:null,columnHeaderFilter:null,columnGroupHeader:null},focus:{cell:{id,field},columnHeader:null,columnHeaderFilter:null,columnGroupHeader:null}})))),apiRef.current.forceUpdate(),apiRef.current.getRow(id)&&(focusedCell&&publishCellFocusOut(focusedCell,{}),apiRef.current.publishEvent("cellFocusIn",apiRef.current.getCellParams(id,field))))}),[apiRef,logger,publishCellFocusOut]),setColumnHeaderFocus=react.useCallback(((field,event={})=>{const cell=gridFocusCellSelector(apiRef);publishCellFocusOut(cell,event),apiRef.current.setState((state=>(logger.debug(`Focusing on column header with colIndex=${field}`),(0,esm_extends.Z)({},state,{tabIndex:{columnHeader:{field},columnHeaderFilter:null,cell:null,columnGroupHeader:null},focus:{columnHeader:{field},columnHeaderFilter:null,cell:null,columnGroupHeader:null}})))),apiRef.current.forceUpdate()}),[apiRef,logger,publishCellFocusOut]),setColumnHeaderFilterFocus=react.useCallback(((field,event={})=>{const cell=gridFocusCellSelector(apiRef);publishCellFocusOut(cell,event),apiRef.current.setState((state=>(logger.debug(`Focusing on column header filter with colIndex=${field}`),(0,esm_extends.Z)({},state,{tabIndex:{columnHeader:null,columnHeaderFilter:{field},cell:null,columnGroupHeader:null},focus:{columnHeader:null,columnHeaderFilter:{field},cell:null,columnGroupHeader:null}})))),apiRef.current.forceUpdate()}),[apiRef,logger,publishCellFocusOut]),setColumnGroupHeaderFocus=react.useCallback(((field,depth,event={})=>{const cell=gridFocusCellSelector(apiRef);cell&&apiRef.current.publishEvent("cellFocusOut",apiRef.current.getCellParams(cell.id,cell.field),event),apiRef.current.setState((state=>(0,esm_extends.Z)({},state,{tabIndex:{columnGroupHeader:{field,depth},columnHeader:null,columnHeaderFilter:null,cell:null},focus:{columnGroupHeader:{field,depth},columnHeader:null,columnHeaderFilter:null,cell:null}}))),apiRef.current.forceUpdate()}),[apiRef]),getColumnGroupHeaderFocus=react.useCallback((()=>unstable_gridFocusColumnGroupHeaderSelector(apiRef)),[apiRef]),moveFocusToRelativeCell=react.useCallback(((id,field,direction)=>{let columnIndexToFocus=apiRef.current.getColumnIndex(field);const visibleColumns=gridVisibleColumnDefinitionsSelector(apiRef),currentPage=getVisibleRows(apiRef,{pagination:props.pagination,paginationMode:props.paginationMode}),pinnedRows=gridPinnedRowsSelector(apiRef),currentPageRows=[].concat(pinnedRows.top||[],currentPage.rows,pinnedRows.bottom||[]);let rowIndexToFocus=currentPageRows.findIndex((row=>row.id===id));"right"===direction?columnIndexToFocus+=1:"left"===direction?columnIndexToFocus-=1:rowIndexToFocus+=1,columnIndexToFocus>=visibleColumns.length?(rowIndexToFocus+=1,rowIndexToFocus<currentPageRows.length&&(columnIndexToFocus=0)):columnIndexToFocus<0&&(rowIndexToFocus-=1,rowIndexToFocus>=0&&(columnIndexToFocus=visibleColumns.length-1)),rowIndexToFocus=clamp(rowIndexToFocus,0,currentPageRows.length-1);const rowToFocus=currentPageRows[rowIndexToFocus];if(!rowToFocus)return;const colSpanInfo=apiRef.current.unstable_getCellColSpanInfo(rowToFocus.id,columnIndexToFocus);colSpanInfo&&colSpanInfo.spannedByColSpan&&("left"===direction||"below"===direction?columnIndexToFocus=colSpanInfo.leftVisibleCellIndex:"right"===direction&&(columnIndexToFocus=colSpanInfo.rightVisibleCellIndex)),columnIndexToFocus=clamp(columnIndexToFocus,0,visibleColumns.length-1);const columnToFocus=visibleColumns[columnIndexToFocus];apiRef.current.setCellFocus(rowToFocus.id,columnToFocus.field)}),[apiRef,props.pagination,props.paginationMode]),handleCellDoubleClick=react.useCallback((({id,field})=>{apiRef.current.setCellFocus(id,field)}),[apiRef]),handleCellKeyDown=react.useCallback(((params,event)=>{"Enter"===event.key||"Tab"===event.key||"Shift"===event.key||isNavigationKey(event.key)||apiRef.current.setCellFocus(params.id,params.field)}),[apiRef]),handleColumnHeaderFocus=react.useCallback((({field},event)=>{event.target===event.currentTarget&&apiRef.current.setColumnHeaderFocus(field,event)}),[apiRef]),focussedColumnGroup=unstable_gridFocusColumnGroupHeaderSelector(apiRef),handleColumnGroupHeaderFocus=react.useCallback((({fields,depth},event)=>{event.target===event.currentTarget&&(null!==focussedColumnGroup&&focussedColumnGroup.depth===depth&&fields.includes(focussedColumnGroup.field)||apiRef.current.setColumnGroupHeaderFocus(fields[0],depth,event))}),[apiRef,focussedColumnGroup]),handleBlur=react.useCallback((()=>{logger.debug("Clearing focus"),apiRef.current.setState((state=>(0,esm_extends.Z)({},state,{focus:{cell:null,columnHeader:null,columnHeaderFilter:null,columnGroupHeader:null}})))}),[logger,apiRef]),handleCellMouseDown=react.useCallback((params=>{lastClickedCell.current=params}),[]),handleDocumentClick=react.useCallback((event=>{const cellParams=lastClickedCell.current;lastClickedCell.current=null;const focusedCell=gridFocusCellSelector(apiRef);if(!apiRef.current.unstable_applyPipeProcessors("canUpdateFocus",!0,{event,cell:cellParams}))return;if(!focusedCell)return void(cellParams&&apiRef.current.setCellFocus(cellParams.id,cellParams.field));if((null==cellParams?void 0:cellParams.id)===focusedCell.id&&(null==cellParams?void 0:cellParams.field)===focusedCell.field)return;const cellElement=apiRef.current.getCellElement(focusedCell.id,focusedCell.field);null!=cellElement&&cellElement.contains(event.target)||(cellParams?apiRef.current.setCellFocus(cellParams.id,cellParams.field):(apiRef.current.setState((state=>(0,esm_extends.Z)({},state,{focus:{cell:null,columnHeader:null,columnHeaderFilter:null,columnGroupHeader:null}}))),apiRef.current.forceUpdate(),publishCellFocusOut(focusedCell,event)))}),[apiRef,publishCellFocusOut]),handleCellModeChange=react.useCallback((params=>{if("view"===params.cellMode)return;const cell=gridFocusCellSelector(apiRef);(null==cell?void 0:cell.id)===params.id&&(null==cell?void 0:cell.field)===params.field||apiRef.current.setCellFocus(params.id,params.field)}),[apiRef]),handleRowSet=react.useCallback((()=>{const cell=gridFocusCellSelector(apiRef);cell&&!apiRef.current.getRow(cell.id)&&apiRef.current.setState((state=>(0,esm_extends.Z)({},state,{focus:{cell:null,columnHeader:null,columnHeaderFilter:null,columnGroupHeader:null}})))}),[apiRef]),focusPrivateApi={moveFocusToRelativeCell,setColumnGroupHeaderFocus,getColumnGroupHeaderFocus};useGridApiMethod(apiRef,{setCellFocus,setColumnHeaderFocus,setColumnHeaderFilterFocus},"public"),useGridApiMethod(apiRef,focusPrivateApi,"private"),react.useEffect((()=>{const doc=(0,ownerDocument.Z)(apiRef.current.rootElementRef.current);return doc.addEventListener("mouseup",handleDocumentClick),()=>{doc.removeEventListener("mouseup",handleDocumentClick)}}),[apiRef,handleDocumentClick]),useGridApiEventHandler(apiRef,"columnHeaderBlur",handleBlur),useGridApiEventHandler(apiRef,"headerFilterBlur",handleBlur),useGridApiEventHandler(apiRef,"cellDoubleClick",handleCellDoubleClick),useGridApiEventHandler(apiRef,"cellMouseDown",handleCellMouseDown),useGridApiEventHandler(apiRef,"cellKeyDown",handleCellKeyDown),useGridApiEventHandler(apiRef,"cellModeChange",handleCellModeChange),useGridApiEventHandler(apiRef,"columnHeaderFocus",handleColumnHeaderFocus),useGridApiEventHandler(apiRef,"columnGroupHeaderFocus",handleColumnGroupHeaderFocus),useGridApiEventHandler(apiRef,"rowsSet",handleRowSet)})(apiRef,props),((apiRef,props)=>{var _props$initialState3;const logger=useGridLogger(apiRef,"useGridPreferencesPanel"),hideTimeout=react.useRef(),immediateTimeout=react.useRef(),hidePreferences=react.useCallback((()=>{logger.debug("Hiding Preferences Panel");const preferencePanelState=gridPreferencePanelStateSelector(apiRef.current.state);preferencePanelState.openedPanelValue&&apiRef.current.publishEvent("preferencePanelClose",{openedPanelValue:preferencePanelState.openedPanelValue}),apiRef.current.setState((state=>(0,esm_extends.Z)({},state,{preferencePanel:{open:!1}}))),apiRef.current.forceUpdate()}),[apiRef,logger]),doNotHidePanel=react.useCallback((()=>{immediateTimeout.current=setTimeout((()=>clearTimeout(hideTimeout.current)),0)}),[]),hidePreferencesDelayed=react.useCallback((()=>{hideTimeout.current=setTimeout(hidePreferences,100)}),[hidePreferences]),showPreferences=react.useCallback(((newValue,panelId,labelId)=>{logger.debug("Opening Preferences Panel"),doNotHidePanel(),apiRef.current.setState((state=>(0,esm_extends.Z)({},state,{preferencePanel:(0,esm_extends.Z)({},state.preferencePanel,{open:!0,openedPanelValue:newValue,panelId,labelId})}))),apiRef.current.publishEvent("preferencePanelOpen",{openedPanelValue:newValue}),apiRef.current.forceUpdate()}),[logger,doNotHidePanel,apiRef]);useGridApiMethod(apiRef,{showPreferences,hidePreferences:hidePreferencesDelayed},"public");const stateExportPreProcessing=react.useCallback(((prevState,context)=>{var _props$initialState2;const preferencePanelToExport=gridPreferencePanelStateSelector(apiRef.current.state);return!context.exportOnlyDirtyModels||null!=(null==(_props$initialState2=props.initialState)?void 0:_props$initialState2.preferencePanel)||preferencePanelToExport.open?(0,esm_extends.Z)({},prevState,{preferencePanel:preferencePanelToExport}):prevState}),[apiRef,null==(_props$initialState3=props.initialState)?void 0:_props$initialState3.preferencePanel]),stateRestorePreProcessing=react.useCallback(((params,context)=>{const preferencePanel=context.stateToRestore.preferencePanel;return null!=preferencePanel&&apiRef.current.setState((state=>(0,esm_extends.Z)({},state,{preferencePanel}))),params}),[apiRef]);useGridRegisterPipeProcessor(apiRef,"exportState",stateExportPreProcessing),useGridRegisterPipeProcessor(apiRef,"restoreState",stateRestorePreProcessing),react.useEffect((()=>()=>{clearTimeout(hideTimeout.current),clearTimeout(immediateTimeout.current)}),[])})(apiRef,props),((apiRef,props)=>{var _props$initialState3,_props$initialState3$,_props$slotProps2;const logger=useGridLogger(apiRef,"useGridFilter");apiRef.current.registerControlState({stateId:"filter",propModel:props.filterModel,propOnChange:props.onFilterModelChange,stateSelector:gridFilterModelSelector,changeEvent:"filterModelChange"});const updateFilteredRows=react.useCallback((()=>{apiRef.current.setState((state=>{const filterModel=gridFilterModelSelector(state,apiRef.current.instanceId),isRowMatchingFilters="client"===props.filterMode?buildAggregatedFilterApplier(filterModel,apiRef):null,filteringResult=apiRef.current.applyStrategyProcessor("filtering",{isRowMatchingFilters,filterModel:null!=filterModel?filterModel:getDefaultGridFilterModel()}),newState=(0,esm_extends.Z)({},state,{filter:(0,esm_extends.Z)({},state.filter,filteringResult)}),visibleRowsLookupState=getVisibleRowsLookupState(apiRef,newState);return(0,esm_extends.Z)({},newState,{visibleRowsLookup:visibleRowsLookupState})})),apiRef.current.publishEvent("filteredRowsSet")}),[props.filterMode,apiRef]),addColumnMenuItem=react.useCallback(((columnMenuItems,colDef)=>null==colDef||!1===colDef.filterable||props.disableColumnFilter?columnMenuItems:[...columnMenuItems,"columnMenuFilterItem"]),[props.disableColumnFilter]),applyFilters=react.useCallback((()=>{updateFilteredRows(),apiRef.current.forceUpdate()}),[apiRef,updateFilteredRows]),upsertFilterItem=react.useCallback((item=>{const filterModel=gridFilterModelSelector(apiRef),items=[...filterModel.items],itemIndex=items.findIndex((filterItem=>filterItem.id===item.id));-1===itemIndex?items.push(item):items[itemIndex]=item,apiRef.current.setFilterModel((0,esm_extends.Z)({},filterModel,{items}),"upsertFilterItem")}),[apiRef]),upsertFilterItems=react.useCallback((items=>{const filterModel=gridFilterModelSelector(apiRef),existingItems=[...filterModel.items];items.forEach((item=>{const itemIndex=items.findIndex((filterItem=>filterItem.id===item.id));-1===itemIndex?existingItems.push(item):existingItems[itemIndex]=item})),apiRef.current.setFilterModel((0,esm_extends.Z)({},filterModel,{items}),"upsertFilterItems")}),[apiRef]),deleteFilterItem=react.useCallback((itemToDelete=>{const filterModel=gridFilterModelSelector(apiRef),items=filterModel.items.filter((item=>item.id!==itemToDelete.id));items.length!==filterModel.items.length&&apiRef.current.setFilterModel((0,esm_extends.Z)({},filterModel,{items}),"deleteFilterItem")}),[apiRef]),showFilterPanel=react.useCallback(((targetColumnField,panelId,labelId)=>{if(logger.debug("Displaying filter panel"),targetColumnField){const filterModel=gridFilterModelSelector(apiRef),filterItemsWithValue=filterModel.items.filter((item=>{var _column$filterOperato;if(void 0!==item.value)return!Array.isArray(item.value)||0!==item.value.length;const filterOperator=null==(_column$filterOperato=apiRef.current.getColumn(item.field).filterOperators)?void 0:_column$filterOperato.find((operator=>operator.value===item.operator));return!(void 0===(null==filterOperator?void 0:filterOperator.requiresFilterValue)||(null==filterOperator?void 0:filterOperator.requiresFilterValue))}));let newFilterItems;const filterItemOnTarget=filterItemsWithValue.find((item=>item.field===targetColumnField)),targetColumn=apiRef.current.getColumn(targetColumnField);newFilterItems=filterItemOnTarget?filterItemsWithValue:props.disableMultipleColumnsFiltering?[cleanFilterItem({field:targetColumnField,operator:targetColumn.filterOperators[0].value},apiRef)]:[...filterItemsWithValue,cleanFilterItem({field:targetColumnField,operator:targetColumn.filterOperators[0].value},apiRef)],apiRef.current.setFilterModel((0,esm_extends.Z)({},filterModel,{items:newFilterItems}))}apiRef.current.showPreferences(GridPreferencePanelsValue.filters,panelId,labelId)}),[apiRef,logger,props.disableMultipleColumnsFiltering]),hideFilterPanel=react.useCallback((()=>{logger.debug("Hiding filter panel"),apiRef.current.hidePreferences()}),[apiRef,logger]),setFilterLogicOperator=react.useCallback((logicOperator=>{const filterModel=gridFilterModelSelector(apiRef);filterModel.logicOperator!==logicOperator&&apiRef.current.setFilterModel((0,esm_extends.Z)({},filterModel,{logicOperator}),"changeLogicOperator")}),[apiRef]),setQuickFilterValues=react.useCallback((values=>{const filterModel=gridFilterModelSelector(apiRef);isDeepEqual(filterModel.quickFilterValues,values)||apiRef.current.setFilterModel((0,esm_extends.Z)({},filterModel,{quickFilterValues:[...values]}))}),[apiRef]),setFilterModel=react.useCallback(((model,reason)=>{gridFilterModelSelector(apiRef)!==model&&(logger.debug("Setting filter model"),apiRef.current.updateControlState("filter",mergeStateWithFilterModel(model,props.disableMultipleColumnsFiltering,apiRef),reason),apiRef.current.unstable_applyFilters())}),[apiRef,logger,props.disableMultipleColumnsFiltering]);useGridApiMethod(apiRef,{setFilterLogicOperator,unstable_applyFilters:applyFilters,deleteFilterItem,upsertFilterItem,upsertFilterItems,setFilterModel,showFilterPanel,hideFilterPanel,setQuickFilterValues},"public");const stateExportPreProcessing=react.useCallback(((prevState,context)=>{var _props$initialState2,_props$initialState2$;const filterModelToExport=gridFilterModelSelector(apiRef);return context.exportOnlyDirtyModels&&null==props.filterModel&&null==(null==(_props$initialState2=props.initialState)||null==(_props$initialState2$=_props$initialState2.filter)?void 0:_props$initialState2$.filterModel)&&isDeepEqual(filterModelToExport,getDefaultGridFilterModel())?prevState:(0,esm_extends.Z)({},prevState,{filter:{filterModel:filterModelToExport}})}),[apiRef,props.filterModel,null==(_props$initialState3=props.initialState)||null==(_props$initialState3$=_props$initialState3.filter)?void 0:_props$initialState3$.filterModel]),stateRestorePreProcessing=react.useCallback(((params,context)=>{var _context$stateToResto;const filterModel=null==(_context$stateToResto=context.stateToRestore.filter)?void 0:_context$stateToResto.filterModel;return null==filterModel?params:(apiRef.current.updateControlState("filter",mergeStateWithFilterModel(filterModel,props.disableMultipleColumnsFiltering,apiRef),"restoreState"),(0,esm_extends.Z)({},params,{callbacks:[...params.callbacks,apiRef.current.unstable_applyFilters]}))}),[apiRef,props.disableMultipleColumnsFiltering]),preferencePanelPreProcessing=react.useCallback(((initialValue,value)=>{if(value===GridPreferencePanelsValue.filters){var _props$slotProps;const FilterPanel=props.slots.filterPanel;return(0,jsx_runtime.jsx)(FilterPanel,(0,esm_extends.Z)({},null==(_props$slotProps=props.slotProps)?void 0:_props$slotProps.filterPanel))}return initialValue}),[props.slots.filterPanel,null==(_props$slotProps2=props.slotProps)?void 0:_props$slotProps2.filterPanel]),flatFilteringMethod=react.useCallback((params=>{if("client"===props.filterMode&&params.isRowMatchingFilters){const rowIds=gridRowTreeSelector(apiRef)[GRID_ROOT_GROUP_ID].children,filteredRowsLookup={};for(let i=0;i<rowIds.length;i+=1){const rowId=rowIds[i];let isRowPassing;if("string"==typeof rowId&&rowId.startsWith("auto-generated-group-footer"))isRowPassing=!0;else{const{passingFilterItems,passingQuickFilterValues}=params.isRowMatchingFilters(rowId);isRowPassing=passFilterLogic([passingFilterItems],[passingQuickFilterValues],params.filterModel,apiRef)}filteredRowsLookup[rowId]=isRowPassing}return{filteredRowsLookup,filteredDescendantCountLookup:{}}}return{filteredRowsLookup:{},filteredDescendantCountLookup:{}}}),[apiRef,props.filterMode]);useGridRegisterPipeProcessor(apiRef,"columnMenu",addColumnMenuItem),useGridRegisterPipeProcessor(apiRef,"exportState",stateExportPreProcessing),useGridRegisterPipeProcessor(apiRef,"restoreState",stateRestorePreProcessing),useGridRegisterPipeProcessor(apiRef,"preferencePanel",preferencePanelPreProcessing),useGridRegisterStrategyProcessor(apiRef,"none","filtering",flatFilteringMethod),useGridRegisterStrategyProcessor(apiRef,"none","visibleRowsLookupCreation",getVisibleRowsLookup);const handleColumnsChange=react.useCallback((()=>{logger.debug("onColUpdated - GridColumns changed, applying filters");const filterModel=gridFilterModelSelector(apiRef),filterableColumnsLookup=gridFilterableColumnLookupSelector(apiRef),newFilterItems=filterModel.items.filter((item=>item.field&&filterableColumnsLookup[item.field]));newFilterItems.length<filterModel.items.length&&apiRef.current.setFilterModel((0,esm_extends.Z)({},filterModel,{items:newFilterItems}))}),[apiRef,logger]),handleStrategyProcessorChange=react.useCallback((methodName=>{"filtering"===methodName&&apiRef.current.unstable_applyFilters()}),[apiRef]),updateVisibleRowsLookupState=react.useCallback((()=>{apiRef.current.setState((state=>(0,esm_extends.Z)({},state,{visibleRowsLookup:getVisibleRowsLookupState(apiRef,state)}))),apiRef.current.forceUpdate()}),[apiRef]);useGridApiEventHandler(apiRef,"rowsSet",updateFilteredRows),useGridApiEventHandler(apiRef,"columnsChange",handleColumnsChange),useGridApiEventHandler(apiRef,"activeStrategyProcessorChange",handleStrategyProcessorChange),useGridApiEventHandler(apiRef,"rowExpansionChange",updateVisibleRowsLookupState),useFirstRender((()=>{apiRef.current.unstable_applyFilters()})),(0,useEnhancedEffect.Z)((()=>{void 0!==props.filterModel&&apiRef.current.setFilterModel(props.filterModel)}),[apiRef,logger,props.filterModel])})(apiRef,props),((apiRef,props)=>{var _props$initialState3,_props$initialState3$;const logger=useGridLogger(apiRef,"useGridSorting");apiRef.current.registerControlState({stateId:"sortModel",propModel:props.sortModel,propOnChange:props.onSortModelChange,stateSelector:gridSortModelSelector,changeEvent:"sortModelChange"});const upsertSortModel=react.useCallback(((field,sortItem)=>{const sortModel=gridSortModelSelector(apiRef),existingIdx=sortModel.findIndex((c=>c.field===field));let newSortModel=[...sortModel];return existingIdx>-1?sortItem?newSortModel.splice(existingIdx,1,sortItem):newSortModel.splice(existingIdx,1):newSortModel=[...sortModel,sortItem],newSortModel}),[apiRef]),createSortItem=react.useCallback(((col,directionOverride)=>{var _col$sortingOrder2;const existing=gridSortModelSelector(apiRef).find((c=>c.field===col.field));if(existing){var _col$sortingOrder;const nextSort=void 0===directionOverride?getNextGridSortDirection(null!=(_col$sortingOrder=col.sortingOrder)?_col$sortingOrder:props.sortingOrder,existing.sort):directionOverride;return null==nextSort?void 0:(0,esm_extends.Z)({},existing,{sort:nextSort})}return{field:col.field,sort:void 0===directionOverride?getNextGridSortDirection(null!=(_col$sortingOrder2=col.sortingOrder)?_col$sortingOrder2:props.sortingOrder):directionOverride}}),[apiRef,props.sortingOrder]),addColumnMenuItem=react.useCallback(((columnMenuItems,colDef)=>null==colDef||!1===colDef.sortable?columnMenuItems:(colDef.sortingOrder||props.sortingOrder).some((item=>!!item))?[...columnMenuItems,"columnMenuSortItem"]:columnMenuItems),[props.sortingOrder]),applySorting=react.useCallback((()=>{apiRef.current.setState((state=>{if("server"===props.sortingMode)return logger.debug("Skipping sorting rows as sortingMode = server"),(0,esm_extends.Z)({},state,{sorting:(0,esm_extends.Z)({},state.sorting,{sortedRows:getTreeNodeDescendants(gridRowTreeSelector(apiRef),GRID_ROOT_GROUP_ID,!1)})});const sortRowList=((sortModel,apiRef)=>{const comparatorList=sortModel.map((item=>((sortItem,apiRef)=>{const column=apiRef.current.getColumn(sortItem.field);return column?{getSortCellParams:id=>({id,field:column.field,rowNode:apiRef.current.getRowNode(id),value:apiRef.current.getCellValue(id,column.field),api:apiRef.current}),comparator:"desc"===sortItem.sort?(...args)=>-1*column.sortComparator(...args):column.sortComparator}:null})(item,apiRef))).filter((comparator=>!!comparator));return 0===comparatorList.length?null:rowList=>rowList.map((node=>({node,params:comparatorList.map((el=>el.getSortCellParams(node.id)))}))).sort(((a,b)=>{return row1=a,row2=b,comparatorList.reduce(((res,item,index)=>{if(0!==res)return res;const sortCellParams1=row1.params[index],sortCellParams2=row2.params[index];return item.comparator(sortCellParams1.value,sortCellParams2.value,sortCellParams1,sortCellParams2)}),0);var row1,row2})).map((row=>row.node.id))})(gridSortModelSelector(state,apiRef.current.instanceId),apiRef),sortedRows=apiRef.current.applyStrategyProcessor("sorting",{sortRowList});return(0,esm_extends.Z)({},state,{sorting:(0,esm_extends.Z)({},state.sorting,{sortedRows})})})),apiRef.current.publishEvent("sortedRowsSet"),apiRef.current.forceUpdate()}),[apiRef,logger,props.sortingMode]),setSortModel=react.useCallback((model=>{gridSortModelSelector(apiRef)!==model&&(logger.debug("Setting sort model"),apiRef.current.setState(mergeStateWithSortModel(model,props.disableMultipleColumnsSorting)),apiRef.current.forceUpdate(),apiRef.current.applySorting())}),[apiRef,logger,props.disableMultipleColumnsSorting]),sortColumn=react.useCallback(((column,direction,allowMultipleSorting)=>{if(!column.sortable)return;const sortItem=createSortItem(column,direction);let sortModel;sortModel=!allowMultipleSorting||props.disableMultipleColumnsSorting?sortItem?[sortItem]:[]:upsertSortModel(column.field,sortItem),apiRef.current.setSortModel(sortModel)}),[apiRef,upsertSortModel,createSortItem,props.disableMultipleColumnsSorting]),getSortModel=react.useCallback((()=>gridSortModelSelector(apiRef)),[apiRef]),getSortedRows=react.useCallback((()=>gridSortedRowEntriesSelector(apiRef).map((row=>row.model))),[apiRef]),getSortedRowIds=react.useCallback((()=>gridSortedRowIdsSelector(apiRef)),[apiRef]),getRowIdFromRowIndex=react.useCallback((index=>apiRef.current.getSortedRowIds()[index]),[apiRef]);useGridApiMethod(apiRef,{getSortModel,getSortedRows,getSortedRowIds,getRowIdFromRowIndex,setSortModel,sortColumn,applySorting},"public");const stateExportPreProcessing=react.useCallback(((prevState,context)=>{var _props$initialState2,_props$initialState2$;const sortModelToExport=gridSortModelSelector(apiRef);return!context.exportOnlyDirtyModels||null!=props.sortModel||null!=(null==(_props$initialState2=props.initialState)||null==(_props$initialState2$=_props$initialState2.sorting)?void 0:_props$initialState2$.sortModel)||sortModelToExport.length>0?(0,esm_extends.Z)({},prevState,{sorting:{sortModel:sortModelToExport}}):prevState}),[apiRef,props.sortModel,null==(_props$initialState3=props.initialState)||null==(_props$initialState3$=_props$initialState3.sorting)?void 0:_props$initialState3$.sortModel]),stateRestorePreProcessing=react.useCallback(((params,context)=>{var _context$stateToResto;const sortModel=null==(_context$stateToResto=context.stateToRestore.sorting)?void 0:_context$stateToResto.sortModel;return null==sortModel?params:(apiRef.current.setState(mergeStateWithSortModel(sortModel,props.disableMultipleColumnsSorting)),(0,esm_extends.Z)({},params,{callbacks:[...params.callbacks,apiRef.current.applySorting]}))}),[apiRef,props.disableMultipleColumnsSorting]),flatSortingMethod=react.useCallback((params=>{const rowTree=gridRowTreeSelector(apiRef),rootGroupNode=rowTree[GRID_ROOT_GROUP_ID],sortedChildren=params.sortRowList?params.sortRowList(rootGroupNode.children.map((childId=>rowTree[childId]))):[...rootGroupNode.children];return null!=rootGroupNode.footerId&&sortedChildren.push(rootGroupNode.footerId),sortedChildren}),[apiRef]);useGridRegisterPipeProcessor(apiRef,"exportState",stateExportPreProcessing),useGridRegisterPipeProcessor(apiRef,"restoreState",stateRestorePreProcessing),useGridRegisterStrategyProcessor(apiRef,"none","sorting",flatSortingMethod);const handleColumnHeaderClick=react.useCallback((({colDef},event)=>{const allowMultipleSorting=event.shiftKey||event.metaKey||event.ctrlKey;sortColumn(colDef,void 0,allowMultipleSorting)}),[sortColumn]),handleColumnHeaderKeyDown=react.useCallback((({colDef},event)=>{!isEnterKey(event.key)||event.ctrlKey||event.metaKey||sortColumn(colDef,void 0,event.shiftKey)}),[sortColumn]),handleColumnsChange=react.useCallback((()=>{const sortModel=gridSortModelSelector(apiRef),latestColumns=gridColumnLookupSelector(apiRef);if(sortModel.length>0){const newModel=sortModel.filter((sortItem=>latestColumns[sortItem.field]));newModel.length<sortModel.length&&apiRef.current.setSortModel(newModel)}}),[apiRef]),handleStrategyProcessorChange=react.useCallback((methodName=>{"sorting"===methodName&&apiRef.current.applySorting()}),[apiRef]);useGridRegisterPipeProcessor(apiRef,"columnMenu",addColumnMenuItem),useGridApiEventHandler(apiRef,"columnHeaderClick",handleColumnHeaderClick),useGridApiEventHandler(apiRef,"columnHeaderKeyDown",handleColumnHeaderKeyDown),useGridApiEventHandler(apiRef,"rowsSet",apiRef.current.applySorting),useGridApiEventHandler(apiRef,"columnsChange",handleColumnsChange),useGridApiEventHandler(apiRef,"activeStrategyProcessorChange",handleStrategyProcessorChange),useFirstRender((()=>{apiRef.current.applySorting()})),(0,useEnhancedEffect.Z)((()=>{void 0!==props.sortModel&&apiRef.current.setSortModel(props.sortModel)}),[apiRef,props.sortModel])})(apiRef,props),((apiRef,props)=>{const logger=useGridLogger(apiRef,"useDensity"),setDensity=react.useCallback((newDensity=>{logger.debug(`Set grid density to ${newDensity}`),apiRef.current.setState((state=>{const currentDensityState=gridDensitySelector(state),newDensityState={value:newDensity,factor:DENSITY_FACTORS[newDensity]};return isDeepEqual(currentDensityState,newDensityState)?state:(0,esm_extends.Z)({},state,{density:newDensityState})})),apiRef.current.forceUpdate()}),[logger,apiRef]);react.useEffect((()=>{apiRef.current.setDensity(props.density)}),[apiRef,props.density]),useGridApiMethod(apiRef,{setDensity},"public")})(apiRef,props),useGridColumnReorder(apiRef,props),((apiRef,props)=>{const logger=useGridLogger(apiRef,"useGridColumnResize"),colDefRef=react.useRef(),colElementRef=react.useRef(),headerFilterElementRef=react.useRef(),colGroupingElementRef=react.useRef(),colCellElementsRef=react.useRef(),theme=(0,useTheme.Z)(),initialOffsetToSeparator=react.useRef(),resizeDirection=react.useRef(),stopResizeEventTimeout=react.useRef(),touchId=react.useRef(),updateWidth=newWidth=>{logger.debug(`Updating width to ${newWidth} for col ${colDefRef.current.field}`);const prevWidth=colElementRef.current.offsetWidth,widthDiff=newWidth-prevWidth;colDefRef.current.computedWidth=newWidth,colDefRef.current.width=newWidth,colDefRef.current.flex=0,colElementRef.current.style.width=`${newWidth}px`,colElementRef.current.style.minWidth=`${newWidth}px`,colElementRef.current.style.maxWidth=`${newWidth}px`;const headerFilterElement=headerFilterElementRef.current;headerFilterElement&&(headerFilterElement.style.width=`${newWidth}px`,headerFilterElement.style.minWidth=`${newWidth}px`,headerFilterElement.style.maxWidth=`${newWidth}px`),[...colCellElementsRef.current,...colGroupingElementRef.current].forEach((element=>{const div=element;let finalWidth;finalWidth="1"===div.getAttribute("aria-colspan")?`${newWidth}px`:`${div.offsetWidth+widthDiff}px`,div.style.width=finalWidth,div.style.minWidth=finalWidth,div.style.maxWidth=finalWidth}))},finishResize=nativeEvent=>{stopListening(),apiRef.current.updateColumns([colDefRef.current]),clearTimeout(stopResizeEventTimeout.current),stopResizeEventTimeout.current=setTimeout((()=>{var _colDefRef$current;apiRef.current.publishEvent("columnResizeStop",null,nativeEvent),colDefRef.current&&apiRef.current.publishEvent("columnWidthChange",{element:colElementRef.current,colDef:colDefRef.current,width:null==(_colDefRef$current=colDefRef.current)?void 0:_colDefRef$current.computedWidth},nativeEvent)})),logger.debug(`Updating col ${colDefRef.current.field} with new width: ${colDefRef.current.width}`)},handleResizeMouseUp=(0,useEventCallback.Z)(finishResize),handleResizeMouseMove=(0,useEventCallback.Z)((nativeEvent=>{if(0===nativeEvent.buttons)return void handleResizeMouseUp(nativeEvent);let newWidth=computeNewWidth(initialOffsetToSeparator.current,nativeEvent.clientX,colElementRef.current.getBoundingClientRect(),resizeDirection.current);newWidth=clamp(newWidth,colDefRef.current.minWidth,colDefRef.current.maxWidth),updateWidth(newWidth);const params={element:colElementRef.current,colDef:colDefRef.current,width:newWidth};apiRef.current.publishEvent("columnResize",params,nativeEvent)})),handleColumnResizeMouseDown=(0,useEventCallback.Z)((({colDef},event)=>{var _apiRef$current$colum,_apiRef$current$heade,_apiRef$current$colum2;if(0!==event.button)return;if(!event.currentTarget.classList.contains(gridClasses_gridClasses["columnSeparator--resizable"]))return;event.preventDefault(),logger.debug(`Start Resize on col ${colDef.field}`),apiRef.current.publishEvent("columnResizeStart",{field:colDef.field},event),colDefRef.current=colDef,colElementRef.current=null==(_apiRef$current$colum=apiRef.current.columnHeadersContainerElementRef)?void 0:_apiRef$current$colum.current.querySelector(`[data-field="${colDef.field}"]`);const headerFilterRowElement=null==(_apiRef$current$heade=apiRef.current.headerFiltersElementRef)?void 0:_apiRef$current$heade.current;headerFilterRowElement&&(headerFilterElementRef.current=headerFilterRowElement.querySelector(`[data-field="${colDef.field}"]`)),colGroupingElementRef.current=findGroupHeaderElementsFromField(null==(_apiRef$current$colum2=apiRef.current.columnHeadersContainerElementRef)?void 0:_apiRef$current$colum2.current,colDef.field),colCellElementsRef.current=findGridCellElementsFromCol(colElementRef.current,apiRef.current);const doc=(0,ownerDocument.Z)(apiRef.current.rootElementRef.current);doc.body.style.cursor="col-resize",resizeDirection.current=getResizeDirection(event.currentTarget,theme.direction),initialOffsetToSeparator.current=computeOffsetToSeparator(event.clientX,colElementRef.current.getBoundingClientRect(),resizeDirection.current),doc.addEventListener("mousemove",handleResizeMouseMove),doc.addEventListener("mouseup",handleResizeMouseUp),colElementRef.current.style.pointerEvents="none"})),handleTouchEnd=(0,useEventCallback.Z)((nativeEvent=>{trackFinger(nativeEvent,touchId.current)&&finishResize(nativeEvent)})),handleTouchMove=(0,useEventCallback.Z)((nativeEvent=>{const finger=trackFinger(nativeEvent,touchId.current);if(!finger)return;if("mousemove"===nativeEvent.type&&0===nativeEvent.buttons)return void handleTouchEnd(nativeEvent);let newWidth=computeNewWidth(initialOffsetToSeparator.current,finger.x,colElementRef.current.getBoundingClientRect(),resizeDirection.current);newWidth=clamp(newWidth,colDefRef.current.minWidth,colDefRef.current.maxWidth),updateWidth(newWidth);const params={element:colElementRef.current,colDef:colDefRef.current,width:newWidth};apiRef.current.publishEvent("columnResize",params,nativeEvent)})),handleTouchStart=(0,useEventCallback.Z)((event=>{var _apiRef$current$colum3,_apiRef$current$colum4;if(!findParentElementFromClassName(event.target,gridClasses_gridClasses["columnSeparator--resizable"]))return;doesSupportTouchActionNone()||event.preventDefault();const touch=event.changedTouches[0];null!=touch&&(touchId.current=touch.identifier),colElementRef.current=findParentElementFromClassName(event.target,gridClasses_gridClasses.columnHeader);const field=function getFieldFromHeaderElem(colCellEl){return colCellEl.getAttribute("data-field")}(colElementRef.current),colDef=apiRef.current.getColumn(field);colGroupingElementRef.current=findGroupHeaderElementsFromField(null==(_apiRef$current$colum3=apiRef.current.columnHeadersContainerElementRef)?void 0:_apiRef$current$colum3.current,field),logger.debug(`Start Resize on col ${colDef.field}`),apiRef.current.publishEvent("columnResizeStart",{field},event),colDefRef.current=colDef,colElementRef.current=function findHeaderElementFromField(elem,field){return elem.querySelector(`[data-field="${field}"]`)}(null==(_apiRef$current$colum4=apiRef.current.columnHeadersElementRef)?void 0:_apiRef$current$colum4.current,colDef.field),colCellElementsRef.current=findGridCellElementsFromCol(colElementRef.current,apiRef.current),resizeDirection.current=getResizeDirection(event.target,theme.direction),initialOffsetToSeparator.current=computeOffsetToSeparator(touch.clientX,colElementRef.current.getBoundingClientRect(),resizeDirection.current);const doc=(0,ownerDocument.Z)(event.currentTarget);doc.addEventListener("touchmove",handleTouchMove),doc.addEventListener("touchend",handleTouchEnd)})),stopListening=react.useCallback((()=>{const doc=(0,ownerDocument.Z)(apiRef.current.rootElementRef.current);doc.body.style.removeProperty("cursor"),doc.removeEventListener("mousemove",handleResizeMouseMove),doc.removeEventListener("mouseup",handleResizeMouseUp),doc.removeEventListener("touchmove",handleTouchMove),doc.removeEventListener("touchend",handleTouchEnd),colElementRef.current&&(colElementRef.current.style.pointerEvents="unset")}),[apiRef,colElementRef,handleResizeMouseMove,handleResizeMouseUp,handleTouchMove,handleTouchEnd]),handleResizeStart=react.useCallback((({field})=>{apiRef.current.setState((state=>(0,esm_extends.Z)({},state,{columnResize:(0,esm_extends.Z)({},state.columnResize,{resizingColumnField:field})}))),apiRef.current.forceUpdate()}),[apiRef]),handleResizeStop=react.useCallback((()=>{apiRef.current.setState((state=>(0,esm_extends.Z)({},state,{columnResize:(0,esm_extends.Z)({},state.columnResize,{resizingColumnField:""})}))),apiRef.current.forceUpdate()}),[apiRef]);react.useEffect((()=>()=>{clearTimeout(stopResizeEventTimeout.current),stopListening()}),[apiRef,handleTouchStart,stopListening]),useGridNativeEventListener(apiRef,(()=>{var _apiRef$current$colum5;return null==(_apiRef$current$colum5=apiRef.current.columnHeadersElementRef)?void 0:_apiRef$current$colum5.current}),"touchstart",handleTouchStart,{passive:doesSupportTouchActionNone()}),useGridApiEventHandler(apiRef,"columnSeparatorMouseDown",handleColumnResizeMouseDown),useGridApiEventHandler(apiRef,"columnResizeStart",handleResizeStart),useGridApiEventHandler(apiRef,"columnResizeStop",handleResizeStop),useGridApiOptionHandler(apiRef,"columnResize",props.onColumnResize),useGridApiOptionHandler(apiRef,"columnWidthChange",props.onColumnWidthChange)})(apiRef,props),((apiRef,props)=>{var _props$initialState3,_props$initialState3$;const logger=useGridLogger(apiRef,"useGridPagination"),visibleTopLevelRowCount=useGridSelector(apiRef,gridFilteredTopLevelRowCountSelector),densityFactor=useGridSelector(apiRef,gridDensityFactorSelector),rowHeight=Math.floor(props.rowHeight*densityFactor);apiRef.current.registerControlState({stateId:"pagination",propModel:props.paginationModel,propOnChange:props.onPaginationModelChange,stateSelector:gridPaginationModelSelector,changeEvent:"paginationModelChange"});const setPage=react.useCallback((page=>{const currentModel=gridPaginationModelSelector(apiRef);page!==currentModel.page&&(logger.debug(`Setting page to ${page}`),apiRef.current.setPaginationModel({page,pageSize:currentModel.pageSize}))}),[apiRef,logger]),setPageSize=react.useCallback((pageSize=>{const currentModel=gridPaginationModelSelector(apiRef);pageSize!==currentModel.pageSize&&(logger.debug(`Setting page size to ${pageSize}`),apiRef.current.setPaginationModel({pageSize,page:currentModel.page}))}),[apiRef,logger]),setPaginationModel=react.useCallback((paginationModel=>{var _props$rowCount;paginationModel!==gridPaginationModelSelector(apiRef)&&(logger.debug("Setting 'paginationModel' to",paginationModel),apiRef.current.updateControlState("pagination",mergeStateWithPaginationModel(null!=(_props$rowCount=props.rowCount)?_props$rowCount:visibleTopLevelRowCount,props.signature,paginationModel),"setPaginationModel"),apiRef.current.forceUpdate())}),[apiRef,logger,props.rowCount,props.signature,visibleTopLevelRowCount]);useGridApiMethod(apiRef,{setPage,setPageSize,setPaginationModel},"public");const stateExportPreProcessing=react.useCallback(((prevState,context)=>{var _props$initialState2,_props$initialState2$;const paginationModel=gridPaginationModelSelector(apiRef);return!context.exportOnlyDirtyModels||null!=props.paginationModel||null!=(null==(_props$initialState2=props.initialState)||null==(_props$initialState2$=_props$initialState2.pagination)?void 0:_props$initialState2$.paginationModel)||0!==paginationModel.page&&paginationModel.pageSize!==(props.autoPageSize?0:100)?(0,esm_extends.Z)({},prevState,{pagination:(0,esm_extends.Z)({},prevState.pagination,{paginationModel})}):prevState}),[apiRef,props.paginationModel,null==(_props$initialState3=props.initialState)||null==(_props$initialState3$=_props$initialState3.pagination)?void 0:_props$initialState3$.paginationModel,props.autoPageSize]),stateRestorePreProcessing=react.useCallback(((params,context)=>{var _context$stateToResto,_context$stateToResto2,_props$rowCount2;const paginationModel=null!=(_context$stateToResto=context.stateToRestore.pagination)&&_context$stateToResto.paginationModel?(0,esm_extends.Z)({},getDefaultGridPaginationModel(props.autoPageSize),null==(_context$stateToResto2=context.stateToRestore.pagination)?void 0:_context$stateToResto2.paginationModel):gridPaginationModelSelector(apiRef);return apiRef.current.updateControlState("pagination",mergeStateWithPaginationModel(null!=(_props$rowCount2=props.rowCount)?_props$rowCount2:visibleTopLevelRowCount,props.signature,paginationModel),"stateRestorePreProcessing"),params}),[apiRef,props.autoPageSize,props.rowCount,props.signature,visibleTopLevelRowCount]);useGridRegisterPipeProcessor(apiRef,"exportState",stateExportPreProcessing),useGridRegisterPipeProcessor(apiRef,"restoreState",stateRestorePreProcessing);const handleUpdateAutoPageSize=react.useCallback((()=>{const dimensions=apiRef.current.getRootDimensions();if(!props.autoPageSize||!dimensions)return;const pinnedRowsHeight=calculatePinnedRowsHeight(apiRef),maximumPageSizeWithoutScrollBar=Math.floor((dimensions.viewportInnerSize.height-pinnedRowsHeight.top-pinnedRowsHeight.bottom)/rowHeight);apiRef.current.setPageSize(maximumPageSizeWithoutScrollBar)}),[apiRef,props.autoPageSize,rowHeight]);useGridApiEventHandler(apiRef,"viewportInnerSizeChange",handleUpdateAutoPageSize),useGridApiEventHandler(apiRef,"paginationModelChange",(()=>{var _apiRef$current$virtu;const paginationModel=gridPaginationModelSelector(apiRef);null!=(_apiRef$current$virtu=apiRef.current.virtualScrollerRef)&&_apiRef$current$virtu.current&&apiRef.current.scrollToIndexes({rowIndex:paginationModel.page*paginationModel.pageSize}),apiRef.current.forceUpdate()})),react.useEffect((()=>{}),[props.rowCount,props.paginationMode]),react.useEffect((()=>{var _props$rowCount3;apiRef.current.updateControlState("pagination",mergeStateWithPaginationModel(null!=(_props$rowCount3=props.rowCount)?_props$rowCount3:visibleTopLevelRowCount,props.signature,props.paginationModel))}),[apiRef,props.paginationModel,props.rowCount,props.paginationMode,visibleTopLevelRowCount,props.signature]),react.useEffect((()=>{handleUpdateAutoPageSize()}),[handleUpdateAutoPageSize])})(apiRef,props),((apiRef,props)=>{const{getRowHeight:getRowHeightProp,getRowSpacing,getEstimatedRowHeight}=props,rowsHeightLookup=react.useRef(Object.create(null)),lastMeasuredRowIndex=react.useRef(-1),hasRowWithAutoHeight=react.useRef(!1),densityFactor=useGridSelector(apiRef,gridDensityFactorSelector),filterModel=useGridSelector(apiRef,gridFilterModelSelector),paginationState=useGridSelector(apiRef,gridPaginationSelector),sortModel=useGridSelector(apiRef,gridSortModelSelector),currentPage=useGridVisibleRows(apiRef,props),pinnedRows=useGridSelector(apiRef,gridPinnedRowsSelector),validRowHeight=getValidRowHeight(props.rowHeight,DATA_GRID_PROPS_DEFAULT_VALUES.rowHeight),rowHeight=Math.floor(validRowHeight*densityFactor),hydrateRowsMeta=react.useCallback((()=>{var _pinnedRows$top,_pinnedRows$bottom;hasRowWithAutoHeight.current=!1;const calculateRowProcessedSizes=row=>{rowsHeightLookup.current[row.id]||(rowsHeightLookup.current[row.id]={sizes:{baseCenter:rowHeight},isResized:!1,autoHeight:!1,needsFirstMeasurement:!0});const{isResized,needsFirstMeasurement,sizes}=rowsHeightLookup.current[row.id];let baseRowHeight="number"==typeof rowHeight&&rowHeight>0?rowHeight:52;const existingBaseRowHeight=sizes.baseCenter;if(isResized)baseRowHeight=existingBaseRowHeight;else if(getRowHeightProp){const rowHeightFromUser=getRowHeightProp((0,esm_extends.Z)({},row,{densityFactor}));if("auto"===rowHeightFromUser){if(needsFirstMeasurement){const estimatedRowHeight=getEstimatedRowHeight?getEstimatedRowHeight((0,esm_extends.Z)({},row,{densityFactor})):rowHeight;baseRowHeight=null!=estimatedRowHeight?estimatedRowHeight:rowHeight}else baseRowHeight=existingBaseRowHeight;hasRowWithAutoHeight.current=!0,rowsHeightLookup.current[row.id].autoHeight=!0}else baseRowHeight=getValidRowHeight(rowHeightFromUser,rowHeight),rowsHeightLookup.current[row.id].needsFirstMeasurement=!1,rowsHeightLookup.current[row.id].autoHeight=!1}else rowsHeightLookup.current[row.id].needsFirstMeasurement=!1;const initialHeights={};for(const key in sizes)/^base[A-Z]/.test(key)&&(initialHeights[key]=sizes[key]);if(initialHeights.baseCenter=baseRowHeight,getRowSpacing){var _spacing$top,_spacing$bottom;const indexRelativeToCurrentPage=apiRef.current.getRowIndexRelativeToVisibleRows(row.id),spacing=getRowSpacing((0,esm_extends.Z)({},row,{isFirstVisible:0===indexRelativeToCurrentPage,isLastVisible:indexRelativeToCurrentPage===currentPage.rows.length-1,indexRelativeToCurrentPage}));initialHeights.spacingTop=null!=(_spacing$top=spacing.top)?_spacing$top:0,initialHeights.spacingBottom=null!=(_spacing$bottom=spacing.bottom)?_spacing$bottom:0}const processedSizes=apiRef.current.unstable_applyPipeProcessors("rowHeight",initialHeights,row);return rowsHeightLookup.current[row.id].sizes=processedSizes,processedSizes},positions=[],currentPageTotalHeight=currentPage.rows.reduce(((acc,row)=>{positions.push(acc);let maximumBaseSize=0,otherSizes=0;const processedSizes=calculateRowProcessedSizes(row);for(const key in processedSizes){const value=processedSizes[key];/^base[A-Z]/.test(key)?maximumBaseSize=value>maximumBaseSize?value:maximumBaseSize:otherSizes+=value}return acc+maximumBaseSize+otherSizes}),0);null==pinnedRows||null==(_pinnedRows$top=pinnedRows.top)||_pinnedRows$top.forEach((row=>{calculateRowProcessedSizes(row)})),null==pinnedRows||null==(_pinnedRows$bottom=pinnedRows.bottom)||_pinnedRows$bottom.forEach((row=>{calculateRowProcessedSizes(row)})),apiRef.current.setState((state=>(0,esm_extends.Z)({},state,{rowsMeta:{currentPageTotalHeight,positions}}))),hasRowWithAutoHeight.current||(lastMeasuredRowIndex.current=1/0),apiRef.current.forceUpdate()}),[apiRef,currentPage.rows,rowHeight,getRowHeightProp,getRowSpacing,getEstimatedRowHeight,pinnedRows,densityFactor]),getRowHeight=react.useCallback((rowId=>{const height=rowsHeightLookup.current[rowId];return height?height.sizes.baseCenter:rowHeight}),[rowHeight]),setRowHeight=react.useCallback(((id,height)=>{rowsHeightLookup.current[id].sizes.baseCenter=height,rowsHeightLookup.current[id].isResized=!0,rowsHeightLookup.current[id].needsFirstMeasurement=!1,hydrateRowsMeta()}),[hydrateRowsMeta]),debouncedHydrateRowsMeta=react.useMemo((()=>(0,debounce.Z)(hydrateRowsMeta)),[hydrateRowsMeta]),storeMeasuredRowHeight=react.useCallback(((id,height,position)=>{if(!rowsHeightLookup.current[id]||!rowsHeightLookup.current[id].autoHeight)return;const needsHydration=rowsHeightLookup.current[id].sizes[`base${(0,capitalize.Z)(position)}`]!==height;rowsHeightLookup.current[id].needsFirstMeasurement=!1,rowsHeightLookup.current[id].sizes[`base${(0,capitalize.Z)(position)}`]=height,needsHydration&&debouncedHydrateRowsMeta()}),[debouncedHydrateRowsMeta]),rowHasAutoHeight=react.useCallback((id=>{var _rowsHeightLookup$cur2;return(null==(_rowsHeightLookup$cur2=rowsHeightLookup.current[id])?void 0:_rowsHeightLookup$cur2.autoHeight)||!1}),[]),getLastMeasuredRowIndex=react.useCallback((()=>lastMeasuredRowIndex.current),[]),setLastMeasuredRowIndex=react.useCallback((index=>{hasRowWithAutoHeight.current&&index>lastMeasuredRowIndex.current&&(lastMeasuredRowIndex.current=index)}),[]),resetRowHeights=react.useCallback((()=>{rowsHeightLookup.current={},hydrateRowsMeta()}),[hydrateRowsMeta]);react.useEffect((()=>{hydrateRowsMeta()}),[rowHeight,filterModel,paginationState,sortModel,hydrateRowsMeta]),useGridRegisterPipeApplier(apiRef,"rowHeight",hydrateRowsMeta);const rowsMetaPrivateApi={getLastMeasuredRowIndex,rowHasAutoHeight};useGridApiMethod(apiRef,{unstable_setLastMeasuredRowIndex:setLastMeasuredRowIndex,unstable_getRowHeight:getRowHeight,unstable_getRowInternalSizes:rowId=>{var _rowsHeightLookup$cur;return null==(_rowsHeightLookup$cur=rowsHeightLookup.current[rowId])?void 0:_rowsHeightLookup$cur.sizes},unstable_setRowHeight:setRowHeight,unstable_storeRowHeightMeasurement:storeMeasuredRowHeight,resetRowHeights},"public"),useGridApiMethod(apiRef,rowsMetaPrivateApi,"private")})(apiRef,props),useGridRowReorder(apiRef,props),((apiRef,props)=>{const theme=(0,useTheme.Z)(),logger=useGridLogger(apiRef,"useGridScroll"),colRef=apiRef.current.columnHeadersElementRef,virtualScrollerRef=apiRef.current.virtualScrollerRef,visibleSortedRows=useGridSelector(apiRef,gridExpandedSortedRowEntriesSelector),scrollToIndexes=react.useCallback((params=>{const totalRowCount=gridRowCountSelector(apiRef),visibleColumns=gridVisibleColumnDefinitionsSelector(apiRef);if(null!=params.rowIndex&&0===totalRowCount||0===visibleColumns.length)return!1;logger.debug(`Scrolling to cell at row ${params.rowIndex}, col: ${params.colIndex} `);let scrollCoordinates={};if(null!=params.colIndex){const columnPositions=gridColumnPositionsSelector(apiRef);let cellWidth;if(void 0!==params.rowIndex){var _visibleSortedRows$pa;const rowId=null==(_visibleSortedRows$pa=visibleSortedRows[params.rowIndex])?void 0:_visibleSortedRows$pa.id,cellColSpanInfo=apiRef.current.unstable_getCellColSpanInfo(rowId,params.colIndex);cellColSpanInfo&&!cellColSpanInfo.spannedByColSpan&&(cellWidth=cellColSpanInfo.cellProps.width)}void 0===cellWidth&&(cellWidth=visibleColumns[params.colIndex].computedWidth),scrollCoordinates.left=scrollIntoView({clientHeight:virtualScrollerRef.current.clientWidth,scrollTop:Math.abs(virtualScrollerRef.current.scrollLeft),offsetHeight:cellWidth,offsetTop:columnPositions[params.colIndex]})}if(null!=params.rowIndex){var _querySelector,_querySelector2;const rowsMeta=gridRowsMetaSelector(apiRef.current.state),page=gridPageSelector(apiRef),pageSize=gridPageSizeSelector(apiRef),elementIndex=props.pagination?params.rowIndex-page*pageSize:params.rowIndex,targetOffsetHeight=rowsMeta.positions[elementIndex+1]?rowsMeta.positions[elementIndex+1]-rowsMeta.positions[elementIndex]:rowsMeta.currentPageTotalHeight-rowsMeta.positions[elementIndex],topPinnedRowsHeight=(null==(_querySelector=virtualScrollerRef.current.querySelector(`.${gridClasses_gridClasses["pinnedRows--top"]}`))?void 0:_querySelector.clientHeight)||0,bottomPinnedRowsHeight=(null==(_querySelector2=virtualScrollerRef.current.querySelector(`.${gridClasses_gridClasses["pinnedRows--bottom"]}`))?void 0:_querySelector2.clientHeight)||0;scrollCoordinates.top=scrollIntoView({clientHeight:virtualScrollerRef.current.clientHeight-topPinnedRowsHeight-bottomPinnedRowsHeight,scrollTop:virtualScrollerRef.current.scrollTop,offsetHeight:targetOffsetHeight,offsetTop:rowsMeta.positions[elementIndex]})}return scrollCoordinates=apiRef.current.unstable_applyPipeProcessors("scrollToIndexes",scrollCoordinates,params),(void 0!==typeof scrollCoordinates.left||void 0!==typeof scrollCoordinates.top)&&(apiRef.current.scroll(scrollCoordinates),!0)}),[logger,apiRef,virtualScrollerRef,props.pagination,visibleSortedRows]),scroll=react.useCallback((params=>{if(virtualScrollerRef.current&&null!=params.left&&colRef.current){const direction="rtl"===theme.direction?-1:1;colRef.current.scrollLeft=params.left,virtualScrollerRef.current.scrollLeft=direction*params.left,logger.debug(`Scrolling left: ${params.left}`)}virtualScrollerRef.current&&null!=params.top&&(virtualScrollerRef.current.scrollTop=params.top,logger.debug(`Scrolling top: ${params.top}`)),logger.debug("Scrolling, updating container, and viewport")}),[virtualScrollerRef,theme.direction,colRef,logger]),getScrollPosition=react.useCallback((()=>null!=virtualScrollerRef&&virtualScrollerRef.current?{top:virtualScrollerRef.current.scrollTop,left:virtualScrollerRef.current.scrollLeft}:{top:0,left:0}),[virtualScrollerRef]);useGridApiMethod(apiRef,{scroll,scrollToIndexes,getScrollPosition},"public")})(apiRef,props),((apiRef,props)=>{const visibleColumns=useGridSelector(apiRef,gridVisibleColumnDefinitionsSelector),currentPage=useGridVisibleRows(apiRef,props),rowsMeta=useGridSelector(apiRef,gridRowsMetaSelector),contentHeight=Math.max(rowsMeta.currentPageTotalHeight,1),isInScrollBottomArea=react.useRef(!1),handleRowsScrollEnd=react.useCallback((scrollPosition=>{const dimensions=apiRef.current.getRootDimensions();if(!dimensions||"client"!==props.rowsLoadingMode)return;const scrollPositionBottom=scrollPosition.top+dimensions.viewportOuterSize.height,viewportPageSize=apiRef.current.getViewportPageSize();if(scrollPositionBottom<contentHeight-props.scrollEndThreshold&&(isInScrollBottomArea.current=!1),scrollPositionBottom>=contentHeight-props.scrollEndThreshold&&!isInScrollBottomArea.current){const rowScrollEndParam={visibleColumns,viewportPageSize,visibleRowsCount:currentPage.rows.length};apiRef.current.publishEvent("rowsScrollEnd",rowScrollEndParam),isInScrollBottomArea.current=!0}}),[contentHeight,props.scrollEndThreshold,props.rowsLoadingMode,visibleColumns,apiRef,currentPage.rows.length]),handleGridScroll=react.useCallback((({left,top})=>{handleRowsScrollEnd({left,top})}),[handleRowsScrollEnd]);useGridApiEventHandler(apiRef,"scrollPositionChange",handleGridScroll),useGridApiOptionHandler(apiRef,"rowsScrollEnd",props.onRowsScrollEnd)})(apiRef,props),((privateApiRef,props)=>{var _props$experimentalFe;const visibleRows=useGridVisibleRows(privateApiRef,props),sortModel=useGridSelector(privateApiRef,gridSortModelSelector),filterModel=useGridSelector(privateApiRef,gridFilterModelSelector),renderedRowsIntervalCache=react.useRef({firstRowToRender:0,lastRowToRender:0}),{lazyLoading}=null!=(_props$experimentalFe=props.experimentalFeatures)?_props$experimentalFe:{},getCurrentIntervalToRender=react.useCallback((()=>{const currentRenderContext=privateApiRef.current.getRenderContext(),[firstRowToRender,lastRowToRender]=getRenderableIndexes({firstIndex:currentRenderContext.firstRowIndex,lastIndex:currentRenderContext.lastRowIndex,minFirstIndex:0,maxLastIndex:visibleRows.rows.length,buffer:props.rowBuffer});return{firstRowToRender,lastRowToRender}}),[privateApiRef,props.rowBuffer,visibleRows.rows.length]),handleRenderedRowsIntervalChange=react.useCallback((params=>{const dimensions=privateApiRef.current.getRootDimensions();if(isLazyLoadingDisabled({lazyLoadingFeatureFlag:lazyLoading,rowsLoadingMode:props.rowsLoadingMode,gridDimensions:dimensions}))return;const fetchRowsParams={firstRowToRender:params.firstRowToRender,lastRowToRender:params.lastRowToRender,sortModel,filterModel};if(renderedRowsIntervalCache.current.firstRowToRender!==params.firstRowToRender||renderedRowsIntervalCache.current.lastRowToRender!==params.lastRowToRender){if(0===sortModel.length&&0===filterModel.items.length){const skeletonRowsSection=function findSkeletonRowsSection({apiRef,visibleRows,range}){let{firstRowIndex,lastRowIndex}=range;const visibleRowsSection=visibleRows.slice(range.firstRowIndex,range.lastRowIndex);let startIndex=0,endIndex=visibleRowsSection.length-1,isSkeletonSectionFound=!1;for(;!isSkeletonSectionFound&&firstRowIndex<lastRowIndex;){const isStartingWithASkeletonRow="skeletonRow"===apiRef.current.getRowNode(visibleRowsSection[startIndex].id).type,isEndingWithASkeletonRow="skeletonRow"===apiRef.current.getRowNode(visibleRowsSection[endIndex].id).type;isStartingWithASkeletonRow&&isEndingWithASkeletonRow&&(isSkeletonSectionFound=!0),isStartingWithASkeletonRow||(startIndex+=1,firstRowIndex+=1),isEndingWithASkeletonRow||(endIndex-=1,lastRowIndex-=1)}return isSkeletonSectionFound?{firstRowIndex,lastRowIndex}:void 0}({apiRef:privateApiRef,visibleRows:visibleRows.rows,range:{firstRowIndex:params.firstRowToRender,lastRowIndex:params.lastRowToRender}});if(!skeletonRowsSection)return;fetchRowsParams.firstRowToRender=skeletonRowsSection.firstRowIndex,fetchRowsParams.lastRowToRender=skeletonRowsSection.lastRowIndex}renderedRowsIntervalCache.current=params,privateApiRef.current.publishEvent("fetchRows",fetchRowsParams)}}),[privateApiRef,props.rowsLoadingMode,sortModel,filterModel,visibleRows.rows,lazyLoading]),handleGridSortModelChange=react.useCallback((newSortModel=>{const dimensions=privateApiRef.current.getRootDimensions();if(isLazyLoadingDisabled({lazyLoadingFeatureFlag:lazyLoading,rowsLoadingMode:props.rowsLoadingMode,gridDimensions:dimensions}))return;privateApiRef.current.requestPipeProcessorsApplication("hydrateRows");const{firstRowToRender,lastRowToRender}=getCurrentIntervalToRender(),fetchRowsParams={firstRowToRender,lastRowToRender,sortModel:newSortModel,filterModel};privateApiRef.current.publishEvent("fetchRows",fetchRowsParams)}),[privateApiRef,props.rowsLoadingMode,filterModel,lazyLoading,getCurrentIntervalToRender]),handleGridFilterModelChange=react.useCallback((newFilterModel=>{const dimensions=privateApiRef.current.getRootDimensions();if(isLazyLoadingDisabled({lazyLoadingFeatureFlag:lazyLoading,rowsLoadingMode:props.rowsLoadingMode,gridDimensions:dimensions}))return;privateApiRef.current.requestPipeProcessorsApplication("hydrateRows");const{firstRowToRender,lastRowToRender}=getCurrentIntervalToRender(),fetchRowsParams={firstRowToRender,lastRowToRender,sortModel,filterModel:newFilterModel};privateApiRef.current.publishEvent("fetchRows",fetchRowsParams)}),[privateApiRef,props.rowsLoadingMode,sortModel,lazyLoading,getCurrentIntervalToRender]);useGridApiEventHandler(privateApiRef,"renderedRowsIntervalChange",handleRenderedRowsIntervalChange),useGridApiEventHandler(privateApiRef,"sortModelChange",handleGridSortModelChange),useGridApiEventHandler(privateApiRef,"filterModelChange",handleGridFilterModelChange),useGridApiOptionHandler(privateApiRef,"fetchRows",props.onFetchRows)})(apiRef,props),(apiRef=>{const logger=useGridLogger(apiRef,"useGridColumnMenu"),showColumnMenu=react.useCallback((field=>{apiRef.current.setState((state=>state.columnMenu.open&&state.columnMenu.field===field?state:(logger.debug("Opening Column Menu"),(0,esm_extends.Z)({},state,{columnMenu:{open:!0,field}}))))&&(apiRef.current.hidePreferences(),apiRef.current.forceUpdate())}),[apiRef,logger]),hideColumnMenu=react.useCallback((()=>{const columnMenuState=gridColumnMenuSelector(apiRef.current.state);if(columnMenuState.field){const columnLookup=gridColumnLookupSelector(apiRef),columnVisibilityModel=gridColumnVisibilityModelSelector(apiRef),orderedFields=gridColumnFieldsSelector(apiRef);let fieldToFocus=columnMenuState.field;if(columnLookup[fieldToFocus]||(fieldToFocus=orderedFields[0]),!1===columnVisibilityModel[fieldToFocus]){const visibleOrderedFields=orderedFields.filter((field=>field===fieldToFocus||!1!==columnVisibilityModel[field])),fieldIndex=visibleOrderedFields.indexOf(fieldToFocus);fieldToFocus=visibleOrderedFields[fieldIndex+1]||visibleOrderedFields[fieldIndex-1]}apiRef.current.setColumnHeaderFocus(fieldToFocus)}apiRef.current.setState((state=>state.columnMenu.open||void 0!==state.columnMenu.field?(logger.debug("Hiding Column Menu"),(0,esm_extends.Z)({},state,{columnMenu:(0,esm_extends.Z)({},state.columnMenu,{open:!1,field:void 0})})):state))&&apiRef.current.forceUpdate()}),[apiRef,logger]),toggleColumnMenu=react.useCallback((field=>{logger.debug("Toggle Column Menu");const columnMenu=gridColumnMenuSelector(apiRef.current.state);columnMenu.open&&columnMenu.field===field?hideColumnMenu():showColumnMenu(field)}),[apiRef,logger,showColumnMenu,hideColumnMenu]);useGridApiMethod(apiRef,{showColumnMenu,hideColumnMenu,toggleColumnMenu},"public"),useGridApiEventHandler(apiRef,"columnResizeStart",hideColumnMenu),useGridApiEventHandler(apiRef,"virtualScrollerWheel",apiRef.current.hideColumnMenu),useGridApiEventHandler(apiRef,"virtualScrollerTouchMove",apiRef.current.hideColumnMenu)})(apiRef),useGridCsvExport(apiRef,props),useGridPrintExport(apiRef,props),useGridClipboard(apiRef,props),function useGridDimensions(apiRef,props){const logger=useGridLogger(apiRef,"useResizeContainer"),errorShown=react.useRef(!1),rootDimensionsRef=react.useRef(null),fullDimensionsRef=react.useRef(null),rowsMeta=useGridSelector(apiRef,gridRowsMetaSelector),densityFactor=useGridSelector(apiRef,gridDensityFactorSelector),rowHeight=Math.floor(props.rowHeight*densityFactor),totalHeaderHeight=getTotalHeaderHeight(apiRef,props.columnHeaderHeight),updateGridDimensionsRef=react.useCallback((()=>{var _apiRef$current$rootE;const rootElement=null==(_apiRef$current$rootE=apiRef.current.rootElementRef)?void 0:_apiRef$current$rootE.current,columnsTotalWidth=gridColumnsTotalWidthSelector(apiRef),pinnedRowsHeight=calculatePinnedRowsHeight(apiRef);if(!rootDimensionsRef.current)return;let scrollBarSize,viewportOuterSize,hasScrollX,hasScrollY;if(null!=props.scrollbarSize)scrollBarSize=props.scrollbarSize;else if(columnsTotalWidth&&rootElement){const scrollDiv=(0,ownerDocument.Z)(rootElement).createElement("div");scrollDiv.style.width="99px",scrollDiv.style.height="99px",scrollDiv.style.position="absolute",scrollDiv.style.overflow="scroll",scrollDiv.className="scrollDiv",rootElement.appendChild(scrollDiv),scrollBarSize=scrollDiv.offsetWidth-scrollDiv.clientWidth,rootElement.removeChild(scrollDiv)}else scrollBarSize=0;if(props.autoHeight)hasScrollY=!1,hasScrollX=Math.round(columnsTotalWidth)>rootDimensionsRef.current.width,viewportOuterSize={width:rootDimensionsRef.current.width,height:rowsMeta.currentPageTotalHeight+(hasScrollX?scrollBarSize:0)};else{viewportOuterSize={width:rootDimensionsRef.current.width,height:rootDimensionsRef.current.height-totalHeaderHeight};const scrollInformation=(({content,container,scrollBarSize})=>{const hasScrollXIfNoYScrollBar=content.width>container.width,hasScrollYIfNoXScrollBar=content.height>container.height;let hasScrollX=!1,hasScrollY=!1;return(hasScrollXIfNoYScrollBar||hasScrollYIfNoXScrollBar)&&(hasScrollX=hasScrollXIfNoYScrollBar,hasScrollY=content.height+(hasScrollX?scrollBarSize:0)>container.height,hasScrollY&&(hasScrollX=content.width+scrollBarSize>container.width)),{hasScrollX,hasScrollY}})({content:{width:Math.round(columnsTotalWidth),height:rowsMeta.currentPageTotalHeight},container:{width:viewportOuterSize.width,height:viewportOuterSize.height-pinnedRowsHeight.top-pinnedRowsHeight.bottom},scrollBarSize});hasScrollY=scrollInformation.hasScrollY,hasScrollX=scrollInformation.hasScrollX}const newFullDimensions={viewportOuterSize,viewportInnerSize:{width:viewportOuterSize.width-(hasScrollY?scrollBarSize:0),height:viewportOuterSize.height-(hasScrollX?scrollBarSize:0)},hasScrollX,hasScrollY,scrollBarSize},prevDimensions=fullDimensionsRef.current;fullDimensionsRef.current=newFullDimensions,newFullDimensions.viewportInnerSize.width===(null==prevDimensions?void 0:prevDimensions.viewportInnerSize.width)&&newFullDimensions.viewportInnerSize.height===(null==prevDimensions?void 0:prevDimensions.viewportInnerSize.height)||apiRef.current.publishEvent("viewportInnerSizeChange",newFullDimensions.viewportInnerSize)}),[apiRef,props.scrollbarSize,props.autoHeight,rowsMeta.currentPageTotalHeight,totalHeaderHeight]),[savedSize,setSavedSize]=react.useState(),debouncedSetSavedSize=react.useMemo((()=>(0,debounce.Z)(setSavedSize,60)),[]),previousSize=react.useRef();(0,useEnhancedEffect.Z)((()=>{savedSize&&(updateGridDimensionsRef(),apiRef.current.publishEvent("debouncedResize",rootDimensionsRef.current))}),[apiRef,savedSize,updateGridDimensionsRef]);const resize=react.useCallback((()=>{apiRef.current.computeSizeAndPublishResizeEvent()}),[apiRef]),getRootDimensions=react.useCallback((()=>fullDimensionsRef.current),[]),getViewportPageSize=react.useCallback((()=>{const dimensions=apiRef.current.getRootDimensions();if(!dimensions)return 0;const currentPage=getVisibleRows(apiRef,{pagination:props.pagination,paginationMode:props.paginationMode});if(props.getRowHeight){const renderContext=apiRef.current.getRenderContext(),viewportPageSize=renderContext.lastRowIndex-renderContext.firstRowIndex;return Math.min(viewportPageSize-1,currentPage.rows.length)}const maximumPageSizeWithoutScrollBar=Math.floor(dimensions.viewportInnerSize.height/rowHeight);return Math.min(maximumPageSizeWithoutScrollBar,currentPage.rows.length)}),[apiRef,props.pagination,props.paginationMode,props.getRowHeight,rowHeight]),computeSizeAndPublishResizeEvent=react.useCallback((()=>{var _apiRef$current$mainE,_previousSize$current,_previousSize$current2;const mainEl=null==(_apiRef$current$mainE=apiRef.current.mainElementRef)?void 0:_apiRef$current$mainE.current;if(!mainEl)return;const height=mainEl.clientHeight||0,width=mainEl.clientWidth||0,computedStyle=(0,ownerWindow.Z)(mainEl).getComputedStyle(mainEl),paddingLeft=parseInt(computedStyle.paddingLeft,10)||0,paddingRight=parseInt(computedStyle.paddingRight,10)||0,newHeight=height-(parseInt(computedStyle.paddingTop,10)||0)-(parseInt(computedStyle.paddingBottom,10)||0),newWidth=width-paddingLeft-paddingRight,hasHeightChanged=newHeight!==(null==(_previousSize$current=previousSize.current)?void 0:_previousSize$current.height),hasWidthChanged=newWidth!==(null==(_previousSize$current2=previousSize.current)?void 0:_previousSize$current2.width);if(!previousSize.current||hasHeightChanged||hasWidthChanged){const size={width:newWidth,height:newHeight};apiRef.current.publishEvent("resize",size),previousSize.current=size}}),[apiRef]),dimensionsPrivateApi={getViewportPageSize,updateGridDimensionsRef,computeSizeAndPublishResizeEvent};useGridApiMethod(apiRef,{resize,getRootDimensions},"public"),useGridApiMethod(apiRef,dimensionsPrivateApi,"private");const isFirstSizing=react.useRef(!0),handleResize=react.useCallback((size=>{rootDimensionsRef.current=size;const isJSDOM=/jsdom/.test(window.navigator.userAgent);if(0!==size.height||errorShown.current||props.autoHeight||isJSDOM||(logger.error(["The parent DOM element of the data grid has an empty height.","Please make sure that this element has an intrinsic height.","The grid displays with a height of 0px.","","More details: https://mui.com/r/x-data-grid-no-dimensions."].join("\n")),errorShown.current=!0),0!==size.width||errorShown.current||isJSDOM||(logger.error(["The parent DOM element of the data grid has an empty width.","Please make sure that this element has an intrinsic width.","The grid displays with a width of 0px.","","More details: https://mui.com/r/x-data-grid-no-dimensions."].join("\n")),errorShown.current=!0),isFirstSizing.current)return setSavedSize(size),void(isFirstSizing.current=!1);debouncedSetSavedSize(size)}),[props.autoHeight,debouncedSetSavedSize,logger]);(0,useEnhancedEffect.Z)((()=>updateGridDimensionsRef()),[updateGridDimensionsRef]),useGridApiOptionHandler(apiRef,"sortedRowsSet",updateGridDimensionsRef),useGridApiOptionHandler(apiRef,"paginationModelChange",updateGridDimensionsRef),useGridApiOptionHandler(apiRef,"columnsChange",updateGridDimensionsRef),useGridApiEventHandler(apiRef,"resize",handleResize),useGridApiOptionHandler(apiRef,"debouncedResize",props.onResize)}(apiRef,props),function useGridEvents(apiRef,props){useGridApiOptionHandler(apiRef,"columnHeaderClick",props.onColumnHeaderClick),useGridApiOptionHandler(apiRef,"columnHeaderDoubleClick",props.onColumnHeaderDoubleClick),useGridApiOptionHandler(apiRef,"columnHeaderOver",props.onColumnHeaderOver),useGridApiOptionHandler(apiRef,"columnHeaderOut",props.onColumnHeaderOut),useGridApiOptionHandler(apiRef,"columnHeaderEnter",props.onColumnHeaderEnter),useGridApiOptionHandler(apiRef,"columnHeaderLeave",props.onColumnHeaderLeave),useGridApiOptionHandler(apiRef,"cellClick",props.onCellClick),useGridApiOptionHandler(apiRef,"cellDoubleClick",props.onCellDoubleClick),useGridApiOptionHandler(apiRef,"cellKeyDown",props.onCellKeyDown),useGridApiOptionHandler(apiRef,"preferencePanelClose",props.onPreferencePanelClose),useGridApiOptionHandler(apiRef,"preferencePanelOpen",props.onPreferencePanelOpen),useGridApiOptionHandler(apiRef,"menuOpen",props.onMenuOpen),useGridApiOptionHandler(apiRef,"menuClose",props.onMenuClose),useGridApiOptionHandler(apiRef,"rowDoubleClick",props.onRowDoubleClick),useGridApiOptionHandler(apiRef,"rowClick",props.onRowClick),useGridApiOptionHandler(apiRef,"stateChange",props.onStateChange)}(apiRef,props),(apiRef=>{const exportState=react.useCallback(((params={})=>apiRef.current.unstable_applyPipeProcessors("exportState",{},params)),[apiRef]),restoreState=react.useCallback((stateToRestore=>{apiRef.current.unstable_applyPipeProcessors("restoreState",{callbacks:[]},{stateToRestore}).callbacks.forEach((callback=>{callback()})),apiRef.current.forceUpdate()}),[apiRef]);useGridApiMethod(apiRef,{exportState,restoreState},"public")})(apiRef),apiRef};var styles_useThemeProps=__webpack_require__("./node_modules/@mui/material/styles/useThemeProps.js");const localeTextConstants_GRID_DEFAULT_LOCALE_TEXT={noRowsLabel:"No rows",noResultsOverlayLabel:"No results found.",toolbarDensity:"Density",toolbarDensityLabel:"Density",toolbarDensityCompact:"Compact",toolbarDensityStandard:"Standard",toolbarDensityComfortable:"Comfortable",toolbarColumns:"Columns",toolbarColumnsLabel:"Select columns",toolbarFilters:"Filters",toolbarFiltersLabel:"Show filters",toolbarFiltersTooltipHide:"Hide filters",toolbarFiltersTooltipShow:"Show filters",toolbarFiltersTooltipActive:count=>1!==count?`${count} active filters`:`${count} active filter`,toolbarQuickFilterPlaceholder:"Searchâ€¦",toolbarQuickFilterLabel:"Search",toolbarQuickFilterDeleteIconLabel:"Clear",toolbarExport:"Export",toolbarExportLabel:"Export",toolbarExportCSV:"Download as CSV",toolbarExportPrint:"Print",toolbarExportExcel:"Download as Excel",columnsPanelTextFieldLabel:"Find column",columnsPanelTextFieldPlaceholder:"Column title",columnsPanelDragIconLabel:"Reorder column",columnsPanelShowAllButton:"Show all",columnsPanelHideAllButton:"Hide all",filterPanelAddFilter:"Add filter",filterPanelRemoveAll:"Remove all",filterPanelDeleteIconLabel:"Delete",filterPanelLogicOperator:"Logic operator",filterPanelOperator:"Operator",filterPanelOperatorAnd:"And",filterPanelOperatorOr:"Or",filterPanelColumns:"Columns",filterPanelInputLabel:"Value",filterPanelInputPlaceholder:"Filter value",filterOperatorContains:"contains",filterOperatorEquals:"equals",filterOperatorStartsWith:"starts with",filterOperatorEndsWith:"ends with",filterOperatorIs:"is",filterOperatorNot:"is not",filterOperatorAfter:"is after",filterOperatorOnOrAfter:"is on or after",filterOperatorBefore:"is before",filterOperatorOnOrBefore:"is on or before",filterOperatorIsEmpty:"is empty",filterOperatorIsNotEmpty:"is not empty",filterOperatorIsAnyOf:"is any of","filterOperator=":"=","filterOperator!=":"!=","filterOperator>":">","filterOperator>=":">=","filterOperator<":"<","filterOperator<=":"<=",headerFilterOperatorContains:"Contains",headerFilterOperatorEquals:"Equals",headerFilterOperatorStartsWith:"Starts with",headerFilterOperatorEndsWith:"Ends with",headerFilterOperatorIs:"Is",headerFilterOperatorNot:"Is not",headerFilterOperatorAfter:"Is after",headerFilterOperatorOnOrAfter:"Is on or after",headerFilterOperatorBefore:"Is before",headerFilterOperatorOnOrBefore:"Is on or before",headerFilterOperatorIsEmpty:"Is empty",headerFilterOperatorIsNotEmpty:"Is not empty",headerFilterOperatorIsAnyOf:"Is any of","headerFilterOperator=":"Equals","headerFilterOperator!=":"Not equals","headerFilterOperator>":"Greater than","headerFilterOperator>=":"Greater than or equal to","headerFilterOperator<":"Less than","headerFilterOperator<=":"Less than or equal to",filterValueAny:"any",filterValueTrue:"true",filterValueFalse:"false",columnMenuLabel:"Menu",columnMenuShowColumns:"Show columns",columnMenuManageColumns:"Manage columns",columnMenuFilter:"Filter",columnMenuHideColumn:"Hide column",columnMenuUnsort:"Unsort",columnMenuSortAsc:"Sort by ASC",columnMenuSortDesc:"Sort by DESC",columnHeaderFiltersTooltipActive:count=>1!==count?`${count} active filters`:`${count} active filter`,columnHeaderFiltersLabel:"Show filters",columnHeaderSortIconLabel:"Sort",footerRowSelected:count=>1!==count?`${count.toLocaleString()} rows selected`:`${count.toLocaleString()} row selected`,footerTotalRows:"Total Rows:",footerTotalVisibleRows:(visibleCount,totalCount)=>`${visibleCount.toLocaleString()} of ${totalCount.toLocaleString()}`,checkboxSelectionHeaderName:"Checkbox selection",checkboxSelectionSelectAllRows:"Select all rows",checkboxSelectionUnselectAllRows:"Unselect all rows",checkboxSelectionSelectRow:"Select row",checkboxSelectionUnselectRow:"Unselect row",booleanCellTrueLabel:"yes",booleanCellFalseLabel:"no",actionsCellMore:"more",pinToLeft:"Pin to left",pinToRight:"Pin to right",unpin:"Unpin",treeDataGroupingHeaderName:"Group",treeDataExpand:"see children",treeDataCollapse:"hide children",groupingColumnHeaderName:"Group",groupColumn:name=>`Group by ${name}`,unGroupColumn:name=>`Stop grouping by ${name}`,detailPanelToggle:"Detail panel toggle",expandDetailPanel:"Expand",collapseDetailPanel:"Collapse",MuiTablePagination:{},rowReorderingHeaderName:"Row reordering",aggregationMenuItemHeader:"Aggregation",aggregationFunctionLabelSum:"sum",aggregationFunctionLabelAvg:"avg",aggregationFunctionLabelMin:"min",aggregationFunctionLabelMax:"max",aggregationFunctionLabelSize:"size"},useProps_excluded=["components","componentsProps"];function groupForwardedProps(props){var _props$forwardedProps;const keys=Object.keys(props);if(!keys.some((key=>key.startsWith("aria-")||key.startsWith("data-"))))return props;const newProps={},forwardedProps=null!=(_props$forwardedProps=props.forwardedProps)?_props$forwardedProps:{};for(let i=0;i<keys.length;i+=1){const key=keys[i];key.startsWith("aria-")||key.startsWith("data-")?forwardedProps[key]=props[key]:newProps[key]=props[key]}return newProps.forwardedProps=forwardedProps,newProps}const GRID_COLUMN_MENU_SLOTS_PRO=(0,esm_extends.Z)({},GRID_COLUMN_MENU_SLOTS,{columnMenuPinningItem:function GridColumnMenuPinningItem(props){const{colDef,onClick}=props,apiRef=utils_useGridApiContext_useGridApiContext(),rootProps=useGridRootProps_useGridRootProps(),theme=(0,useTheme.Z)(),pinColumn=react.useCallback((side=>event=>{apiRef.current.pinColumn(colDef.field,side),onClick(event)}),[apiRef,colDef.field,onClick]),unpinColumn=event=>{apiRef.current.unpinColumn(colDef.field),onClick(event)},pinToLeftMenuItem=(0,jsx_runtime.jsxs)(MenuItem.Z,{onClick:pinColumn(GridPinnedPosition.left),children:[(0,jsx_runtime.jsx)(ListItemIcon.Z,{children:(0,jsx_runtime.jsx)(rootProps.slots.columnMenuPinLeftIcon,{fontSize:"small"})}),(0,jsx_runtime.jsx)(ListItemText.Z,{children:apiRef.current.getLocaleText("pinToLeft")})]}),pinToRightMenuItem=(0,jsx_runtime.jsxs)(MenuItem.Z,{onClick:pinColumn(GridPinnedPosition.right),children:[(0,jsx_runtime.jsx)(ListItemIcon.Z,{children:(0,jsx_runtime.jsx)(rootProps.slots.columnMenuPinRightIcon,{fontSize:"small"})}),(0,jsx_runtime.jsx)(ListItemText.Z,{children:apiRef.current.getLocaleText("pinToRight")})]});if(!colDef)return null;const side=apiRef.current.isColumnPinned(colDef.field);if(side){const otherSide=side===GridPinnedPosition.right?GridPinnedPosition.left:GridPinnedPosition.right,label=otherSide===GridPinnedPosition.right?"pinToRight":"pinToLeft",Icon=side===GridPinnedPosition.right?rootProps.slots.columnMenuPinLeftIcon:rootProps.slots.columnMenuPinRightIcon;return(0,jsx_runtime.jsxs)(react.Fragment,{children:[(0,jsx_runtime.jsxs)(MenuItem.Z,{onClick:pinColumn(otherSide),children:[(0,jsx_runtime.jsx)(ListItemIcon.Z,{children:(0,jsx_runtime.jsx)(Icon,{fontSize:"small"})}),(0,jsx_runtime.jsx)(ListItemText.Z,{children:apiRef.current.getLocaleText(label)})]}),(0,jsx_runtime.jsxs)(MenuItem.Z,{onClick:unpinColumn,children:[(0,jsx_runtime.jsx)(ListItemIcon.Z,{}),(0,jsx_runtime.jsx)(ListItemText.Z,{children:apiRef.current.getLocaleText("unpin")})]})]})}return"rtl"===theme.direction?(0,jsx_runtime.jsxs)(react.Fragment,{children:[pinToRightMenuItem,pinToLeftMenuItem]}):(0,jsx_runtime.jsxs)(react.Fragment,{children:[pinToLeftMenuItem,pinToRightMenuItem]})}}),GRID_COLUMN_MENU_SLOT_PROPS_PRO=(0,esm_extends.Z)({},GRID_COLUMN_MENU_SLOT_PROPS,{columnMenuPinningItem:{displayOrder:15}}),GridProColumnMenu=react.forwardRef((function GridProColumnMenu(props,ref){return(0,jsx_runtime.jsx)(GridGenericColumnMenu,(0,esm_extends.Z)({ref},props,{defaultSlots:GRID_COLUMN_MENU_SLOTS_PRO,defaultSlotProps:GRID_COLUMN_MENU_SLOT_PROPS_PRO}))})),useGridColumnHeaders_excluded=["getColumnsToRender","getRootProps"],GridHeaderFilterRow=(0,esm_styled.Z)("div",{name:"MuiDataGrid",slot:"HeaderFilterRow",overridesResolver:(props,styles)=>styles.headerFilterRow})((()=>({display:"flex"}))),useGridColumnHeaders_useGridColumnHeaders=props=>{const apiRef=useGridPrivateApiContext(),{headerGroupingMaxDepth,hasOtherElementInTabSequence}=props,columnHeaderFilterTabIndexState=useGridSelector(apiRef,unstable_gridTabIndexColumnHeaderFilterSelector),_useGridColumnHeaders=useGridColumnHeaders((0,esm_extends.Z)({},props,{hasOtherElementInTabSequence:hasOtherElementInTabSequence||null!==columnHeaderFilterTabIndexState})),{getColumnsToRender,getRootProps}=_useGridColumnHeaders,otherProps=(0,objectWithoutPropertiesLoose.Z)(_useGridColumnHeaders,useGridColumnHeaders_excluded),headerFiltersRef=react.useRef(null);apiRef.current.register("private",{headerFiltersElementRef:headerFiltersRef});const headerFilterMenuRef=react.useRef(null),rootProps=useGridRootProps_useGridRootProps(),classes=(ownerState=>{const{classes}=ownerState;return react.useMemo((()=>(0,composeClasses.Z)({headerFilterRow:["headerFilterRow"]},getDataGridUtilityClass,classes)),[classes])})(rootProps),disableHeaderFiltering=!rootProps.unstable_headerFilters,headerHeight=Math.floor(rootProps.columnHeaderHeight*props.densityFactor),filterModel=useGridSelector(apiRef,gridFilterModelSelector),totalHeaderHeight=getTotalHeaderHeight(apiRef,rootProps.columnHeaderHeight)+(disableHeaderFiltering?0:headerHeight),columnHeaderFilterFocus=useGridSelector(apiRef,unstable_gridFocusColumnHeaderFilterSelector),rootStyle={minHeight:totalHeaderHeight,maxHeight:totalHeaderHeight,lineHeight:`${headerHeight}px`};return(0,esm_extends.Z)({},otherProps,{getColumnFilters:(params,other={})=>{if(disableHeaderFiltering)return null;const columnsToRender=getColumnsToRender(params);if(null==columnsToRender)return null;const{renderedColumns,firstColumnToRender}=columnsToRender,filters=[];for(let i=0;i<renderedColumns.length;i+=1){var _colDef$filterOperato,_colDef$filterOperato2,_filterModel$items$fi,_rootProps$slotProps;const colDef=renderedColumns[i],columnIndex=firstColumnToRender+i,hasFocus=(null==columnHeaderFilterFocus?void 0:columnHeaderFilterFocus.field)===colDef.field,isFirstColumn=0===columnIndex,tabIndex=(null==columnHeaderFilterTabIndexState?void 0:columnHeaderFilterTabIndexState.field)===colDef.field||isFirstColumn&&!props.hasOtherElementInTabSequence?0:-1,headerClassName="function"==typeof colDef.headerClassName?colDef.headerClassName({field:colDef.field,colDef}):colDef.headerClassName,filterOperators=null!=(_colDef$filterOperato=null==(_colDef$filterOperato2=colDef.filterOperators)?void 0:_colDef$filterOperato2.filter((operator=>"isAnyOf"!==operator.value)))?_colDef$filterOperato:[],item=null!=(_filterModel$items$fi=null==filterModel?void 0:filterModel.items.find((it=>it.field===colDef.field&&"isAnyOf"!==it.operator)))?_filterModel$items$fi:getGridFilter(colDef);filters.push((0,jsx_runtime.jsx)(rootProps.slots.headerFilterCell,(0,esm_extends.Z)({colIndex:columnIndex,height:headerHeight,width:colDef.computedWidth,colDef,hasFocus,tabIndex,headerFilterMenuRef,headerClassName,filterOperators,"data-field":colDef.field,item},null==(_rootProps$slotProps=rootProps.slotProps)?void 0:_rootProps$slotProps.headerFilterCell,other),`${colDef.field}-filter`))}return(0,jsx_runtime.jsx)(GridHeaderFilterRow,{ref:headerFiltersRef,ownerState:rootProps,className:classes.headerFilterRow,role:"row","aria-rowindex":headerGroupingMaxDepth+2,children:filters})},getRootProps:disableHeaderFiltering?getRootProps:(other={})=>(0,esm_extends.Z)({style:rootStyle},other)})},GridScrollAreaRawRoot=(0,esm_styled.Z)("div",{name:"MuiDataGrid",slot:"ScrollArea",overridesResolver:(props,styles)=>[{[`&.${gridClasses_gridClasses["scrollArea--left"]}`]:styles["scrollArea--left"]},{[`&.${gridClasses_gridClasses["scrollArea--right"]}`]:styles["scrollArea--right"]},styles.scrollArea]})((()=>({position:"absolute",top:0,zIndex:101,width:20,bottom:0,[`&.${gridClasses_gridClasses["scrollArea--left"]}`]:{left:0},[`&.${gridClasses_gridClasses["scrollArea--right"]}`]:{right:0}})));function GridScrollAreaRaw(props){const{scrollDirection}=props,rootRef=react.useRef(null),apiRef=useGridApiContext_useGridApiContext(),timeout=react.useRef(),[dragging,setDragging]=react.useState(!1),[canScrollMore,setCanScrollMore]=react.useState(!0),densityFactor=useGridSelector(apiRef,gridDensityFactorSelector),columnsTotalWidth=useGridSelector(apiRef,gridColumnsTotalWidthSelector),scrollPosition=react.useRef({left:0,top:0}),rootProps=useGridRootProps_useGridRootProps(),ownerState=(0,esm_extends.Z)({},rootProps,{scrollDirection}),classes=(ownerState=>{const{scrollDirection,classes}=ownerState,slots={root:["scrollArea",`scrollArea--${scrollDirection}`]};return(0,composeClasses.Z)(slots,getDataGridUtilityClass,classes)})(ownerState),totalHeaderHeight=getTotalHeaderHeight(apiRef,rootProps.columnHeaderHeight),headerHeight=Math.floor(rootProps.columnHeaderHeight*densityFactor),handleScrolling=react.useCallback((newScrollPosition=>{scrollPosition.current=newScrollPosition;const dimensions=apiRef.current.getRootDimensions();setCanScrollMore((()=>{if("left"===scrollDirection)return scrollPosition.current.left>0;if("right"===scrollDirection){const maxScrollLeft=columnsTotalWidth-dimensions.viewportInnerSize.width;return scrollPosition.current.left<maxScrollLeft}return!1}))}),[apiRef,columnsTotalWidth,scrollDirection]),handleDragOver=react.useCallback((event=>{let offset;if(event.preventDefault(),"left"===scrollDirection)offset=event.clientX-rootRef.current.getBoundingClientRect().right;else{if("right"!==scrollDirection)throw new Error("MUI: Wrong drag direction");offset=Math.max(1,event.clientX-rootRef.current.getBoundingClientRect().left)}offset=1.5*(offset-1)+1,clearTimeout(timeout.current),timeout.current=setTimeout((()=>{apiRef.current.scroll({left:scrollPosition.current.left+offset,top:scrollPosition.current.top})}))}),[scrollDirection,apiRef]);react.useEffect((()=>()=>{clearTimeout(timeout.current)}),[]);const handleColumnHeaderDragStart=(0,useEventCallback.Z)((()=>{setDragging(!0)})),handleColumnHeaderDragEnd=(0,useEventCallback.Z)((()=>{setDragging(!1)}));return useGridApiEventHandler(apiRef,"scrollPositionChange",handleScrolling),useGridApiEventHandler(apiRef,"columnHeaderDragStart",handleColumnHeaderDragStart),useGridApiEventHandler(apiRef,"columnHeaderDragEnd",handleColumnHeaderDragEnd),dragging&&canScrollMore?(0,jsx_runtime.jsx)(GridScrollAreaRawRoot,{ref:rootRef,className:(0,clsx_m.Z)(classes.root),ownerState,onDragOver:handleDragOver,style:{height:headerHeight,top:totalHeaderHeight-headerHeight}}):null}const GridScrollArea=react.memo(GridScrollAreaRaw),components_GridColumnHeaders_excluded=["style","className","innerRef","visibleColumns","sortColumnLookup","filterColumnLookup","columnPositions","columnHeaderTabIndexState","columnGroupHeaderTabIndexState","columnHeaderFocus","columnGroupHeaderFocus","densityFactor","headerGroupingMaxDepth","columnMenuState","columnVisibility","columnGroupsHeaderStructure","hasOtherElementInTabSequence","pinnedColumns"],GridColumnHeaders_getOverlayAlpha=elevation=>{let alphaValue;return alphaValue=elevation<1?5.11916*elevation**2:4.5*Math.log(elevation+1)+2,alphaValue/100},GridColumnHeadersPinnedColumnHeaders=(0,styled.ZP)("div",{name:"MuiDataGrid",slot:"PinnedColumnHeaders",overridesResolver:(props,styles)=>[{[`&.${gridClasses_gridClasses["pinnedColumnHeaders--left"]}`]:styles["pinnedColumnHeaders--left"]},{[`&.${gridClasses_gridClasses["pinnedColumnHeaders--right"]}`]:styles["pinnedColumnHeaders--right"]},styles.pinnedColumnHeaders]})((({theme,ownerState})=>{var _theme$vars$overlays;return(0,esm_extends.Z)({position:"absolute",top:0,overflow:"hidden",zIndex:1,display:"flex",flexDirection:"column",boxShadow:theme.shadows[2],backgroundColor:(theme.vars||theme).palette.background.default},theme.vars?{backgroundImage:null==(_theme$vars$overlays=theme.vars.overlays)?void 0:_theme$vars$overlays[2]}:(0,esm_extends.Z)({},"dark"===theme.palette.mode&&{backgroundImage:`linear-gradient(${(0,colorManipulator.Fq)("#fff",GridColumnHeaders_getOverlayAlpha(2))}, ${(0,colorManipulator.Fq)("#fff",GridColumnHeaders_getOverlayAlpha(2))})`}),ownerState.side===GridPinnedPosition.left&&{left:0},ownerState.side===GridPinnedPosition.right&&{right:0},ownerState.side===GridPinnedPosition.right&&ownerState.showCellVerticalBorder&&{borderLeftWidth:"1px",borderLeftStyle:"solid"})}));GridColumnHeadersPinnedColumnHeaders.propTypes={ownerState:prop_types_default().object.isRequired};const GridColumnHeaders_GridColumnHeaders=react.forwardRef((function GridColumnHeaders(props,ref){const{className,innerRef,visibleColumns,sortColumnLookup,filterColumnLookup,columnPositions,columnHeaderTabIndexState,columnGroupHeaderTabIndexState,columnHeaderFocus,columnGroupHeaderFocus,densityFactor,headerGroupingMaxDepth,columnMenuState,columnVisibility,columnGroupsHeaderStructure,hasOtherElementInTabSequence,pinnedColumns}=props,other=(0,objectWithoutPropertiesLoose.Z)(props,components_GridColumnHeaders_excluded),rootProps=useGridRootProps_useGridRootProps(),apiRef=utils_useGridApiContext_useGridApiContext(),[scrollbarSize,setScrollbarSize]=react.useState(0),theme=(0,useTheme.Z)(),handleContentSizeChange=(0,useEventCallback.Z)((()=>{const rootDimensions=apiRef.current.getRootDimensions();if(!rootDimensions)return;const newScrollbarSize=rootDimensions.hasScrollY?rootDimensions.scrollBarSize:0;scrollbarSize!==newScrollbarSize&&setScrollbarSize(newScrollbarSize)}));useGridApiEventHandler(apiRef,"virtualScrollerContentSizeChange",handleContentSizeChange);const visibleColumnFields=react.useMemo((()=>visibleColumns.map((({field})=>field))),[visibleColumns]),[leftPinnedColumns,rightPinnedColumns]=filterColumns(pinnedColumns,visibleColumnFields,"rtl"===theme.direction),{isDragging,renderContext,getRootProps,getInnerProps,getColumnHeaders,getColumnFilters,getColumnGroupHeaders}=useGridColumnHeaders_useGridColumnHeaders({innerRef,visibleColumns,sortColumnLookup,filterColumnLookup,columnPositions,columnHeaderTabIndexState,hasOtherElementInTabSequence,columnGroupHeaderTabIndexState,columnHeaderFocus,columnGroupHeaderFocus,densityFactor,headerGroupingMaxDepth,columnMenuState,columnVisibility,columnGroupsHeaderStructure,minColumnIndex:leftPinnedColumns.length}),ownerState=(0,esm_extends.Z)({},rootProps,{leftPinnedColumns,rightPinnedColumns,classes:rootProps.classes}),classes=(ownerState=>{const{leftPinnedColumns,rightPinnedColumns,classes}=ownerState,slots={leftPinnedColumns:["pinnedColumnHeaders",leftPinnedColumns&&leftPinnedColumns.length>0&&"pinnedColumnHeaders--left"],rightPinnedColumns:["pinnedColumnHeaders",rightPinnedColumns&&rightPinnedColumns.length>0&&"pinnedColumnHeaders--right","withBorderColor"]};return(0,composeClasses.Z)(slots,getDataGridUtilityClass,classes)})(ownerState),leftRenderContext=renderContext&&leftPinnedColumns.length?(0,esm_extends.Z)({},renderContext,{firstColumnIndex:0,lastColumnIndex:leftPinnedColumns.length}):null,rightRenderContext=renderContext&&rightPinnedColumns.length?(0,esm_extends.Z)({},renderContext,{firstColumnIndex:visibleColumnFields.length-rightPinnedColumns.length,lastColumnIndex:visibleColumnFields.length}):null,innerProps=getInnerProps(),pinnedColumnHeadersProps={role:innerProps.role};return(0,jsx_runtime.jsxs)(GridBaseColumnHeaders,(0,esm_extends.Z)({ref,className},getRootProps(other),{children:[leftRenderContext&&(0,jsx_runtime.jsxs)(GridColumnHeadersPinnedColumnHeaders,(0,esm_extends.Z)({className:classes.leftPinnedColumns,ownerState:(0,esm_extends.Z)({},ownerState,{side:GridPinnedPosition.left,showCellVerticalBorder:rootProps.showCellVerticalBorder})},pinnedColumnHeadersProps,{children:[getColumnGroupHeaders({renderContext:leftRenderContext,minFirstColumn:leftRenderContext.firstColumnIndex,maxLastColumn:leftRenderContext.lastColumnIndex}),getColumnHeaders({renderContext:leftRenderContext,minFirstColumn:leftRenderContext.firstColumnIndex,maxLastColumn:leftRenderContext.lastColumnIndex},{disableReorder:!0}),getColumnFilters({renderContext:leftRenderContext,minFirstColumn:leftRenderContext.firstColumnIndex,maxLastColumn:leftRenderContext.lastColumnIndex})]})),(0,jsx_runtime.jsx)(GridScrollArea,{scrollDirection:"left"}),(0,jsx_runtime.jsxs)(GridColumnHeadersInner,(0,esm_extends.Z)({isDragging},innerProps,{children:[getColumnGroupHeaders({renderContext,minFirstColumn:leftPinnedColumns.length,maxLastColumn:visibleColumnFields.length-rightPinnedColumns.length}),getColumnHeaders({renderContext,minFirstColumn:leftPinnedColumns.length,maxLastColumn:visibleColumnFields.length-rightPinnedColumns.length}),getColumnFilters({renderContext,minFirstColumn:leftPinnedColumns.length,maxLastColumn:visibleColumnFields.length-rightPinnedColumns.length})]})),(0,jsx_runtime.jsx)(GridScrollArea,{scrollDirection:"right"}),rightRenderContext&&(0,jsx_runtime.jsxs)(GridColumnHeadersPinnedColumnHeaders,(0,esm_extends.Z)({ownerState:(0,esm_extends.Z)({},ownerState,{side:GridPinnedPosition.right,showCellVerticalBorder:rootProps.showCellVerticalBorder}),className:classes.rightPinnedColumns,style:{paddingRight:scrollbarSize}},pinnedColumnHeadersProps,{children:[getColumnGroupHeaders({renderContext:rightRenderContext,minFirstColumn:rightRenderContext.firstColumnIndex,maxLastColumn:rightRenderContext.lastColumnIndex}),getColumnHeaders({renderContext:rightRenderContext,minFirstColumn:rightRenderContext.firstColumnIndex,maxLastColumn:rightRenderContext.lastColumnIndex},{disableReorder:!0,separatorSide:GridColumnHeaderSeparatorSides.Left}),getColumnFilters({renderContext:rightRenderContext,minFirstColumn:rightRenderContext.firstColumnIndex,maxLastColumn:rightRenderContext.lastColumnIndex})]}))]}))}));const GridHeaderFilterMenuContainer_excluded=["operators","item","field","buttonRef","headerFilterMenuRef"],sx={width:22,height:22,margin:"auto 0 10px 5px"};function GridHeaderFilterMenuContainer(props){var _rootProps$slotProps;const{operators,item,field,buttonRef,headerFilterMenuRef}=props,others=(0,objectWithoutPropertiesLoose.Z)(props,GridHeaderFilterMenuContainer_excluded),buttonId=(0,useId.Z)(),menuId=(0,useId.Z)(),rootProps=useGridRootProps_useGridRootProps(),apiRef=useGridApiContext_useGridApiContext(),open=Boolean(unstable_gridHeaderFilteringMenuSelector(apiRef)===field&&headerFilterMenuRef.current);return rootProps.slots.headerFilterMenu?(0,jsx_runtime.jsxs)(react.Fragment,{children:[(0,jsx_runtime.jsx)(rootProps.slots.baseIconButton,(0,esm_extends.Z)({id:buttonId,ref:buttonRef,"aria-label":apiRef.current.getLocaleText("filterPanelOperator"),title:apiRef.current.getLocaleText("filterPanelOperator"),"aria-controls":menuId,"aria-expanded":open?"true":void 0,"aria-haspopup":"true",tabIndex:-1,size:"small",onClick:event=>{headerFilterMenuRef.current=event.currentTarget,apiRef.current.showHeaderFilterMenu(field)},sx},null==(_rootProps$slotProps=rootProps.slotProps)?void 0:_rootProps$slotProps.baseIconButton,{children:(0,jsx_runtime.jsx)(rootProps.slots.openFilterButtonIcon,{fontSize:"small"})})),(0,jsx_runtime.jsx)(rootProps.slots.headerFilterMenu,(0,esm_extends.Z)({field,open,item,target:headerFilterMenuRef.current,operators,labelledBy:buttonId,id:menuId},others))]}):null}const GridHeaderFilterClearButton_sx={padding:"2px"};function GridHeaderFilterClearButton({onClick}){var _rootProps$slotProps;const rootProps=useGridRootProps_useGridRootProps();return(0,jsx_runtime.jsx)(rootProps.slots.baseIconButton,(0,esm_extends.Z)({tabIndex:-1,"aria-label":"Clear filter",size:"small",onClick,sx:GridHeaderFilterClearButton_sx},null==(_rootProps$slotProps=rootProps.slotProps)?void 0:_rootProps$slotProps.baseIconButton,{children:(0,jsx_runtime.jsx)(rootProps.slots.columnMenuClearIcon,{fontSize:"inherit"})}))}const GridHeaderFilterCell_excluded=["colIndex","height","hasFocus","filterOperators","width","headerClassName","colDef","item","headerFilterMenuRef","InputComponentProps","showClearIcon"],dateSx={'& input[value=""]:not(:focus)':{color:"transparent"}},GridHeaderFilterCell=react.forwardRef(((props,ref)=>{var _filterOperators$find,_currentOperator$head,_colDef$headerName;const{colIndex,height,hasFocus,filterOperators,width,headerClassName,colDef,item,headerFilterMenuRef,InputComponentProps,showClearIcon=!0}=props,other=(0,objectWithoutPropertiesLoose.Z)(props,GridHeaderFilterCell_excluded),apiRef=useGridPrivateApiContext(),columnFields=gridVisibleColumnFieldsSelector(apiRef),rootProps=useGridRootProps_useGridRootProps(),cellRef=react.useRef(null),handleRef=(0,useForkRef.Z)(ref,cellRef),inputRef=react.useRef(null),buttonRef=react.useRef(null),isEditing=unstable_gridHeaderFilteringEditFieldSelector(apiRef)===colDef.field,isMenuOpen=unstable_gridHeaderFilteringMenuSelector(apiRef)===colDef.field,currentOperator=filterOperators[0],InputComponent=colDef.filterable?currentOperator.InputComponent:null,applyFilterChanges=react.useCallback((updatedItem=>{!item.value||updatedItem.value?apiRef.current.upsertFilterItem(updatedItem):apiRef.current.deleteFilterItem(updatedItem)}),[apiRef,item]),clearFilterItem=react.useCallback((()=>{apiRef.current.deleteFilterItem(item)}),[apiRef,item]);let headerFilterComponent;colDef.renderHeaderFilter&&(headerFilterComponent=colDef.renderHeaderFilter(props)),react.useLayoutEffect((()=>{if(hasFocus&&!isMenuOpen){let focusableElement=cellRef.current.querySelector('[tabindex="0"]');isEditing&&InputComponent&&(focusableElement=inputRef.current);const elementToFocus=focusableElement||cellRef.current;null==elementToFocus||elementToFocus.focus(),apiRef.current.columnHeadersContainerElementRef.current.scrollLeft=0}}),[InputComponent,apiRef,hasFocus,isEditing,isMenuOpen]);const onKeyDown=react.useCallback((event=>{if(!isMenuOpen&&!isNavigationKey(event.key))switch(event.key){case"Escape":isEditing&&apiRef.current.stopHeaderFilterEditMode();break;case"Enter":if(isEditing){apiRef.current.stopHeaderFilterEditMode();break}if(event.metaKey||event.ctrlKey){headerFilterMenuRef.current=buttonRef.current,apiRef.current.showHeaderFilterMenu(colDef.field);break}apiRef.current.startHeaderFilterEditMode(colDef.field);break;case"Tab":if(isEditing){var _columnFields;const fieldToFocus=null!=(_columnFields=columnFields[colIndex+(event.shiftKey?-1:1)])?_columnFields:null;fieldToFocus&&(apiRef.current.startHeaderFilterEditMode(fieldToFocus),apiRef.current.setColumnHeaderFilterFocus(fieldToFocus,event))}break;default:if(isEditing||event.metaKey||event.ctrlKey||event.altKey||event.shiftKey)break;apiRef.current.startHeaderFilterEditMode(colDef.field)}}),[apiRef,colDef.field,colIndex,columnFields,headerFilterMenuRef,isEditing,isMenuOpen]),publish=react.useCallback(((eventName,propHandler)=>event=>{apiRef.current.publishEvent(eventName,apiRef.current.getColumnHeaderParams(colDef.field),event),propHandler&&propHandler(event)}),[apiRef,colDef.field]),onMouseDown=react.useCallback((event=>{hasFocus||(inputRef.current&&inputRef.current.focus(),apiRef.current.setColumnHeaderFilterFocus(colDef.field,event))}),[apiRef,colDef.field,hasFocus]),mouseEventsHandlers=react.useMemo((()=>({onKeyDown:publish("headerFilterKeyDown",onKeyDown),onClick:publish("headerFilterClick"),onMouseDown:publish("headerFilterMouseDown",onMouseDown),onBlur:publish("headerFilterBlur")})),[onMouseDown,onKeyDown,publish]),classes=(ownerState=>{const{colDef,classes,showColumnVerticalBorder}=ownerState,slots={root:["columnHeader","left"===colDef.headerAlign&&"columnHeader--alignLeft","center"===colDef.headerAlign&&"columnHeader--alignCenter","right"===colDef.headerAlign&&"columnHeader--alignRight","withBorderColor",showColumnVerticalBorder&&"columnHeader--withRightBorder"]};return(0,composeClasses.Z)(slots,getDataGridUtilityClass,classes)})((0,esm_extends.Z)({},rootProps,{colDef})),isNoInputOperator=!1===(null==filterOperators||null==(_filterOperators$find=filterOperators.find((({value})=>item.operator===value)))?void 0:_filterOperators$find.requiresFilterValue),isApplied=Boolean(null==item?void 0:item.value)||isNoInputOperator,label=null!=(_currentOperator$head=currentOperator.headerLabel)?_currentOperator$head:apiRef.current.getLocaleText(`headerFilterOperator${(0,capitalize.Z)(item.operator)}`),isFilterActive=isApplied||hasFocus;return(0,jsx_runtime.jsxs)("div",(0,esm_extends.Z)({className:(0,clsx_m.Z)(classes.root,headerClassName),ref:handleRef,style:{height,width,minWidth:width,maxWidth:width},role:"columnheader","aria-colindex":colIndex+1,"aria-label":null==headerFilterComponent?null!=(_colDef$headerName=colDef.headerName)?_colDef$headerName:colDef.field:void 0},other,mouseEventsHandlers,{children:[headerFilterComponent,InputComponent&&void 0===headerFilterComponent?(0,jsx_runtime.jsxs)(react.Fragment,{children:[(0,jsx_runtime.jsx)(InputComponent,(0,esm_extends.Z)({apiRef,item,inputRef,applyValue:applyFilterChanges,onFocus:()=>apiRef.current.startHeaderFilterEditMode(colDef.field),onBlur:()=>apiRef.current.stopHeaderFilterEditMode(),label:(0,capitalize.Z)(label),placeholder:"",isFilterActive,clearButton:showClearIcon&&isApplied?(0,jsx_runtime.jsx)(GridHeaderFilterClearButton,{onClick:clearFilterItem}):null,disabled:isNoInputOperator,tabIndex:-1,InputLabelProps:null,sx:"date"===colDef.type||"dateTime"===colDef.type?dateSx:void 0},isNoInputOperator?{value:""}:{},null==currentOperator?void 0:currentOperator.InputComponentProps,InputComponentProps)),(0,jsx_runtime.jsx)(GridHeaderFilterMenuContainer,{operators:filterOperators,item,field:colDef.field,applyFilterChanges,headerFilterMenuRef,buttonRef})]}):null]}))})),material_iconSlots={ColumnMenuPinRightIcon:(0,createSvgIcon.Z)((0,jsx_runtime.jsx)("g",{transform:"rotate(-30 15 10)",children:(0,jsx_runtime.jsx)("path",{d:"M16,9V4l1,0c0.55,0,1-0.45,1-1v0c0-0.55-0.45-1-1-1H7C6.45,2,6,2.45,6,3v0 c0,0.55,0.45,1,1,1l1,0v5c0,1.66-1.34,3-3,3h0v2h5.97v7l1,1l1-1v-7H19v-2h0C17.34,12,16,10.66,16,9z",fillRule:"evenodd"})}),"PushPinRight"),ColumnMenuPinLeftIcon:(0,createSvgIcon.Z)((0,jsx_runtime.jsx)("g",{transform:"rotate(30 8 12)",children:(0,jsx_runtime.jsx)("path",{d:"M16,9V4l1,0c0.55,0,1-0.45,1-1v0c0-0.55-0.45-1-1-1H7C6.45,2,6,2.45,6,3v0 c0,0.55,0.45,1,1,1l1,0v5c0,1.66-1.34,3-3,3h0v2h5.97v7l1,1l1-1v-7H19v-2h0C17.34,12,16,10.66,16,9z",fillRule:"evenodd"})}),"PushPinLeft")},x_data_grid_pro_material=(0,esm_extends.Z)({},material_iconSlots),DATA_GRID_PRO_DEFAULT_SLOTS_COMPONENTS=(0,esm_extends.Z)({},DATA_GRID_DEFAULT_SLOTS_COMPONENTS,x_data_grid_pro_material,{ColumnMenu:GridProColumnMenu,ColumnHeaders:GridColumnHeaders_GridColumnHeaders,HeaderFilterCell:GridHeaderFilterCell,HeaderFilterMenu:function GridHeaderFilterMenu({open,field,target,applyFilterChanges,operators,item,id,labelledBy}){const apiRef=useGridApiContext_useGridApiContext(),hideMenu=react.useCallback((()=>{apiRef.current.hideHeaderFilterMenu()}),[apiRef]),handleListKeyDown=react.useCallback((event=>{"Tab"===event.key&&event.preventDefault(),"Escape"!==event.key&&"Tab"!==event.key||hideMenu()}),[hideMenu]);return target?(0,jsx_runtime.jsx)(GridMenu,{placement:"bottom-end",open,target,onClickAway:hideMenu,onExited:hideMenu,children:(0,jsx_runtime.jsx)(MenuList.Z,{"aria-labelledby":labelledBy,id,onKeyDown:handleListKeyDown,children:operators.map(((op,i)=>{var _op$headerLabel;const label=null!=(_op$headerLabel=null==op?void 0:op.headerLabel)?_op$headerLabel:apiRef.current.getLocaleText(`headerFilterOperator${(0,capitalize.Z)(op.value)}`);return(0,jsx_runtime.jsx)(MenuItem.Z,{onClick:()=>{applyFilterChanges((0,esm_extends.Z)({},item,{operator:op.value})),hideMenu()},autoFocus:0===i&&open,selected:op.value===item.operator,children:label},`${field}-${op.value}`)}))})}):null}}),DATA_GRID_PRO_PROPS_DEFAULT_VALUES=(0,esm_extends.Z)({},DATA_GRID_PROPS_DEFAULT_VALUES,{scrollEndThreshold:80,treeData:!1,defaultGroupingExpansionDepth:0,disableColumnPinning:!1,keepColumnPositionIfDraggedOutside:!1,disableChildrenFiltering:!1,disableChildrenSorting:!1,rowReordering:!1,rowsLoadingMode:"client",getDetailPanelHeight:()=>500,unstable_headerFilters:!1}),useDataGridProProps_defaultSlots=uncapitalizeObjectKeys(DATA_GRID_PRO_DEFAULT_SLOTS_COMPONENTS),useDataGridProProps=inProps=>{const[components,componentsProps,themedProps]=function useProps_useProps(allProps){return react.useMemo((()=>{const{components,componentsProps}=allProps;return[components,componentsProps,groupForwardedProps((0,objectWithoutPropertiesLoose.Z)(allProps,useProps_excluded))]}),[allProps])}((0,styles_useThemeProps.Z)({props:inProps,name:"MuiDataGrid"})),localeText=react.useMemo((()=>(0,esm_extends.Z)({},localeTextConstants_GRID_DEFAULT_LOCALE_TEXT,themedProps.localeText)),[themedProps.localeText]),slots=react.useMemo((()=>function computeSlots_computeSlots({defaultSlots,slots,components}){const overrides=null!=slots?slots:components?uncapitalizeObjectKeys(components):null;return overrides&&0!==Object.keys(overrides).length?(0,esm_extends.Z)({},defaultSlots,overrides):defaultSlots}({defaultSlots:useDataGridProProps_defaultSlots,slots:themedProps.slots,components})),[components,themedProps.slots]);return react.useMemo((()=>{var _themedProps$slotProp;return(0,esm_extends.Z)({},DATA_GRID_PRO_PROPS_DEFAULT_VALUES,themedProps,{localeText,slots,slotProps:null!=(_themedProps$slotProp=themedProps.slotProps)?_themedProps$slotProp:componentsProps,signature:"DataGridPro"})}),[themedProps,localeText,slots,componentsProps])},DataGridProRaw=react.forwardRef((function DataGridPro(inProps,ref){const props=useDataGridProProps(inProps),privateApiRef=useDataGridProComponent(props.apiRef,props);useLicenseVerifier("x-data-grid-pro","MTY4NjI2MTYwMDAwMA==");const pinnedColumns=useGridSelector(privateApiRef,gridPinnedColumnsSelector);return(0,jsx_runtime.jsx)(GridContextProvider,{privateApiRef,props,children:(0,jsx_runtime.jsxs)(GridRoot,(0,esm_extends.Z)({className:props.className,style:props.style,sx:props.sx,ref},props.forwardedProps,{children:[(0,jsx_runtime.jsx)(GridHeader,{}),(0,jsx_runtime.jsx)(GridBody,{VirtualScrollerComponent:DataGridProVirtualScroller,ColumnHeadersProps:{pinnedColumns},children:(0,jsx_runtime.jsx)(Watermark,{packageName:"x-data-grid-pro",releaseInfo:"MTY4NjI2MTYwMDAwMA=="})}),(0,jsx_runtime.jsx)(GridFooterPlaceholder,{})]}))})})),DataGridPro=react.memo(DataGridProRaw);DataGridProRaw.propTypes={apiRef:prop_types_default().shape({current:prop_types_default().object.isRequired}),"aria-label":prop_types_default().string,"aria-labelledby":prop_types_default().string,autoHeight:prop_types_default().bool,autoPageSize:prop_types_default().bool,cellModesModel:prop_types_default().object,checkboxSelection:prop_types_default().bool,checkboxSelectionVisibleOnly:(0,chainPropTypes.Z)(prop_types_default().bool,(props=>!props.pagination&&props.checkboxSelectionVisibleOnly?new Error("MUI: The `checkboxSelectionVisibleOnly` prop has no effect when the pagination is not enabled."):null)),classes:prop_types_default().object,clipboardCopyCellDelimiter:prop_types_default().string,columnBuffer:prop_types_default().number,columnGroupingModel:prop_types_default().arrayOf(prop_types_default().object),columnHeaderHeight:prop_types_default().number,columns:prop_types_default().arrayOf(prop_types_default().object).isRequired,columnThreshold:prop_types_default().number,columnVisibilityModel:prop_types_default().object,components:prop_types_default().object,componentsProps:prop_types_default().object,defaultGroupingExpansionDepth:prop_types_default().number,density:prop_types_default().oneOf(["comfortable","compact","standard"]),detailPanelExpandedRowIds:prop_types_default().arrayOf(prop_types_default().oneOfType([prop_types_default().number,prop_types_default().string]).isRequired),disableChildrenFiltering:prop_types_default().bool,disableChildrenSorting:prop_types_default().bool,disableColumnFilter:prop_types_default().bool,disableColumnMenu:prop_types_default().bool,disableColumnPinning:prop_types_default().bool,disableColumnReorder:prop_types_default().bool,disableColumnResize:prop_types_default().bool,disableColumnSelector:prop_types_default().bool,disableDensitySelector:prop_types_default().bool,disableMultipleColumnsFiltering:prop_types_default().bool,disableMultipleColumnsSorting:prop_types_default().bool,disableMultipleRowSelection:prop_types_default().bool,disableRowSelectionOnClick:prop_types_default().bool,disableVirtualization:prop_types_default().bool,editMode:prop_types_default().oneOf(["cell","row"]),experimentalFeatures:prop_types_default().shape({columnGrouping:prop_types_default().bool,lazyLoading:prop_types_default().bool,warnIfFocusStateIsNotSynced:prop_types_default().bool}),filterMode:(0,chainPropTypes.Z)(prop_types_default().oneOf(["client","server"]),(props=>props.treeData&&"server"===props.filterMode?new Error('MUI: The `filterMode="server"` prop is not available when the `treeData` is enabled.'):null)),filterModel:prop_types_default().shape({items:prop_types_default().arrayOf(prop_types_default().shape({field:prop_types_default().string.isRequired,id:prop_types_default().oneOfType([prop_types_default().number,prop_types_default().string]),operator:prop_types_default().string.isRequired,value:prop_types_default().any})).isRequired,logicOperator:prop_types_default().oneOf(["and","or"]),quickFilterLogicOperator:prop_types_default().oneOf(["and","or"]),quickFilterValues:prop_types_default().array}),forwardedProps:prop_types_default().object,getCellClassName:prop_types_default().func,getDetailPanelContent:prop_types_default().func,getDetailPanelHeight:prop_types_default().func,getEstimatedRowHeight:prop_types_default().func,getRowClassName:prop_types_default().func,getRowHeight:prop_types_default().func,getRowId:prop_types_default().func,getRowSpacing:prop_types_default().func,getTreeDataPath:prop_types_default().func,groupingColDef:prop_types_default().oneOfType([prop_types_default().func,prop_types_default().object]),hideFooter:prop_types_default().bool,hideFooterPagination:prop_types_default().bool,hideFooterRowCount:(0,chainPropTypes.Z)(prop_types_default().bool,(props=>props.pagination&&props.hideFooterRowCount?new Error("MUI: The `hideFooterRowCount` prop has no effect when the pagination is enabled."):null)),hideFooterSelectedRowCount:prop_types_default().bool,initialState:prop_types_default().object,isCellEditable:prop_types_default().func,isGroupExpandedByDefault:prop_types_default().func,isRowSelectable:prop_types_default().func,keepColumnPositionIfDraggedOutside:prop_types_default().bool,keepNonExistentRowsSelected:prop_types_default().bool,loading:prop_types_default().bool,localeText:prop_types_default().object,logger:prop_types_default().shape({debug:prop_types_default().func.isRequired,error:prop_types_default().func.isRequired,info:prop_types_default().func.isRequired,warn:prop_types_default().func.isRequired}),logLevel:prop_types_default().oneOf(["debug","error","info","warn",!1]),nonce:prop_types_default().string,onCellClick:prop_types_default().func,onCellDoubleClick:prop_types_default().func,onCellEditStart:prop_types_default().func,onCellEditStop:prop_types_default().func,onCellKeyDown:prop_types_default().func,onCellModesModelChange:prop_types_default().func,onClipboardCopy:prop_types_default().func,onColumnHeaderClick:prop_types_default().func,onColumnHeaderDoubleClick:prop_types_default().func,onColumnHeaderEnter:prop_types_default().func,onColumnHeaderLeave:prop_types_default().func,onColumnHeaderOut:prop_types_default().func,onColumnHeaderOver:prop_types_default().func,onColumnOrderChange:prop_types_default().func,onColumnResize:prop_types_default().func,onColumnVisibilityModelChange:prop_types_default().func,onColumnWidthChange:prop_types_default().func,onDetailPanelExpandedRowIdsChange:prop_types_default().func,onFetchRows:prop_types_default().func,onFilterModelChange:prop_types_default().func,onMenuClose:prop_types_default().func,onMenuOpen:prop_types_default().func,onPaginationModelChange:prop_types_default().func,onPinnedColumnsChange:prop_types_default().func,onPreferencePanelClose:prop_types_default().func,onPreferencePanelOpen:prop_types_default().func,onProcessRowUpdateError:prop_types_default().func,onResize:prop_types_default().func,onRowClick:prop_types_default().func,onRowDoubleClick:prop_types_default().func,onRowEditCommit:prop_types_default().func,onRowEditStart:prop_types_default().func,onRowEditStop:prop_types_default().func,onRowModesModelChange:prop_types_default().func,onRowOrderChange:prop_types_default().func,onRowSelectionModelChange:prop_types_default().func,onRowsScrollEnd:prop_types_default().func,onSortModelChange:prop_types_default().func,onStateChange:prop_types_default().func,pageSizeOptions:prop_types_default().arrayOf(prop_types_default().number),pagination:prop_types_default().bool,paginationMode:prop_types_default().oneOf(["client","server"]),paginationModel:prop_types_default().shape({page:prop_types_default().number.isRequired,pageSize:prop_types_default().number.isRequired}),pinnedColumns:prop_types_default().shape({left:prop_types_default().arrayOf(prop_types_default().string),right:prop_types_default().arrayOf(prop_types_default().string)}),pinnedRows:prop_types_default().shape({bottom:prop_types_default().arrayOf(prop_types_default().object),top:prop_types_default().arrayOf(prop_types_default().object)}),processRowUpdate:prop_types_default().func,rowBuffer:prop_types_default().number,rowCount:prop_types_default().number,rowHeight:prop_types_default().number,rowModesModel:prop_types_default().object,rowReordering:prop_types_default().bool,rows:prop_types_default().arrayOf(prop_types_default().object).isRequired,rowSelection:prop_types_default().bool,rowSelectionModel:prop_types_default().oneOfType([prop_types_default().arrayOf(prop_types_default().oneOfType([prop_types_default().number,prop_types_default().string]).isRequired),prop_types_default().number,prop_types_default().string]),rowsLoadingMode:prop_types_default().oneOf(["client","server"]),rowSpacingType:prop_types_default().oneOf(["border","margin"]),rowThreshold:prop_types_default().number,scrollbarSize:prop_types_default().number,scrollEndThreshold:prop_types_default().number,showCellVerticalBorder:prop_types_default().bool,showColumnVerticalBorder:prop_types_default().bool,slotProps:prop_types_default().object,slots:prop_types_default().object,sortingMode:prop_types_default().oneOf(["client","server"]),sortingOrder:prop_types_default().arrayOf(prop_types_default().oneOf(["asc","desc"])),sortModel:prop_types_default().arrayOf(prop_types_default().shape({field:prop_types_default().string.isRequired,sort:prop_types_default().oneOf(["asc","desc"])})),sx:prop_types_default().oneOfType([prop_types_default().arrayOf(prop_types_default().oneOfType([prop_types_default().func,prop_types_default().object,prop_types_default().bool])),prop_types_default().func,prop_types_default().object]),throttleRowsMs:prop_types_default().number,treeData:prop_types_default().bool,unstable_headerFilters:prop_types_default().bool,unstable_ignoreValueFormatterDuringExport:prop_types_default().oneOfType([prop_types_default().shape({clipboardExport:prop_types_default().bool,csvExport:prop_types_default().bool}),prop_types_default().bool])}},"./node_modules/clsx/dist/clsx.m.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{function r(e){var t,f,n="";if("string"==typeof e||"number"==typeof e)n+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(f=r(e[t]))&&(n&&(n+=" "),n+=f);else for(t in e)e[t]&&(n&&(n+=" "),n+=t);return n}__webpack_require__.d(__webpack_exports__,{Z:()=>__WEBPACK_DEFAULT_EXPORT__});const __WEBPACK_DEFAULT_EXPORT__=function clsx(){for(var e,t,f=0,n="";f<arguments.length;)(e=arguments[f++])&&(t=r(e))&&(n&&(n+=" "),n+=t);return n}}}]);
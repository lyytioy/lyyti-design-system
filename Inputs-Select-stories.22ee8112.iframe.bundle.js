"use strict";(self.webpackChunk_lyyti_design_system=self.webpackChunk_lyyti_design_system||[]).push([[8343],{"./stories/Inputs/Select.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{ChildrenOptions:()=>ChildrenOptions,Default:()=>Default,Disabled:()=>Disabled,Error:()=>Error,HelperText:()=>HelperText,Large:()=>Large,MultipleSelect:()=>MultipleSelect,MultipleSelectCheckbox:()=>MultipleSelectCheckbox,MultipleSelectLargeWhite:()=>MultipleSelectLargeWhite,MultipleSelectOptionDescription:()=>MultipleSelectOptionDescription,MultipleSelectOptionDivider:()=>MultipleSelectOptionDivider,OptionDescription:()=>OptionDescription,OptionDivider:()=>OptionDivider,StartAdornment:()=>StartAdornment,White:()=>White,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/next/dist/compiled/react/index.js"),_src_components_Select__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/components/Select.tsx"),_storybook_excludedParams__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./.storybook/excludedParams.ts"),_src__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/index.ts"),_src_icons__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./src/icons/index.ts"),__jsx=react__WEBPACK_IMPORTED_MODULE_0__.createElement;const __WEBPACK_DEFAULT_EXPORT__={title:"Components/Inputs/Select",component:_src_components_Select__WEBPACK_IMPORTED_MODULE_1__.Z,parameters:{docs:{description:{component:"Select components are used for collecting user provided information from a list of options."}},backgrounds:{default:"light",values:[{name:"light",value:"#ffffff"},{name:"dark",value:"#045b56"}]},controls:{exclude:(0,_storybook_excludedParams__WEBPACK_IMPORTED_MODULE_4__.u)(["color"])}},args:{label:"Label",multiple:!1}};var SelectTemplate=function SelectTemplate(args){var _args$SelectProps,isMultiple=Boolean("SelectProps"in args&&(null===(_args$SelectProps=args.SelectProps)||void 0===_args$SelectProps?void 0:_args$SelectProps.multiple)),_useState=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(isMultiple?[0]:0),selectValue=_useState[0],setSelectValue=_useState[1];return args.value=selectValue,args.onChange=function(e){return setSelectValue(e.target.value)},args.options||(args.options=[{id:0,value:"Select..."},{id:1,value:"Option 1"},{id:2,value:"Option 2"},{id:3,value:"Option 3"},{id:4,value:"Option 4"}]),__jsx(_src_components_Select__WEBPACK_IMPORTED_MODULE_1__.Z,args)};SelectTemplate.displayName="SelectTemplate";var MultiSelectTemplate=function MultiSelectTemplate(args){return args.options||(args.options=[{id:0,value:"Select..."},{id:1,value:"Option 1"},{id:2,value:"Option 2"},{id:3,value:"Option 3"},{id:4,value:"Option 4"}]),__jsx(_src_components_Select__WEBPACK_IMPORTED_MODULE_1__.Z,args)};MultiSelectTemplate.displayName="MultiSelectTemplate";var Default=SelectTemplate.bind({});Default.args={};var Large=SelectTemplate.bind({});Large.args={margin:"normal"};var HelperText=SelectTemplate.bind({});HelperText.args={helperText:"Helper text"};var Error=SelectTemplate.bind({});Error.args={helperText:"Helper text",error:!0};var StartAdornment=SelectTemplate.bind({});StartAdornment.args={helperText:"Helper text",adornment:"Kg"};var OptionDivider=SelectTemplate.bind({});OptionDivider.args={helperText:"Helper text",optionDivider:!0};var OptionDescription=SelectTemplate.bind({});OptionDescription.args={helperText:"Helper text",options:[{id:0,value:"Select..."},{id:1,value:"Option 1",description:"lorem ipsum dolor"},{id:2,value:"Option 2",description:"lorem ipsum dolor"},{id:3,value:"Option 3",description:"lorem ipsum dolor"},{id:4,value:"Option 4",description:"lorem ipsum dolor"}]};var Disabled=SelectTemplate.bind({});Disabled.args={helperText:"Helper text",disabled:!0};var White=SelectTemplate.bind({});White.args={color:"white"},White.parameters={backgrounds:{default:"dark"}};var ChildrenOptions=SelectTemplate.bind({});ChildrenOptions.args={children:[{id:0,value:"Select..."},{id:1,value:"Option 1"},{id:2,value:"Option 2"},{id:3,value:"Option 3"},{id:4,value:"Option 4"}].map((function(_ref){var id=_ref.id,value=_ref.value;return __jsx(_src__WEBPACK_IMPORTED_MODULE_2__.sN,{key:id,value:id,sx:{display:"flex",alignItems:"center",columnGap:1}},__jsx(_src_icons__WEBPACK_IMPORTED_MODULE_3__.kIV,null),__jsx(_src__WEBPACK_IMPORTED_MODULE_2__.ZT,{sx:{color:"text.secondary"}},value))}))};var MultipleSelect=MultiSelectTemplate.bind({});MultipleSelect.args={multiple:!0,placeholder:"Select",fullWidth:!0};var MultipleSelectCheckbox=SelectTemplate.bind({});MultipleSelectCheckbox.args={placeholder:"Select",fullWidth:!0,SelectProps:{multiple:!0},checkbox:!0};var MultipleSelectOptionDivider=MultiSelectTemplate.bind({});MultipleSelectOptionDivider.args={multiple:!0,placeholder:"Select",fullWidth:!0,optionDivider:!0};var MultipleSelectOptionDescription=MultiSelectTemplate.bind({});MultipleSelectOptionDescription.args={multiple:!0,placeholder:"Select",fullWidth:!0,options:[{id:0,value:"Select..."},{id:1,value:"Option 1",description:"lorem ipsum dolor"},{id:2,value:"Option 2",description:"lorem ipsum dolor"},{id:3,value:"Option 3",description:"lorem ipsum dolor"},{id:4,value:"Option 4",description:"lorem ipsum dolor"}]};var MultipleSelectLargeWhite=MultiSelectTemplate.bind({});MultipleSelectLargeWhite.args={multiple:!0,placeholder:"Select",fullWidth:!0,size:"medium",color:"white"},MultipleSelectLargeWhite.parameters={backgrounds:{default:"dark"}},Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"(args: SelectProps) => {\n  const isMultiple = Boolean('SelectProps' in args && args.SelectProps?.multiple);\n  const [selectValue, setSelectValue] = useState<Array<string | number> | string | number>(isMultiple ? [0] : 0);\n  args.value = selectValue;\n  args.onChange = (e: ChangeEvent<HTMLInputElement>) => setSelectValue(e.target.value);\n  if (!args.options) {\n    args.options = [{\n      id: 0,\n      value: 'Select...'\n    }, {\n      id: 1,\n      value: 'Option 1'\n    }, {\n      id: 2,\n      value: 'Option 2'\n    }, {\n      id: 3,\n      value: 'Option 3'\n    }, {\n      id: 4,\n      value: 'Option 4'\n    }];\n  }\n  return <Select {...args} />;\n}",...Default.parameters?.docs?.source}}},Large.parameters={...Large.parameters,docs:{...Large.parameters?.docs,source:{originalSource:"(args: SelectProps) => {\n  const isMultiple = Boolean('SelectProps' in args && args.SelectProps?.multiple);\n  const [selectValue, setSelectValue] = useState<Array<string | number> | string | number>(isMultiple ? [0] : 0);\n  args.value = selectValue;\n  args.onChange = (e: ChangeEvent<HTMLInputElement>) => setSelectValue(e.target.value);\n  if (!args.options) {\n    args.options = [{\n      id: 0,\n      value: 'Select...'\n    }, {\n      id: 1,\n      value: 'Option 1'\n    }, {\n      id: 2,\n      value: 'Option 2'\n    }, {\n      id: 3,\n      value: 'Option 3'\n    }, {\n      id: 4,\n      value: 'Option 4'\n    }];\n  }\n  return <Select {...args} />;\n}",...Large.parameters?.docs?.source}}},HelperText.parameters={...HelperText.parameters,docs:{...HelperText.parameters?.docs,source:{originalSource:"(args: SelectProps) => {\n  const isMultiple = Boolean('SelectProps' in args && args.SelectProps?.multiple);\n  const [selectValue, setSelectValue] = useState<Array<string | number> | string | number>(isMultiple ? [0] : 0);\n  args.value = selectValue;\n  args.onChange = (e: ChangeEvent<HTMLInputElement>) => setSelectValue(e.target.value);\n  if (!args.options) {\n    args.options = [{\n      id: 0,\n      value: 'Select...'\n    }, {\n      id: 1,\n      value: 'Option 1'\n    }, {\n      id: 2,\n      value: 'Option 2'\n    }, {\n      id: 3,\n      value: 'Option 3'\n    }, {\n      id: 4,\n      value: 'Option 4'\n    }];\n  }\n  return <Select {...args} />;\n}",...HelperText.parameters?.docs?.source}}},Error.parameters={...Error.parameters,docs:{...Error.parameters?.docs,source:{originalSource:"(args: SelectProps) => {\n  const isMultiple = Boolean('SelectProps' in args && args.SelectProps?.multiple);\n  const [selectValue, setSelectValue] = useState<Array<string | number> | string | number>(isMultiple ? [0] : 0);\n  args.value = selectValue;\n  args.onChange = (e: ChangeEvent<HTMLInputElement>) => setSelectValue(e.target.value);\n  if (!args.options) {\n    args.options = [{\n      id: 0,\n      value: 'Select...'\n    }, {\n      id: 1,\n      value: 'Option 1'\n    }, {\n      id: 2,\n      value: 'Option 2'\n    }, {\n      id: 3,\n      value: 'Option 3'\n    }, {\n      id: 4,\n      value: 'Option 4'\n    }];\n  }\n  return <Select {...args} />;\n}",...Error.parameters?.docs?.source}}},StartAdornment.parameters={...StartAdornment.parameters,docs:{...StartAdornment.parameters?.docs,source:{originalSource:"(args: SelectProps) => {\n  const isMultiple = Boolean('SelectProps' in args && args.SelectProps?.multiple);\n  const [selectValue, setSelectValue] = useState<Array<string | number> | string | number>(isMultiple ? [0] : 0);\n  args.value = selectValue;\n  args.onChange = (e: ChangeEvent<HTMLInputElement>) => setSelectValue(e.target.value);\n  if (!args.options) {\n    args.options = [{\n      id: 0,\n      value: 'Select...'\n    }, {\n      id: 1,\n      value: 'Option 1'\n    }, {\n      id: 2,\n      value: 'Option 2'\n    }, {\n      id: 3,\n      value: 'Option 3'\n    }, {\n      id: 4,\n      value: 'Option 4'\n    }];\n  }\n  return <Select {...args} />;\n}",...StartAdornment.parameters?.docs?.source}}},OptionDivider.parameters={...OptionDivider.parameters,docs:{...OptionDivider.parameters?.docs,source:{originalSource:"(args: SelectProps) => {\n  const isMultiple = Boolean('SelectProps' in args && args.SelectProps?.multiple);\n  const [selectValue, setSelectValue] = useState<Array<string | number> | string | number>(isMultiple ? [0] : 0);\n  args.value = selectValue;\n  args.onChange = (e: ChangeEvent<HTMLInputElement>) => setSelectValue(e.target.value);\n  if (!args.options) {\n    args.options = [{\n      id: 0,\n      value: 'Select...'\n    }, {\n      id: 1,\n      value: 'Option 1'\n    }, {\n      id: 2,\n      value: 'Option 2'\n    }, {\n      id: 3,\n      value: 'Option 3'\n    }, {\n      id: 4,\n      value: 'Option 4'\n    }];\n  }\n  return <Select {...args} />;\n}",...OptionDivider.parameters?.docs?.source}}},OptionDescription.parameters={...OptionDescription.parameters,docs:{...OptionDescription.parameters?.docs,source:{originalSource:"(args: SelectProps) => {\n  const isMultiple = Boolean('SelectProps' in args && args.SelectProps?.multiple);\n  const [selectValue, setSelectValue] = useState<Array<string | number> | string | number>(isMultiple ? [0] : 0);\n  args.value = selectValue;\n  args.onChange = (e: ChangeEvent<HTMLInputElement>) => setSelectValue(e.target.value);\n  if (!args.options) {\n    args.options = [{\n      id: 0,\n      value: 'Select...'\n    }, {\n      id: 1,\n      value: 'Option 1'\n    }, {\n      id: 2,\n      value: 'Option 2'\n    }, {\n      id: 3,\n      value: 'Option 3'\n    }, {\n      id: 4,\n      value: 'Option 4'\n    }];\n  }\n  return <Select {...args} />;\n}",...OptionDescription.parameters?.docs?.source}}},Disabled.parameters={...Disabled.parameters,docs:{...Disabled.parameters?.docs,source:{originalSource:"(args: SelectProps) => {\n  const isMultiple = Boolean('SelectProps' in args && args.SelectProps?.multiple);\n  const [selectValue, setSelectValue] = useState<Array<string | number> | string | number>(isMultiple ? [0] : 0);\n  args.value = selectValue;\n  args.onChange = (e: ChangeEvent<HTMLInputElement>) => setSelectValue(e.target.value);\n  if (!args.options) {\n    args.options = [{\n      id: 0,\n      value: 'Select...'\n    }, {\n      id: 1,\n      value: 'Option 1'\n    }, {\n      id: 2,\n      value: 'Option 2'\n    }, {\n      id: 3,\n      value: 'Option 3'\n    }, {\n      id: 4,\n      value: 'Option 4'\n    }];\n  }\n  return <Select {...args} />;\n}",...Disabled.parameters?.docs?.source}}},White.parameters={...White.parameters,docs:{...White.parameters?.docs,source:{originalSource:"(args: SelectProps) => {\n  const isMultiple = Boolean('SelectProps' in args && args.SelectProps?.multiple);\n  const [selectValue, setSelectValue] = useState<Array<string | number> | string | number>(isMultiple ? [0] : 0);\n  args.value = selectValue;\n  args.onChange = (e: ChangeEvent<HTMLInputElement>) => setSelectValue(e.target.value);\n  if (!args.options) {\n    args.options = [{\n      id: 0,\n      value: 'Select...'\n    }, {\n      id: 1,\n      value: 'Option 1'\n    }, {\n      id: 2,\n      value: 'Option 2'\n    }, {\n      id: 3,\n      value: 'Option 3'\n    }, {\n      id: 4,\n      value: 'Option 4'\n    }];\n  }\n  return <Select {...args} />;\n}",...White.parameters?.docs?.source}}},ChildrenOptions.parameters={...ChildrenOptions.parameters,docs:{...ChildrenOptions.parameters?.docs,source:{originalSource:"(args: SelectProps) => {\n  const isMultiple = Boolean('SelectProps' in args && args.SelectProps?.multiple);\n  const [selectValue, setSelectValue] = useState<Array<string | number> | string | number>(isMultiple ? [0] : 0);\n  args.value = selectValue;\n  args.onChange = (e: ChangeEvent<HTMLInputElement>) => setSelectValue(e.target.value);\n  if (!args.options) {\n    args.options = [{\n      id: 0,\n      value: 'Select...'\n    }, {\n      id: 1,\n      value: 'Option 1'\n    }, {\n      id: 2,\n      value: 'Option 2'\n    }, {\n      id: 3,\n      value: 'Option 3'\n    }, {\n      id: 4,\n      value: 'Option 4'\n    }];\n  }\n  return <Select {...args} />;\n}",...ChildrenOptions.parameters?.docs?.source}}},MultipleSelect.parameters={...MultipleSelect.parameters,docs:{...MultipleSelect.parameters?.docs,source:{originalSource:"args => {\n  if (!args.options) {\n    args.options = [{\n      id: 0,\n      value: 'Select...'\n    }, {\n      id: 1,\n      value: 'Option 1'\n    }, {\n      id: 2,\n      value: 'Option 2'\n    }, {\n      id: 3,\n      value: 'Option 3'\n    }, {\n      id: 4,\n      value: 'Option 4'\n    }];\n  }\n  return <Select {...args} />;\n}",...MultipleSelect.parameters?.docs?.source}}},MultipleSelectCheckbox.parameters={...MultipleSelectCheckbox.parameters,docs:{...MultipleSelectCheckbox.parameters?.docs,source:{originalSource:"(args: SelectProps) => {\n  const isMultiple = Boolean('SelectProps' in args && args.SelectProps?.multiple);\n  const [selectValue, setSelectValue] = useState<Array<string | number> | string | number>(isMultiple ? [0] : 0);\n  args.value = selectValue;\n  args.onChange = (e: ChangeEvent<HTMLInputElement>) => setSelectValue(e.target.value);\n  if (!args.options) {\n    args.options = [{\n      id: 0,\n      value: 'Select...'\n    }, {\n      id: 1,\n      value: 'Option 1'\n    }, {\n      id: 2,\n      value: 'Option 2'\n    }, {\n      id: 3,\n      value: 'Option 3'\n    }, {\n      id: 4,\n      value: 'Option 4'\n    }];\n  }\n  return <Select {...args} />;\n}",...MultipleSelectCheckbox.parameters?.docs?.source}}},MultipleSelectOptionDivider.parameters={...MultipleSelectOptionDivider.parameters,docs:{...MultipleSelectOptionDivider.parameters?.docs,source:{originalSource:"args => {\n  if (!args.options) {\n    args.options = [{\n      id: 0,\n      value: 'Select...'\n    }, {\n      id: 1,\n      value: 'Option 1'\n    }, {\n      id: 2,\n      value: 'Option 2'\n    }, {\n      id: 3,\n      value: 'Option 3'\n    }, {\n      id: 4,\n      value: 'Option 4'\n    }];\n  }\n  return <Select {...args} />;\n}",...MultipleSelectOptionDivider.parameters?.docs?.source}}},MultipleSelectOptionDescription.parameters={...MultipleSelectOptionDescription.parameters,docs:{...MultipleSelectOptionDescription.parameters?.docs,source:{originalSource:"args => {\n  if (!args.options) {\n    args.options = [{\n      id: 0,\n      value: 'Select...'\n    }, {\n      id: 1,\n      value: 'Option 1'\n    }, {\n      id: 2,\n      value: 'Option 2'\n    }, {\n      id: 3,\n      value: 'Option 3'\n    }, {\n      id: 4,\n      value: 'Option 4'\n    }];\n  }\n  return <Select {...args} />;\n}",...MultipleSelectOptionDescription.parameters?.docs?.source}}},MultipleSelectLargeWhite.parameters={...MultipleSelectLargeWhite.parameters,docs:{...MultipleSelectLargeWhite.parameters?.docs,source:{originalSource:"args => {\n  if (!args.options) {\n    args.options = [{\n      id: 0,\n      value: 'Select...'\n    }, {\n      id: 1,\n      value: 'Option 1'\n    }, {\n      id: 2,\n      value: 'Option 2'\n    }, {\n      id: 3,\n      value: 'Option 3'\n    }, {\n      id: 4,\n      value: 'Option 4'\n    }];\n  }\n  return <Select {...args} />;\n}",...MultipleSelectLargeWhite.parameters?.docs?.source}}};const __namedExportsOrder=["Default","Large","HelperText","Error","StartAdornment","OptionDivider","OptionDescription","Disabled","White","ChildrenOptions","MultipleSelect","MultipleSelectCheckbox","MultipleSelectOptionDivider","MultipleSelectOptionDescription","MultipleSelectLargeWhite"]}}]);